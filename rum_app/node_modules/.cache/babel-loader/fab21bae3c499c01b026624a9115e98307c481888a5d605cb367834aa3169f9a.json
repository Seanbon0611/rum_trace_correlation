{"ast":null,"code":"import { sendToExtension, createPageExitObservable, addTelemetryConfiguration, startTelemetry, canUseEventBridge, getEventBridge } from '@datadog/browser-core';\nimport { createDOMMutationObservable } from '../browser/domMutationObservable';\nimport { startPerformanceCollection } from '../browser/performanceCollection';\nimport { startRumAssembly } from '../domain/assembly';\nimport { startForegroundContexts } from '../domain/contexts/foregroundContexts';\nimport { startInternalContext } from '../domain/contexts/internalContext';\nimport { LifeCycle } from '../domain/lifeCycle';\nimport { startViewContexts } from '../domain/contexts/viewContexts';\nimport { startRequestCollection } from '../domain/requestCollection';\nimport { startActionCollection } from '../domain/rumEventsCollection/action/actionCollection';\nimport { startErrorCollection } from '../domain/rumEventsCollection/error/errorCollection';\nimport { startLongTaskCollection } from '../domain/rumEventsCollection/longTask/longTaskCollection';\nimport { startResourceCollection } from '../domain/rumEventsCollection/resource/resourceCollection';\nimport { startViewCollection } from '../domain/rumEventsCollection/view/viewCollection';\nimport { startRumSessionManager, startRumSessionManagerStub } from '../domain/rumSessionManager';\nimport { startRumBatch } from '../transport/startRumBatch';\nimport { startRumEventBridge } from '../transport/startRumEventBridge';\nimport { startUrlContexts } from '../domain/contexts/urlContexts';\nimport { createLocationChangeObservable } from '../browser/locationChangeObservable';\nimport { serializeRumConfiguration } from '../domain/configuration';\nimport { startFeatureFlagContexts } from '../domain/contexts/featureFlagContext';\nimport { startCustomerDataTelemetry } from '../domain/startCustomerDataTelemetry';\nimport { startPageStateHistory } from '../domain/contexts/pageStateHistory';\nimport { buildCommonContext } from '../domain/contexts/commonContext';\nexport function startRum(initConfiguration, configuration, recorderApi, globalContextManager, userContextManager, initialViewOptions) {\n  var lifeCycle = new LifeCycle();\n  lifeCycle.subscribe(11 /* RUM_EVENT_COLLECTED */, function (event) {\n    return sendToExtension('rum', event);\n  });\n  var telemetry = startRumTelemetry(configuration);\n  telemetry.setContextProvider(function () {\n    var _a, _b;\n    return {\n      application: {\n        id: configuration.applicationId\n      },\n      session: {\n        id: (_a = session.findTrackedSession()) === null || _a === void 0 ? void 0 : _a.id\n      },\n      view: {\n        id: (_b = viewContexts.findView()) === null || _b === void 0 ? void 0 : _b.id\n      },\n      action: {\n        id: actionContexts.findActionId()\n      }\n    };\n  });\n  var reportError = function (error) {\n    lifeCycle.notify(12 /* RAW_ERROR_COLLECTED */, {\n      error: error\n    });\n  };\n  var featureFlagContexts = startFeatureFlagContexts(lifeCycle);\n  if (!canUseEventBridge()) {\n    var pageExitObservable = createPageExitObservable();\n    pageExitObservable.subscribe(function (event) {\n      lifeCycle.notify(9 /* PAGE_EXITED */, event);\n    });\n    var batch = startRumBatch(configuration, lifeCycle, telemetry.observable, reportError, pageExitObservable);\n    startCustomerDataTelemetry(configuration, telemetry, lifeCycle, globalContextManager, userContextManager, featureFlagContexts, batch.flushObservable);\n  } else {\n    startRumEventBridge(lifeCycle);\n  }\n  var session = !canUseEventBridge() ? startRumSessionManager(configuration, lifeCycle) : startRumSessionManagerStub();\n  var domMutationObservable = createDOMMutationObservable();\n  var locationChangeObservable = createLocationChangeObservable(location);\n  var _a = startRumEventCollection(lifeCycle, configuration, location, session, locationChangeObservable, domMutationObservable, function () {\n      return buildCommonContext(globalContextManager, userContextManager, recorderApi);\n    }, reportError),\n    viewContexts = _a.viewContexts,\n    foregroundContexts = _a.foregroundContexts,\n    urlContexts = _a.urlContexts,\n    actionContexts = _a.actionContexts,\n    addAction = _a.addAction;\n  addTelemetryConfiguration(serializeRumConfiguration(initConfiguration));\n  startLongTaskCollection(lifeCycle, session);\n  var pageStateHistory = startPageStateHistory();\n  startResourceCollection(lifeCycle, configuration, session, pageStateHistory);\n  var _b = startViewCollection(lifeCycle, configuration, location, domMutationObservable, locationChangeObservable, foregroundContexts, featureFlagContexts, recorderApi, initialViewOptions),\n    addTiming = _b.addTiming,\n    startView = _b.startView;\n  var addError = startErrorCollection(lifeCycle, foregroundContexts, featureFlagContexts).addError;\n  startRequestCollection(lifeCycle, configuration, session);\n  startPerformanceCollection(lifeCycle, configuration);\n  var internalContext = startInternalContext(configuration.applicationId, session, viewContexts, actionContexts, urlContexts);\n  return {\n    addAction: addAction,\n    addError: addError,\n    addTiming: addTiming,\n    addFeatureFlagEvaluation: featureFlagContexts.addFeatureFlagEvaluation,\n    startView: startView,\n    lifeCycle: lifeCycle,\n    viewContexts: viewContexts,\n    session: session,\n    getInternalContext: internalContext.get\n  };\n}\nfunction startRumTelemetry(configuration) {\n  var telemetry = startTelemetry(\"browser-rum-sdk\" /* RUM */, configuration);\n  if (canUseEventBridge()) {\n    var bridge_1 = getEventBridge();\n    telemetry.observable.subscribe(function (event) {\n      return bridge_1.send('internal_telemetry', event);\n    });\n  }\n  return telemetry;\n}\nexport function startRumEventCollection(lifeCycle, configuration, location, sessionManager, locationChangeObservable, domMutationObservable, buildCommonContext, reportError) {\n  var viewContexts = startViewContexts(lifeCycle);\n  var urlContexts = startUrlContexts(lifeCycle, locationChangeObservable, location);\n  var foregroundContexts = startForegroundContexts();\n  var _a = startActionCollection(lifeCycle, domMutationObservable, configuration, foregroundContexts),\n    addAction = _a.addAction,\n    actionContexts = _a.actionContexts;\n  startRumAssembly(configuration, lifeCycle, sessionManager, viewContexts, urlContexts, actionContexts, buildCommonContext, reportError);\n  return {\n    viewContexts: viewContexts,\n    foregroundContexts: foregroundContexts,\n    urlContexts: urlContexts,\n    addAction: addAction,\n    actionContexts: actionContexts,\n    stop: function () {\n      viewContexts.stop();\n      foregroundContexts.stop();\n    }\n  };\n}","map":{"version":3,"names":["sendToExtension","createPageExitObservable","addTelemetryConfiguration","startTelemetry","canUseEventBridge","getEventBridge","createDOMMutationObservable","startPerformanceCollection","startRumAssembly","startForegroundContexts","startInternalContext","LifeCycle","startViewContexts","startRequestCollection","startActionCollection","startErrorCollection","startLongTaskCollection","startResourceCollection","startViewCollection","startRumSessionManager","startRumSessionManagerStub","startRumBatch","startRumEventBridge","startUrlContexts","createLocationChangeObservable","serializeRumConfiguration","startFeatureFlagContexts","startCustomerDataTelemetry","startPageStateHistory","buildCommonContext","startRum","initConfiguration","configuration","recorderApi","globalContextManager","userContextManager","initialViewOptions","lifeCycle","subscribe","event","telemetry","startRumTelemetry","setContextProvider","application","id","applicationId","session","_a","findTrackedSession","view","_b","viewContexts","findView","action","actionContexts","findActionId","reportError","error","notify","featureFlagContexts","pageExitObservable","batch","observable","flushObservable","domMutationObservable","locationChangeObservable","location","startRumEventCollection","foregroundContexts","urlContexts","addAction","pageStateHistory","addTiming","startView","addError","internalContext","addFeatureFlagEvaluation","getInternalContext","get","bridge_1","send","sessionManager","stop"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-rum-core/src/boot/startRum.ts"],"sourcesContent":["import type { Observable, TelemetryEvent, RawError, ContextManager } from '@datadog/browser-core'\nimport {\n  sendToExtension,\n  createPageExitObservable,\n  TelemetryService,\n  addTelemetryConfiguration,\n  startTelemetry,\n  canUseEventBridge,\n  getEventBridge,\n} from '@datadog/browser-core'\nimport { createDOMMutationObservable } from '../browser/domMutationObservable'\nimport { startPerformanceCollection } from '../browser/performanceCollection'\nimport { startRumAssembly } from '../domain/assembly'\nimport { startForegroundContexts } from '../domain/contexts/foregroundContexts'\nimport { startInternalContext } from '../domain/contexts/internalContext'\nimport { LifeCycle, LifeCycleEventType } from '../domain/lifeCycle'\nimport { startViewContexts } from '../domain/contexts/viewContexts'\nimport { startRequestCollection } from '../domain/requestCollection'\nimport { startActionCollection } from '../domain/rumEventsCollection/action/actionCollection'\nimport { startErrorCollection } from '../domain/rumEventsCollection/error/errorCollection'\nimport { startLongTaskCollection } from '../domain/rumEventsCollection/longTask/longTaskCollection'\nimport { startResourceCollection } from '../domain/rumEventsCollection/resource/resourceCollection'\nimport { startViewCollection } from '../domain/rumEventsCollection/view/viewCollection'\nimport type { RumSessionManager } from '../domain/rumSessionManager'\nimport { startRumSessionManager, startRumSessionManagerStub } from '../domain/rumSessionManager'\nimport { startRumBatch } from '../transport/startRumBatch'\nimport { startRumEventBridge } from '../transport/startRumEventBridge'\nimport { startUrlContexts } from '../domain/contexts/urlContexts'\nimport type { LocationChange } from '../browser/locationChangeObservable'\nimport { createLocationChangeObservable } from '../browser/locationChangeObservable'\nimport type { RumConfiguration, RumInitConfiguration } from '../domain/configuration'\nimport { serializeRumConfiguration } from '../domain/configuration'\nimport type { ViewOptions } from '../domain/rumEventsCollection/view/trackViews'\nimport { startFeatureFlagContexts } from '../domain/contexts/featureFlagContext'\nimport { startCustomerDataTelemetry } from '../domain/startCustomerDataTelemetry'\nimport { startPageStateHistory } from '../domain/contexts/pageStateHistory'\nimport type { CommonContext } from '../domain/contexts/commonContext'\nimport { buildCommonContext } from '../domain/contexts/commonContext'\nimport type { RecorderApi } from './rumPublicApi'\n\nexport function startRum(\n  initConfiguration: RumInitConfiguration,\n  configuration: RumConfiguration,\n  recorderApi: RecorderApi,\n  globalContextManager: ContextManager,\n  userContextManager: ContextManager,\n  initialViewOptions?: ViewOptions\n) {\n  const lifeCycle = new LifeCycle()\n\n  lifeCycle.subscribe(LifeCycleEventType.RUM_EVENT_COLLECTED, (event) => sendToExtension('rum', event))\n\n  const telemetry = startRumTelemetry(configuration)\n  telemetry.setContextProvider(() => ({\n    application: {\n      id: configuration.applicationId,\n    },\n    session: {\n      id: session.findTrackedSession()?.id,\n    },\n    view: {\n      id: viewContexts.findView()?.id,\n    },\n    action: {\n      id: actionContexts.findActionId(),\n    },\n  }))\n\n  const reportError = (error: RawError) => {\n    lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, { error })\n  }\n  const featureFlagContexts = startFeatureFlagContexts(lifeCycle)\n\n  if (!canUseEventBridge()) {\n    const pageExitObservable = createPageExitObservable()\n    pageExitObservable.subscribe((event) => {\n      lifeCycle.notify(LifeCycleEventType.PAGE_EXITED, event)\n    })\n    const batch = startRumBatch(configuration, lifeCycle, telemetry.observable, reportError, pageExitObservable)\n    startCustomerDataTelemetry(\n      configuration,\n      telemetry,\n      lifeCycle,\n      globalContextManager,\n      userContextManager,\n      featureFlagContexts,\n      batch.flushObservable\n    )\n  } else {\n    startRumEventBridge(lifeCycle)\n  }\n\n  const session = !canUseEventBridge() ? startRumSessionManager(configuration, lifeCycle) : startRumSessionManagerStub()\n  const domMutationObservable = createDOMMutationObservable()\n  const locationChangeObservable = createLocationChangeObservable(location)\n\n  const { viewContexts, foregroundContexts, urlContexts, actionContexts, addAction } = startRumEventCollection(\n    lifeCycle,\n    configuration,\n    location,\n    session,\n    locationChangeObservable,\n    domMutationObservable,\n    () => buildCommonContext(globalContextManager, userContextManager, recorderApi),\n    reportError\n  )\n\n  addTelemetryConfiguration(serializeRumConfiguration(initConfiguration))\n\n  startLongTaskCollection(lifeCycle, session)\n  const pageStateHistory = startPageStateHistory()\n  startResourceCollection(lifeCycle, configuration, session, pageStateHistory)\n  const { addTiming, startView } = startViewCollection(\n    lifeCycle,\n    configuration,\n    location,\n    domMutationObservable,\n    locationChangeObservable,\n    foregroundContexts,\n    featureFlagContexts,\n    recorderApi,\n    initialViewOptions\n  )\n  const { addError } = startErrorCollection(lifeCycle, foregroundContexts, featureFlagContexts)\n\n  startRequestCollection(lifeCycle, configuration, session)\n  startPerformanceCollection(lifeCycle, configuration)\n\n  const internalContext = startInternalContext(\n    configuration.applicationId,\n    session,\n    viewContexts,\n    actionContexts,\n    urlContexts\n  )\n\n  return {\n    addAction,\n    addError,\n    addTiming,\n    addFeatureFlagEvaluation: featureFlagContexts.addFeatureFlagEvaluation,\n    startView,\n    lifeCycle,\n    viewContexts,\n    session,\n    getInternalContext: internalContext.get,\n  }\n}\n\nfunction startRumTelemetry(configuration: RumConfiguration) {\n  const telemetry = startTelemetry(TelemetryService.RUM, configuration)\n  if (canUseEventBridge()) {\n    const bridge = getEventBridge<'internal_telemetry', TelemetryEvent>()!\n    telemetry.observable.subscribe((event) => bridge.send('internal_telemetry', event))\n  }\n  return telemetry\n}\n\nexport function startRumEventCollection(\n  lifeCycle: LifeCycle,\n  configuration: RumConfiguration,\n  location: Location,\n  sessionManager: RumSessionManager,\n  locationChangeObservable: Observable<LocationChange>,\n  domMutationObservable: Observable<void>,\n  buildCommonContext: () => CommonContext,\n  reportError: (error: RawError) => void\n) {\n  const viewContexts = startViewContexts(lifeCycle)\n  const urlContexts = startUrlContexts(lifeCycle, locationChangeObservable, location)\n\n  const foregroundContexts = startForegroundContexts()\n  const { addAction, actionContexts } = startActionCollection(\n    lifeCycle,\n    domMutationObservable,\n    configuration,\n    foregroundContexts\n  )\n\n  startRumAssembly(\n    configuration,\n    lifeCycle,\n    sessionManager,\n    viewContexts,\n    urlContexts,\n    actionContexts,\n    buildCommonContext,\n    reportError\n  )\n\n  return {\n    viewContexts,\n    foregroundContexts,\n    urlContexts,\n    addAction,\n    actionContexts,\n    stop: () => {\n      viewContexts.stop()\n      foregroundContexts.stop()\n    },\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}