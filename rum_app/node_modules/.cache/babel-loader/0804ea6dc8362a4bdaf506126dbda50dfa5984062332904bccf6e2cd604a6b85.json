{"ast":null,"code":"import { addDuration, addEventListeners, relativeNow } from '@datadog/browser-core';\nexport var MAX_PAGE_STATE_ENTRIES = 500;\nvar pageStateEntries = [];\nvar currentPageState;\nexport function startPageStateHistory() {\n  addPageState(getPageState());\n  var stop = addEventListeners(window, [\"pageshow\" /* PAGE_SHOW */, \"focus\" /* FOCUS */, \"blur\" /* BLUR */, \"visibilitychange\" /* VISIBILITY_CHANGE */, \"resume\" /* RESUME */, \"freeze\" /* FREEZE */, \"pagehide\" /* PAGE_HIDE */], function (event) {\n    // Only get events fired by the browser to avoid false currentPageState changes done with custom events\n    // cf: developer extension auto flush: https://github.com/DataDog/browser-sdk/blob/2f72bf05a672794c9e33965351964382a94c72ba/developer-extension/src/panel/flushEvents.ts#L11-L12\n    if (!event.isTrusted) {\n      return;\n    }\n    if (event.type === \"freeze\" /* FREEZE */) {\n      addPageState(\"frozen\" /* FROZEN */);\n    } else if (event.type === \"pagehide\" /* PAGE_HIDE */) {\n      addPageState(event.persisted ? \"frozen\" /* FROZEN */ : \"terminated\" /* TERMINATED */);\n    } else {\n      addPageState(getPageState());\n    }\n  }, {\n    capture: true\n  }).stop;\n  return {\n    findAll: function (startTime, duration) {\n      var entries = [];\n      var endTime = addDuration(startTime, duration);\n      for (var i = pageStateEntries.length - 1; i >= 0; i--) {\n        var stateStartTime = pageStateEntries[i].startTime;\n        if (stateStartTime >= endTime) {\n          continue;\n        }\n        entries.unshift(pageStateEntries[i]);\n        if (stateStartTime < startTime) {\n          break;\n        }\n      }\n      return entries.length ? entries : undefined;\n    },\n    stop: stop\n  };\n}\nfunction getPageState() {\n  if (document.visibilityState === 'hidden') {\n    return \"hidden\" /* HIDDEN */;\n  }\n\n  if (document.hasFocus()) {\n    return \"active\" /* ACTIVE */;\n  }\n\n  return \"passive\" /* PASSIVE */;\n}\n\nexport function addPageState(nextPageState, maxPageStateEntries) {\n  if (maxPageStateEntries === void 0) {\n    maxPageStateEntries = MAX_PAGE_STATE_ENTRIES;\n  }\n  if (nextPageState === currentPageState) {\n    return;\n  }\n  currentPageState = nextPageState;\n  if (pageStateEntries.length === maxPageStateEntries) {\n    pageStateEntries.shift();\n  }\n  pageStateEntries.push({\n    state: currentPageState,\n    startTime: relativeNow()\n  });\n}\nexport function resetPageStates() {\n  pageStateEntries = [];\n  currentPageState = undefined;\n}","map":{"version":3,"names":["addDuration","addEventListeners","relativeNow","MAX_PAGE_STATE_ENTRIES","pageStateEntries","currentPageState","startPageStateHistory","addPageState","getPageState","stop","window","event","isTrusted","type","persisted","capture","findAll","startTime","duration","entries","endTime","i","length","stateStartTime","unshift","undefined","document","visibilityState","hasFocus","nextPageState","maxPageStateEntries","shift","push","state","resetPageStates"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-rum-core/src/domain/contexts/pageStateHistory.ts"],"sourcesContent":["import type { Duration, RelativeTime } from '@datadog/browser-core'\nimport { addDuration, addEventListeners, relativeNow, DOM_EVENT } from '@datadog/browser-core'\n\nexport const MAX_PAGE_STATE_ENTRIES = 500\n\nexport const enum PageState {\n  ACTIVE = 'active',\n  PASSIVE = 'passive',\n  HIDDEN = 'hidden',\n  FROZEN = 'frozen',\n  TERMINATED = 'terminated',\n}\nexport type PageStateEntry = { state: PageState; startTime: RelativeTime }\nexport interface PageStateHistory {\n  findAll: (startTime: RelativeTime, duration: Duration) => PageStateEntry[] | undefined\n  stop: () => void\n}\nlet pageStateEntries: PageStateEntry[] = []\nlet currentPageState: PageState | undefined\n\nexport function startPageStateHistory(): PageStateHistory {\n  addPageState(getPageState())\n\n  const { stop } = addEventListeners(\n    window,\n    [\n      DOM_EVENT.PAGE_SHOW,\n      DOM_EVENT.FOCUS,\n      DOM_EVENT.BLUR,\n      DOM_EVENT.VISIBILITY_CHANGE,\n      DOM_EVENT.RESUME,\n      DOM_EVENT.FREEZE,\n      DOM_EVENT.PAGE_HIDE,\n    ],\n    (event) => {\n      // Only get events fired by the browser to avoid false currentPageState changes done with custom events\n      // cf: developer extension auto flush: https://github.com/DataDog/browser-sdk/blob/2f72bf05a672794c9e33965351964382a94c72ba/developer-extension/src/panel/flushEvents.ts#L11-L12\n      if (!event.isTrusted) {\n        return\n      }\n\n      if (event.type === DOM_EVENT.FREEZE) {\n        addPageState(PageState.FROZEN)\n      } else if (event.type === DOM_EVENT.PAGE_HIDE) {\n        addPageState((event as PageTransitionEvent).persisted ? PageState.FROZEN : PageState.TERMINATED)\n      } else {\n        addPageState(getPageState())\n      }\n    },\n    { capture: true }\n  )\n\n  return {\n    findAll(startTime: RelativeTime, duration: Duration) {\n      const entries: PageStateEntry[] = []\n      const endTime = addDuration(startTime, duration)\n      for (let i = pageStateEntries.length - 1; i >= 0; i--) {\n        const { startTime: stateStartTime } = pageStateEntries[i]\n\n        if (stateStartTime >= endTime) {\n          continue\n        }\n\n        entries.unshift(pageStateEntries[i])\n\n        if (stateStartTime < startTime) {\n          break\n        }\n      }\n\n      return entries.length ? entries : undefined\n    },\n    stop,\n  }\n}\n\nfunction getPageState(): PageState {\n  if (document.visibilityState === 'hidden') {\n    return PageState.HIDDEN\n  }\n  if (document.hasFocus()) {\n    return PageState.ACTIVE\n  }\n  return PageState.PASSIVE\n}\n\nexport function addPageState(nextPageState: PageState, maxPageStateEntries = MAX_PAGE_STATE_ENTRIES) {\n  if (nextPageState === currentPageState) {\n    return\n  }\n\n  currentPageState = nextPageState\n\n  if (pageStateEntries.length === maxPageStateEntries) {\n    pageStateEntries.shift()\n  }\n\n  pageStateEntries.push({ state: currentPageState, startTime: relativeNow() })\n}\n\nexport function resetPageStates() {\n  pageStateEntries = []\n  currentPageState = undefined\n}\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,iBAAiB,EAAEC,WAAW,QAAmB,uBAAuB;AAE9F,OAAO,IAAMC,sBAAsB,GAAG,GAAG;AAczC,IAAIC,gBAAgB,GAAqB,EAAE;AAC3C,IAAIC,gBAAuC;AAE3C,OAAM,SAAUC,qBAAqBA,CAAA;EACnCC,YAAY,CAACC,YAAY,EAAE,CAAC;EAEpB,IAAAC,IAAI,GAAKR,iBAAiB,CAChCS,MAAM,EACN,C,yLAQC,EACD,UAACC,KAAK;IACJ;IACA;IACA,IAAI,CAACA,KAAK,CAACC,SAAS,EAAE;MACpB;;IAGF,IAAID,KAAK,CAACE,IAAI,4BAAuB;MACnCN,YAAY,uBAAkB;KAC/B,MAAM,IAAII,KAAK,CAACE,IAAI,iCAA0B;MAC7CN,YAAY,CAAEI,KAA6B,CAACG,SAAS,GAAE,wBAAmB,8BAAsB;KACjG,MAAM;MACLP,YAAY,CAACC,YAAY,EAAE,CAAC;;EAEhC,CAAC,EACD;IAAEO,OAAO,EAAE;EAAI,CAAE,CAClB,CAAAN,IA3BW;EA6BZ,OAAO;IACLO,OAAO,EAAP,SAAAA,CAAQC,SAAuB,EAAEC,QAAkB;MACjD,IAAMC,OAAO,GAAqB,EAAE;MACpC,IAAMC,OAAO,GAAGpB,WAAW,CAACiB,SAAS,EAAEC,QAAQ,CAAC;MAChD,KAAK,IAAIG,CAAC,GAAGjB,gBAAgB,CAACkB,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC7C,IAAWE,cAAc,GAAKnB,gBAAgB,CAACiB,CAAC,CAAC,CAAAJ,SAAxB;QAEjC,IAAIM,cAAc,IAAIH,OAAO,EAAE;UAC7B;;QAGFD,OAAO,CAACK,OAAO,CAACpB,gBAAgB,CAACiB,CAAC,CAAC,CAAC;QAEpC,IAAIE,cAAc,GAAGN,SAAS,EAAE;UAC9B;;;MAIJ,OAAOE,OAAO,CAACG,MAAM,GAAGH,OAAO,GAAGM,SAAS;IAC7C,CAAC;IACDhB,IAAI,EAAAA;GACL;AACH;AAEA,SAASD,YAAYA,CAAA;EACnB,IAAIkB,QAAQ,CAACC,eAAe,KAAK,QAAQ,EAAE;IACzC;;;EAEF,IAAID,QAAQ,CAACE,QAAQ,EAAE,EAAE;IACvB;;;EAEF;AACF;;AAEA,OAAM,SAAUrB,YAAYA,CAACsB,aAAwB,EAAEC,mBAA4C;EAA5C,IAAAA,mBAAA;IAAAA,mBAAA,GAAA3B,sBAA4C;EAAA;EACjG,IAAI0B,aAAa,KAAKxB,gBAAgB,EAAE;IACtC;;EAGFA,gBAAgB,GAAGwB,aAAa;EAEhC,IAAIzB,gBAAgB,CAACkB,MAAM,KAAKQ,mBAAmB,EAAE;IACnD1B,gBAAgB,CAAC2B,KAAK,EAAE;;EAG1B3B,gBAAgB,CAAC4B,IAAI,CAAC;IAAEC,KAAK,EAAE5B,gBAAgB;IAAEY,SAAS,EAAEf,WAAW;EAAE,CAAE,CAAC;AAC9E;AAEA,OAAM,SAAUgC,eAAeA,CAAA;EAC7B9B,gBAAgB,GAAG,EAAE;EACrBC,gBAAgB,GAAGoB,SAAS;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}