{"ast":null,"code":"import { objectEntries } from '@datadog/browser-core';\nexport function buildReplayPayload(data, metadata, rawSegmentBytesCount) {\n  var formData = new FormData();\n  formData.append('segment', new Blob([data], {\n    type: 'application/octet-stream'\n  }), \"\".concat(metadata.session.id, \"-\").concat(metadata.start));\n  toFormEntries(metadata, function (key, value) {\n    return formData.append(key, value);\n  });\n  formData.append('raw_segment_size', rawSegmentBytesCount.toString());\n  return {\n    data: formData,\n    bytesCount: data.byteLength\n  };\n}\nexport function toFormEntries(input, onEntry, prefix) {\n  if (prefix === void 0) {\n    prefix = '';\n  }\n  objectEntries(input).forEach(function (_a) {\n    var key = _a[0],\n      value = _a[1];\n    if (typeof value === 'object' && value !== null) {\n      toFormEntries(value, onEntry, \"\".concat(prefix).concat(key, \".\"));\n    } else {\n      onEntry(\"\".concat(prefix).concat(key), String(value));\n    }\n  });\n}","map":{"version":3,"names":["objectEntries","buildReplayPayload","data","metadata","rawSegmentBytesCount","formData","FormData","append","Blob","type","concat","session","id","start","toFormEntries","key","value","toString","bytesCount","byteLength","input","onEntry","prefix","forEach","_a","String"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-rum/src/domain/segmentCollection/buildReplayPayload.ts"],"sourcesContent":["import type { Payload } from '@datadog/browser-core'\nimport { objectEntries } from '@datadog/browser-core'\nimport type { BrowserSegmentMetadata } from '../../types'\n\nexport function buildReplayPayload(\n  data: Uint8Array,\n  metadata: BrowserSegmentMetadata,\n  rawSegmentBytesCount: number\n): Payload {\n  const formData = new FormData()\n\n  formData.append(\n    'segment',\n    new Blob([data], {\n      type: 'application/octet-stream',\n    }),\n    `${metadata.session.id}-${metadata.start}`\n  )\n\n  toFormEntries(metadata, (key, value) => formData.append(key, value))\n  formData.append('raw_segment_size', rawSegmentBytesCount.toString())\n\n  return { data: formData, bytesCount: data.byteLength }\n}\n\nexport function toFormEntries(input: object, onEntry: (key: string, value: string) => void, prefix = '') {\n  objectEntries(input as { [key: string]: unknown }).forEach(([key, value]) => {\n    if (typeof value === 'object' && value !== null) {\n      toFormEntries(value, onEntry, `${prefix}${key}.`)\n    } else {\n      onEntry(`${prefix}${key}`, String(value))\n    }\n  })\n}\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,uBAAuB;AAGrD,OAAM,SAAUC,kBAAkBA,CAChCC,IAAgB,EAChBC,QAAgC,EAChCC,oBAA4B;EAE5B,IAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;EAE/BD,QAAQ,CAACE,MAAM,CACb,SAAS,EACT,IAAIC,IAAI,CAAC,CAACN,IAAI,CAAC,EAAE;IACfO,IAAI,EAAE;GACP,CAAC,EACF,GAAAC,MAAA,CAAGP,QAAQ,CAACQ,OAAO,CAACC,EAAE,OAAAF,MAAA,CAAIP,QAAQ,CAACU,KAAK,CAAE,CAC3C;EAEDC,aAAa,CAACX,QAAQ,EAAE,UAACY,GAAG,EAAEC,KAAK;IAAK,OAAAX,QAAQ,CAACE,MAAM,CAACQ,GAAG,EAAEC,KAAK,CAAC;EAA3B,CAA2B,CAAC;EACpEX,QAAQ,CAACE,MAAM,CAAC,kBAAkB,EAAEH,oBAAoB,CAACa,QAAQ,EAAE,CAAC;EAEpE,OAAO;IAAEf,IAAI,EAAEG,QAAQ;IAAEa,UAAU,EAAEhB,IAAI,CAACiB;EAAU,CAAE;AACxD;AAEA,OAAM,SAAUL,aAAaA,CAACM,KAAa,EAAEC,OAA6C,EAAEC,MAAW;EAAX,IAAAA,MAAA;IAAAA,MAAA,KAAW;EAAA;EACrGtB,aAAa,CAACoB,KAAmC,CAAC,CAACG,OAAO,CAAC,UAACC,EAAY;QAAXT,GAAG,GAAAS,EAAA;MAAER,KAAK,GAAAQ,EAAA;IACrE,IAAI,OAAOR,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;MAC/CF,aAAa,CAACE,KAAK,EAAEK,OAAO,EAAE,GAAAX,MAAA,CAAGY,MAAM,EAAAZ,MAAA,CAAGK,GAAG,MAAG,CAAC;KAClD,MAAM;MACLM,OAAO,CAAC,GAAAX,MAAA,CAAGY,MAAM,EAAAZ,MAAA,CAAGK,GAAG,CAAE,EAAEU,MAAM,CAACT,KAAK,CAAC,CAAC;;EAE7C,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}