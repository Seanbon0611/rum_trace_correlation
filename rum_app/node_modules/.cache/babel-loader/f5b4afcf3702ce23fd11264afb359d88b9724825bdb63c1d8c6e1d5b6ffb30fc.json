{"ast":null,"code":"import { monitor, Observable, throttle, addEventListener } from '@datadog/browser-core';\nvar viewportObservable;\nexport function initViewportObservable() {\n  if (!viewportObservable) {\n    viewportObservable = createViewportObservable();\n  }\n  return viewportObservable;\n}\nexport function createViewportObservable() {\n  var observable = new Observable(function () {\n    var updateDimension = throttle(monitor(function () {\n      observable.notify(getViewportDimension());\n    }), 200).throttled;\n    return addEventListener(window, \"resize\" /* RESIZE */, updateDimension, {\n      capture: true,\n      passive: true\n    }).stop;\n  });\n  return observable;\n}\n// excludes the width and height of any rendered classic scrollbar that is fixed to the visual viewport\nexport function getViewportDimension() {\n  var visual = window.visualViewport;\n  if (visual) {\n    return {\n      width: Number(visual.width * visual.scale),\n      height: Number(visual.height * visual.scale)\n    };\n  }\n  return {\n    width: Number(window.innerWidth || 0),\n    height: Number(window.innerHeight || 0)\n  };\n}","map":{"version":3,"names":["monitor","Observable","throttle","addEventListener","viewportObservable","initViewportObservable","createViewportObservable","observable","updateDimension","notify","getViewportDimension","throttled","window","capture","passive","stop","visual","visualViewport","width","Number","scale","height","innerWidth","innerHeight"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-rum-core/src/browser/viewportObservable.ts"],"sourcesContent":["import { monitor, Observable, throttle, addEventListener, DOM_EVENT } from '@datadog/browser-core'\n\nexport interface ViewportDimension {\n  height: number\n  width: number\n}\n\nlet viewportObservable: Observable<ViewportDimension> | undefined\n\nexport function initViewportObservable() {\n  if (!viewportObservable) {\n    viewportObservable = createViewportObservable()\n  }\n  return viewportObservable\n}\n\nexport function createViewportObservable() {\n  const observable = new Observable<ViewportDimension>(() => {\n    const { throttled: updateDimension } = throttle(\n      monitor(() => {\n        observable.notify(getViewportDimension())\n      }),\n      200\n    )\n\n    return addEventListener(window, DOM_EVENT.RESIZE, updateDimension, { capture: true, passive: true }).stop\n  })\n\n  return observable\n}\n\n// excludes the width and height of any rendered classic scrollbar that is fixed to the visual viewport\nexport function getViewportDimension(): ViewportDimension {\n  const visual = window.visualViewport\n  if (visual) {\n    return {\n      width: Number(visual.width * visual.scale),\n      height: Number(visual.height * visual.scale),\n    }\n  }\n\n  return {\n    width: Number(window.innerWidth || 0),\n    height: Number(window.innerHeight || 0),\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,gBAAgB,QAAmB,uBAAuB;AAOlG,IAAIC,kBAA6D;AAEjE,OAAM,SAAUC,sBAAsBA,CAAA;EACpC,IAAI,CAACD,kBAAkB,EAAE;IACvBA,kBAAkB,GAAGE,wBAAwB,EAAE;;EAEjD,OAAOF,kBAAkB;AAC3B;AAEA,OAAM,SAAUE,wBAAwBA,CAAA;EACtC,IAAMC,UAAU,GAAG,IAAIN,UAAU,CAAoB;IAC3C,IAAWO,eAAe,GAAKN,QAAQ,CAC7CF,OAAO,CAAC;MACNO,UAAU,CAACE,MAAM,CAACC,oBAAoB,EAAE,CAAC;IAC3C,CAAC,CAAC,EACF,GAAG,CACJ,CAAAC,SALiC;IAOlC,OAAOR,gBAAgB,CAACS,MAAM,yBAAoBJ,eAAe,EAAE;MAAEK,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI;EAC3G,CAAC,CAAC;EAEF,OAAOR,UAAU;AACnB;AAEA;AACA,OAAM,SAAUG,oBAAoBA,CAAA;EAClC,IAAMM,MAAM,GAAGJ,MAAM,CAACK,cAAc;EACpC,IAAID,MAAM,EAAE;IACV,OAAO;MACLE,KAAK,EAAEC,MAAM,CAACH,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACI,KAAK,CAAC;MAC1CC,MAAM,EAAEF,MAAM,CAACH,MAAM,CAACK,MAAM,GAAGL,MAAM,CAACI,KAAK;KAC5C;;EAGH,OAAO;IACLF,KAAK,EAAEC,MAAM,CAACP,MAAM,CAACU,UAAU,IAAI,CAAC,CAAC;IACrCD,MAAM,EAAEF,MAAM,CAACP,MAAM,CAACW,WAAW,IAAI,CAAC;GACvC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}