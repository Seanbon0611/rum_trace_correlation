{"ast":null,"code":"import { combine, isEmptyObject, limitModification, timeStampNow, currentDrift, display, createEventRateLimiter, canUseEventBridge } from '@datadog/browser-core';\nimport { getSyntheticsContext } from './contexts/syntheticsContext';\nimport { getCiTestContext } from './contexts/ciTestContext';\nimport { getDisplayContext } from './contexts/displayContext';\nvar VIEW_EVENTS_MODIFIABLE_FIELD_PATHS = [\n// Fields with sensitive data\n'view.url', 'view.referrer', 'action.target.name', 'error.message', 'error.stack', 'error.resource.url', 'resource.url'];\nvar OTHER_EVENTS_MODIFIABLE_FIELD_PATHS = VIEW_EVENTS_MODIFIABLE_FIELD_PATHS.concat([\n// User-customizable field\n'context']);\nexport function startRumAssembly(configuration, lifeCycle, sessionManager, viewContexts, urlContexts, actionContexts, buildCommonContext, reportError) {\n  var _a;\n  var eventRateLimiters = (_a = {}, _a[\"error\" /* ERROR */] = createEventRateLimiter(\"error\" /* ERROR */, configuration.eventRateLimiterThreshold, reportError), _a[\"action\" /* ACTION */] = createEventRateLimiter(\"action\" /* ACTION */, configuration.eventRateLimiterThreshold, reportError), _a);\n  var syntheticsContext = getSyntheticsContext();\n  var ciTestContext = getCiTestContext();\n  lifeCycle.subscribe(10 /* RAW_RUM_EVENT_COLLECTED */, function (_a) {\n    var startTime = _a.startTime,\n      rawRumEvent = _a.rawRumEvent,\n      domainContext = _a.domainContext,\n      savedCommonContext = _a.savedCommonContext,\n      customerContext = _a.customerContext;\n    var viewContext = viewContexts.findView(startTime);\n    var urlContext = urlContexts.findUrl(startTime);\n    // allow to send events if the session was tracked when they start\n    // except for views which are continuously updated\n    // TODO: stop sending view updates when session is expired\n    var session = sessionManager.findTrackedSession(rawRumEvent.type !== \"view\" /* VIEW */ ? startTime : undefined);\n    if (session && viewContext && urlContext) {\n      var commonContext = savedCommonContext || buildCommonContext();\n      var actionId = actionContexts.findActionId(startTime);\n      var rumContext = {\n        _dd: {\n          format_version: 2,\n          drift: currentDrift(),\n          session: {\n            plan: session.plan\n          },\n          browser_sdk_version: canUseEventBridge() ? \"4.34.1\" : undefined\n        },\n        application: {\n          id: configuration.applicationId\n        },\n        date: timeStampNow(),\n        service: viewContext.service || configuration.service,\n        version: viewContext.version || configuration.version,\n        source: 'browser',\n        session: {\n          id: session.id,\n          type: syntheticsContext ? \"synthetics\" /* SYNTHETICS */ : ciTestContext ? \"ci_test\" /* CI_TEST */ : \"user\" /* USER */\n        },\n\n        view: {\n          id: viewContext.id,\n          name: viewContext.name,\n          url: urlContext.url,\n          referrer: urlContext.referrer\n        },\n        action: needToAssembleWithAction(rawRumEvent) && actionId ? {\n          id: actionId\n        } : undefined,\n        synthetics: syntheticsContext,\n        ci_test: ciTestContext,\n        display: getDisplayContext()\n      };\n      var serverRumEvent = combine(rumContext, rawRumEvent);\n      serverRumEvent.context = combine(commonContext.context, customerContext);\n      if (!('has_replay' in serverRumEvent.session)) {\n        ;\n        serverRumEvent.session.has_replay = commonContext.hasReplay;\n      }\n      if (!isEmptyObject(commonContext.user)) {\n        ;\n        serverRumEvent.usr = commonContext.user;\n      }\n      if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {\n        if (isEmptyObject(serverRumEvent.context)) {\n          delete serverRumEvent.context;\n        }\n        lifeCycle.notify(11 /* RUM_EVENT_COLLECTED */, serverRumEvent);\n      }\n    }\n  });\n}\nfunction shouldSend(event, beforeSend, domainContext, eventRateLimiters) {\n  var _a;\n  if (beforeSend) {\n    var result = limitModification(event, event.type === \"view\" /* VIEW */ ? VIEW_EVENTS_MODIFIABLE_FIELD_PATHS : OTHER_EVENTS_MODIFIABLE_FIELD_PATHS, function (event) {\n      return beforeSend(event, domainContext);\n    });\n    if (result === false && event.type !== \"view\" /* VIEW */) {\n      return false;\n    }\n    if (result === false) {\n      display.warn(\"Can't dismiss view events using beforeSend!\");\n    }\n  }\n  var rateLimitReached = (_a = eventRateLimiters[event.type]) === null || _a === void 0 ? void 0 : _a.isLimitReached();\n  return !rateLimitReached;\n}\nfunction needToAssembleWithAction(event) {\n  return [\"error\" /* ERROR */, \"resource\" /* RESOURCE */, \"long_task\" /* LONG_TASK */].indexOf(event.type) !== -1;\n}","map":{"version":3,"names":["combine","isEmptyObject","limitModification","timeStampNow","currentDrift","display","createEventRateLimiter","canUseEventBridge","getSyntheticsContext","getCiTestContext","getDisplayContext","VIEW_EVENTS_MODIFIABLE_FIELD_PATHS","OTHER_EVENTS_MODIFIABLE_FIELD_PATHS","concat","startRumAssembly","configuration","lifeCycle","sessionManager","viewContexts","urlContexts","actionContexts","buildCommonContext","reportError","eventRateLimiters","_a","eventRateLimiterThreshold","syntheticsContext","ciTestContext","subscribe","startTime","rawRumEvent","domainContext","savedCommonContext","customerContext","viewContext","findView","urlContext","findUrl","session","findTrackedSession","type","undefined","commonContext","actionId","findActionId","rumContext","_dd","format_version","drift","plan","browser_sdk_version","application","id","applicationId","date","service","version","source","view","name","url","referrer","action","needToAssembleWithAction","synthetics","ci_test","serverRumEvent","context","has_replay","hasReplay","user","usr","shouldSend","beforeSend","notify","event","result","warn","rateLimitReached","isLimitReached","indexOf"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-rum-core/src/domain/assembly.ts"],"sourcesContent":["import type { Context, RawError, EventRateLimiter, User } from '@datadog/browser-core'\nimport {\n  combine,\n  isEmptyObject,\n  limitModification,\n  timeStampNow,\n  currentDrift,\n  display,\n  createEventRateLimiter,\n  canUseEventBridge,\n} from '@datadog/browser-core'\nimport type { RumEventDomainContext } from '../domainContext.types'\nimport type {\n  RawRumErrorEvent,\n  RawRumEvent,\n  RawRumLongTaskEvent,\n  RawRumResourceEvent,\n  RumContext,\n} from '../rawRumEvent.types'\nimport { RumEventType } from '../rawRumEvent.types'\nimport type { RumEvent } from '../rumEvent.types'\nimport { getSyntheticsContext } from './contexts/syntheticsContext'\nimport { getCiTestContext } from './contexts/ciTestContext'\nimport type { LifeCycle } from './lifeCycle'\nimport { LifeCycleEventType } from './lifeCycle'\nimport type { ViewContexts } from './contexts/viewContexts'\nimport type { RumSessionManager } from './rumSessionManager'\nimport type { UrlContexts } from './contexts/urlContexts'\nimport type { RumConfiguration } from './configuration'\nimport type { ActionContexts } from './rumEventsCollection/action/actionCollection'\nimport { getDisplayContext } from './contexts/displayContext'\nimport type { CommonContext } from './contexts/commonContext'\n\n// replaced at build time\ndeclare const __BUILD_ENV__SDK_VERSION__: string\n\nconst enum SessionType {\n  SYNTHETICS = 'synthetics',\n  USER = 'user',\n  CI_TEST = 'ci_test',\n}\n\nconst VIEW_EVENTS_MODIFIABLE_FIELD_PATHS = [\n  // Fields with sensitive data\n  'view.url',\n  'view.referrer',\n  'action.target.name',\n  'error.message',\n  'error.stack',\n  'error.resource.url',\n  'resource.url',\n]\n\nconst OTHER_EVENTS_MODIFIABLE_FIELD_PATHS = VIEW_EVENTS_MODIFIABLE_FIELD_PATHS.concat([\n  // User-customizable field\n  'context',\n])\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] }\n\nexport function startRumAssembly(\n  configuration: RumConfiguration,\n  lifeCycle: LifeCycle,\n  sessionManager: RumSessionManager,\n  viewContexts: ViewContexts,\n  urlContexts: UrlContexts,\n  actionContexts: ActionContexts,\n  buildCommonContext: () => CommonContext,\n  reportError: (error: RawError) => void\n) {\n  const eventRateLimiters = {\n    [RumEventType.ERROR]: createEventRateLimiter(\n      RumEventType.ERROR,\n      configuration.eventRateLimiterThreshold,\n      reportError\n    ),\n    [RumEventType.ACTION]: createEventRateLimiter(\n      RumEventType.ACTION,\n      configuration.eventRateLimiterThreshold,\n      reportError\n    ),\n  }\n\n  const syntheticsContext = getSyntheticsContext()\n  const ciTestContext = getCiTestContext()\n\n  lifeCycle.subscribe(\n    LifeCycleEventType.RAW_RUM_EVENT_COLLECTED,\n    ({ startTime, rawRumEvent, domainContext, savedCommonContext, customerContext }) => {\n      const viewContext = viewContexts.findView(startTime)\n      const urlContext = urlContexts.findUrl(startTime)\n      // allow to send events if the session was tracked when they start\n      // except for views which are continuously updated\n      // TODO: stop sending view updates when session is expired\n      const session = sessionManager.findTrackedSession(rawRumEvent.type !== RumEventType.VIEW ? startTime : undefined)\n      if (session && viewContext && urlContext) {\n        const commonContext = savedCommonContext || buildCommonContext()\n        const actionId = actionContexts.findActionId(startTime)\n\n        const rumContext: RumContext = {\n          _dd: {\n            format_version: 2,\n            drift: currentDrift(),\n            session: {\n              plan: session.plan,\n            },\n            browser_sdk_version: canUseEventBridge() ? __BUILD_ENV__SDK_VERSION__ : undefined,\n          },\n          application: {\n            id: configuration.applicationId,\n          },\n          date: timeStampNow(),\n          service: viewContext.service || configuration.service,\n          version: viewContext.version || configuration.version,\n          source: 'browser',\n          session: {\n            id: session.id,\n            type: syntheticsContext ? SessionType.SYNTHETICS : ciTestContext ? SessionType.CI_TEST : SessionType.USER,\n          },\n          view: {\n            id: viewContext.id,\n            name: viewContext.name,\n            url: urlContext.url,\n            referrer: urlContext.referrer,\n          },\n          action: needToAssembleWithAction(rawRumEvent) && actionId ? { id: actionId } : undefined,\n          synthetics: syntheticsContext,\n          ci_test: ciTestContext,\n          display: getDisplayContext(),\n        }\n\n        const serverRumEvent = combine(rumContext as RumContext & Context, rawRumEvent) as RumEvent & Context\n        serverRumEvent.context = combine(commonContext.context, customerContext)\n\n        if (!('has_replay' in serverRumEvent.session)) {\n          ;(serverRumEvent.session as Mutable<RumEvent['session']>).has_replay = commonContext.hasReplay\n        }\n\n        if (!isEmptyObject(commonContext.user)) {\n          ;(serverRumEvent.usr as Mutable<RumEvent['usr']>) = commonContext.user as User & Context\n        }\n\n        if (shouldSend(serverRumEvent, configuration.beforeSend, domainContext, eventRateLimiters)) {\n          if (isEmptyObject(serverRumEvent.context)) {\n            delete serverRumEvent.context\n          }\n          lifeCycle.notify(LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent)\n        }\n      }\n    }\n  )\n}\n\nfunction shouldSend(\n  event: RumEvent & Context,\n  beforeSend: RumConfiguration['beforeSend'],\n  domainContext: RumEventDomainContext,\n  eventRateLimiters: { [key in RumEventType]?: EventRateLimiter }\n) {\n  if (beforeSend) {\n    const result = limitModification(\n      event,\n      event.type === RumEventType.VIEW ? VIEW_EVENTS_MODIFIABLE_FIELD_PATHS : OTHER_EVENTS_MODIFIABLE_FIELD_PATHS,\n      (event) => beforeSend(event, domainContext)\n    )\n    if (result === false && event.type !== RumEventType.VIEW) {\n      return false\n    }\n    if (result === false) {\n      display.warn(\"Can't dismiss view events using beforeSend!\")\n    }\n  }\n\n  const rateLimitReached = eventRateLimiters[event.type]?.isLimitReached()\n  return !rateLimitReached\n}\n\nfunction needToAssembleWithAction(\n  event: RawRumEvent\n): event is RawRumErrorEvent | RawRumResourceEvent | RawRumLongTaskEvent {\n  return [RumEventType.ERROR, RumEventType.RESOURCE, RumEventType.LONG_TASK].indexOf(event.type) !== -1\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}