{"ast":null,"code":"import { ErrorSource } from './error';\nimport { clocksNow } from './timeUtils';\nimport { ONE_MINUTE } from './utils';\nexport function createEventRateLimiter(eventType, limit, onLimitReached) {\n  var eventCount = 0;\n  var allowNextEvent = false;\n  return {\n    isLimitReached: function () {\n      if (eventCount === 0) {\n        setTimeout(function () {\n          eventCount = 0;\n        }, ONE_MINUTE);\n      }\n      eventCount += 1;\n      if (eventCount <= limit || allowNextEvent) {\n        allowNextEvent = false;\n        return false;\n      }\n      if (eventCount === limit + 1) {\n        allowNextEvent = true;\n        try {\n          onLimitReached({\n            message: \"Reached max number of \".concat(eventType, \"s by minute: \").concat(limit),\n            source: ErrorSource.AGENT,\n            startClocks: clocksNow()\n          });\n        } finally {\n          allowNextEvent = false;\n        }\n      }\n      return true;\n    }\n  };\n}","map":{"version":3,"names":["ErrorSource","clocksNow","ONE_MINUTE","createEventRateLimiter","eventType","limit","onLimitReached","eventCount","allowNextEvent","isLimitReached","setTimeout","message","concat","source","AGENT","startClocks"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-core/src/tools/createEventRateLimiter.ts"],"sourcesContent":["import type { RawError } from './error'\nimport { ErrorSource } from './error'\nimport { clocksNow } from './timeUtils'\nimport { ONE_MINUTE } from './utils'\n\nexport type EventRateLimiter = ReturnType<typeof createEventRateLimiter>\n\nexport function createEventRateLimiter(\n  eventType: string,\n  limit: number,\n  onLimitReached: (limitError: RawError) => void\n) {\n  let eventCount = 0\n  let allowNextEvent = false\n\n  return {\n    isLimitReached() {\n      if (eventCount === 0) {\n        setTimeout(() => {\n          eventCount = 0\n        }, ONE_MINUTE)\n      }\n\n      eventCount += 1\n      if (eventCount <= limit || allowNextEvent) {\n        allowNextEvent = false\n        return false\n      }\n\n      if (eventCount === limit + 1) {\n        allowNextEvent = true\n        try {\n          onLimitReached({\n            message: `Reached max number of ${eventType}s by minute: ${limit}`,\n            source: ErrorSource.AGENT,\n            startClocks: clocksNow(),\n          })\n        } finally {\n          allowNextEvent = false\n        }\n      }\n\n      return true\n    },\n  }\n}\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,SAAS;AACrC,SAASC,SAAS,QAAQ,aAAa;AACvC,SAASC,UAAU,QAAQ,SAAS;AAIpC,OAAM,SAAUC,sBAAsBA,CACpCC,SAAiB,EACjBC,KAAa,EACbC,cAA8C;EAE9C,IAAIC,UAAU,GAAG,CAAC;EAClB,IAAIC,cAAc,GAAG,KAAK;EAE1B,OAAO;IACLC,cAAc,WAAAA,CAAA;MACZ,IAAIF,UAAU,KAAK,CAAC,EAAE;QACpBG,UAAU,CAAC;UACTH,UAAU,GAAG,CAAC;QAChB,CAAC,EAAEL,UAAU,CAAC;;MAGhBK,UAAU,IAAI,CAAC;MACf,IAAIA,UAAU,IAAIF,KAAK,IAAIG,cAAc,EAAE;QACzCA,cAAc,GAAG,KAAK;QACtB,OAAO,KAAK;;MAGd,IAAID,UAAU,KAAKF,KAAK,GAAG,CAAC,EAAE;QAC5BG,cAAc,GAAG,IAAI;QACrB,IAAI;UACFF,cAAc,CAAC;YACbK,OAAO,EAAE,yBAAAC,MAAA,CAAyBR,SAAS,mBAAAQ,MAAA,CAAgBP,KAAK,CAAE;YAClEQ,MAAM,EAAEb,WAAW,CAACc,KAAK;YACzBC,WAAW,EAAEd,SAAS;WACvB,CAAC;SACH,SAAS;UACRO,cAAc,GAAG,KAAK;;;MAI1B,OAAO,IAAI;IACb;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}