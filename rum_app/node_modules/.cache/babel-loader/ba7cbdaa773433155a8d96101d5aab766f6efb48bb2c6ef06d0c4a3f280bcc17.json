{"ast":null,"code":"import { Batch, combine, createHttpRequest, isTelemetryReplicationAllowed } from '@datadog/browser-core';\nexport function startRumBatch(configuration, lifeCycle, telemetryEventObservable, reportError, pageExitObservable) {\n  var batch = makeRumBatch(configuration, reportError, pageExitObservable);\n  lifeCycle.subscribe(11 /* RUM_EVENT_COLLECTED */, function (serverRumEvent) {\n    if (serverRumEvent.type === \"view\" /* VIEW */) {\n      batch.upsert(serverRumEvent, serverRumEvent.view.id);\n    } else {\n      batch.add(serverRumEvent);\n    }\n  });\n  telemetryEventObservable.subscribe(function (event) {\n    return batch.add(event, isTelemetryReplicationAllowed(configuration));\n  });\n  return batch;\n}\nfunction makeRumBatch(configuration, reportError, pageExitObservable) {\n  var primaryBatch = createRumBatch(configuration.rumEndpointBuilder);\n  var replicaBatch;\n  var replica = configuration.replica;\n  if (replica !== undefined) {\n    replicaBatch = createRumBatch(replica.rumEndpointBuilder);\n  }\n  function createRumBatch(endpointBuilder) {\n    return new Batch(createHttpRequest(endpointBuilder, configuration.batchBytesLimit, reportError), configuration.batchMessagesLimit, configuration.batchBytesLimit, configuration.messageBytesLimit, configuration.flushTimeout, pageExitObservable);\n  }\n  function withReplicaApplicationId(message) {\n    return combine(message, {\n      application: {\n        id: replica.applicationId\n      }\n    });\n  }\n  return {\n    flushObservable: primaryBatch.flushObservable,\n    add: function (message, replicated) {\n      if (replicated === void 0) {\n        replicated = true;\n      }\n      primaryBatch.add(message);\n      if (replicaBatch && replicated) {\n        replicaBatch.add(withReplicaApplicationId(message));\n      }\n    },\n    upsert: function (message, key) {\n      primaryBatch.upsert(message, key);\n      if (replicaBatch) {\n        replicaBatch.upsert(withReplicaApplicationId(message), key);\n      }\n    }\n  };\n}","map":{"version":3,"names":["Batch","combine","createHttpRequest","isTelemetryReplicationAllowed","startRumBatch","configuration","lifeCycle","telemetryEventObservable","reportError","pageExitObservable","batch","makeRumBatch","subscribe","serverRumEvent","type","upsert","view","id","add","event","primaryBatch","createRumBatch","rumEndpointBuilder","replicaBatch","replica","undefined","endpointBuilder","batchBytesLimit","batchMessagesLimit","messageBytesLimit","flushTimeout","withReplicaApplicationId","message","application","applicationId","flushObservable","replicated","key"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-rum-core/src/transport/startRumBatch.ts"],"sourcesContent":["import type {\n  Context,\n  EndpointBuilder,\n  TelemetryEvent,\n  Observable,\n  RawError,\n  PageExitEvent,\n  BatchFlushEvent,\n} from '@datadog/browser-core'\nimport { Batch, combine, createHttpRequest, isTelemetryReplicationAllowed } from '@datadog/browser-core'\nimport type { RumConfiguration } from '../domain/configuration'\nimport type { LifeCycle } from '../domain/lifeCycle'\nimport { LifeCycleEventType } from '../domain/lifeCycle'\nimport { RumEventType } from '../rawRumEvent.types'\nimport type { RumEvent } from '../rumEvent.types'\n\nexport function startRumBatch(\n  configuration: RumConfiguration,\n  lifeCycle: LifeCycle,\n  telemetryEventObservable: Observable<TelemetryEvent & Context>,\n  reportError: (error: RawError) => void,\n  pageExitObservable: Observable<PageExitEvent>\n) {\n  const batch = makeRumBatch(configuration, reportError, pageExitObservable)\n\n  lifeCycle.subscribe(LifeCycleEventType.RUM_EVENT_COLLECTED, (serverRumEvent: RumEvent & Context) => {\n    if (serverRumEvent.type === RumEventType.VIEW) {\n      batch.upsert(serverRumEvent, serverRumEvent.view.id)\n    } else {\n      batch.add(serverRumEvent)\n    }\n  })\n\n  telemetryEventObservable.subscribe((event) => batch.add(event, isTelemetryReplicationAllowed(configuration)))\n\n  return batch\n}\n\nexport interface RumBatch {\n  flushObservable: Observable<BatchFlushEvent>\n  add: (message: Context, replicated?: boolean) => void\n  upsert: (message: Context, key: string) => void\n}\n\nfunction makeRumBatch(\n  configuration: RumConfiguration,\n  reportError: (error: RawError) => void,\n  pageExitObservable: Observable<PageExitEvent>\n): RumBatch {\n  const primaryBatch = createRumBatch(configuration.rumEndpointBuilder)\n  let replicaBatch: Batch | undefined\n  const replica = configuration.replica\n  if (replica !== undefined) {\n    replicaBatch = createRumBatch(replica.rumEndpointBuilder)\n  }\n\n  function createRumBatch(endpointBuilder: EndpointBuilder) {\n    return new Batch(\n      createHttpRequest(endpointBuilder, configuration.batchBytesLimit, reportError),\n      configuration.batchMessagesLimit,\n      configuration.batchBytesLimit,\n      configuration.messageBytesLimit,\n      configuration.flushTimeout,\n      pageExitObservable\n    )\n  }\n\n  function withReplicaApplicationId(message: Context) {\n    return combine(message, { application: { id: replica!.applicationId } })\n  }\n\n  return {\n    flushObservable: primaryBatch.flushObservable,\n    add: (message: Context, replicated = true) => {\n      primaryBatch.add(message)\n      if (replicaBatch && replicated) {\n        replicaBatch.add(withReplicaApplicationId(message))\n      }\n    },\n    upsert: (message: Context, key: string) => {\n      primaryBatch.upsert(message, key)\n      if (replicaBatch) {\n        replicaBatch.upsert(withReplicaApplicationId(message), key)\n      }\n    },\n  }\n}\n"],"mappings":"AASA,SAASA,KAAK,EAAEC,OAAO,EAAEC,iBAAiB,EAAEC,6BAA6B,QAAQ,uBAAuB;AAOxG,OAAM,SAAUC,aAAaA,CAC3BC,aAA+B,EAC/BC,SAAoB,EACpBC,wBAA8D,EAC9DC,WAAsC,EACtCC,kBAA6C;EAE7C,IAAMC,KAAK,GAAGC,YAAY,CAACN,aAAa,EAAEG,WAAW,EAAEC,kBAAkB,CAAC;EAE1EH,SAAS,CAACM,SAAS,+BAAyC,UAACC,cAAkC;IAC7F,IAAIA,cAAc,CAACC,IAAI,wBAAwB;MAC7CJ,KAAK,CAACK,MAAM,CAACF,cAAc,EAAEA,cAAc,CAACG,IAAI,CAACC,EAAE,CAAC;KACrD,MAAM;MACLP,KAAK,CAACQ,GAAG,CAACL,cAAc,CAAC;;EAE7B,CAAC,CAAC;EAEFN,wBAAwB,CAACK,SAAS,CAAC,UAACO,KAAK;IAAK,OAAAT,KAAK,CAACQ,GAAG,CAACC,KAAK,EAAEhB,6BAA6B,CAACE,aAAa,CAAC,CAAC;EAA9D,CAA8D,CAAC;EAE7G,OAAOK,KAAK;AACd;AAQA,SAASC,YAAYA,CACnBN,aAA+B,EAC/BG,WAAsC,EACtCC,kBAA6C;EAE7C,IAAMW,YAAY,GAAGC,cAAc,CAAChB,aAAa,CAACiB,kBAAkB,CAAC;EACrE,IAAIC,YAA+B;EACnC,IAAMC,OAAO,GAAGnB,aAAa,CAACmB,OAAO;EACrC,IAAIA,OAAO,KAAKC,SAAS,EAAE;IACzBF,YAAY,GAAGF,cAAc,CAACG,OAAO,CAACF,kBAAkB,CAAC;;EAG3D,SAASD,cAAcA,CAACK,eAAgC;IACtD,OAAO,IAAI1B,KAAK,CACdE,iBAAiB,CAACwB,eAAe,EAAErB,aAAa,CAACsB,eAAe,EAAEnB,WAAW,CAAC,EAC9EH,aAAa,CAACuB,kBAAkB,EAChCvB,aAAa,CAACsB,eAAe,EAC7BtB,aAAa,CAACwB,iBAAiB,EAC/BxB,aAAa,CAACyB,YAAY,EAC1BrB,kBAAkB,CACnB;EACH;EAEA,SAASsB,wBAAwBA,CAACC,OAAgB;IAChD,OAAO/B,OAAO,CAAC+B,OAAO,EAAE;MAAEC,WAAW,EAAE;QAAEhB,EAAE,EAAEO,OAAQ,CAACU;MAAa;IAAE,CAAE,CAAC;EAC1E;EAEA,OAAO;IACLC,eAAe,EAAEf,YAAY,CAACe,eAAe;IAC7CjB,GAAG,EAAE,SAAAA,CAACc,OAAgB,EAAEI,UAAiB;MAAjB,IAAAA,UAAA;QAAAA,UAAA,OAAiB;MAAA;MACvChB,YAAY,CAACF,GAAG,CAACc,OAAO,CAAC;MACzB,IAAIT,YAAY,IAAIa,UAAU,EAAE;QAC9Bb,YAAY,CAACL,GAAG,CAACa,wBAAwB,CAACC,OAAO,CAAC,CAAC;;IAEvD,CAAC;IACDjB,MAAM,EAAE,SAAAA,CAACiB,OAAgB,EAAEK,GAAW;MACpCjB,YAAY,CAACL,MAAM,CAACiB,OAAO,EAAEK,GAAG,CAAC;MACjC,IAAId,YAAY,EAAE;QAChBA,YAAY,CAACR,MAAM,CAACgB,wBAAwB,CAACC,OAAO,CAAC,EAAEK,GAAG,CAAC;;IAE/D;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}