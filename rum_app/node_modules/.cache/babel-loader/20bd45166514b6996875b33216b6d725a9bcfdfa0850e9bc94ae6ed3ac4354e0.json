{"ast":null,"code":"import { isExperimentalFeatureEnabled, willSyntheticsInjectRum, assign, BoundedBuffer, buildCookieOptions, createContextManager, deepClone, makePublicApi, monitor, clocksNow, timeStampNow, display, callMonitored, createHandlingStack, canUseEventBridge, areCookiesAuthorized, checkUser, sanitizeUser } from '@datadog/browser-core';\nimport { validateAndBuildRumConfiguration } from '../domain/configuration';\nimport { buildCommonContext } from '../domain/contexts/commonContext';\nexport function makeRumPublicApi(startRumImpl, recorderApi, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.ignoreInitIfSyntheticsWillInjectRum,\n    ignoreInitIfSyntheticsWillInjectRum = _c === void 0 ? true : _c;\n  var isAlreadyInitialized = false;\n  var globalContextManager = createContextManager();\n  var userContextManager = createContextManager();\n  var getInternalContextStrategy = function () {\n    return undefined;\n  };\n  var getInitConfigurationStrategy = function () {\n    return undefined;\n  };\n  var bufferApiCalls = new BoundedBuffer();\n  var addTimingStrategy = function (name, time) {\n    if (time === void 0) {\n      time = timeStampNow();\n    }\n    bufferApiCalls.add(function () {\n      return addTimingStrategy(name, time);\n    });\n  };\n  var startViewStrategy = function (options, startClocks) {\n    if (startClocks === void 0) {\n      startClocks = clocksNow();\n    }\n    bufferApiCalls.add(function () {\n      return startViewStrategy(options, startClocks);\n    });\n  };\n  var addActionStrategy = function (action, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = buildCommonContext(globalContextManager, userContextManager, recorderApi);\n    }\n    bufferApiCalls.add(function () {\n      return addActionStrategy(action, commonContext);\n    });\n  };\n  var addErrorStrategy = function (providedError, commonContext) {\n    if (commonContext === void 0) {\n      commonContext = buildCommonContext(globalContextManager, userContextManager, recorderApi);\n    }\n    bufferApiCalls.add(function () {\n      return addErrorStrategy(providedError, commonContext);\n    });\n  };\n  var addFeatureFlagEvaluationStrategy = function (key, value) {\n    bufferApiCalls.add(function () {\n      return addFeatureFlagEvaluationStrategy(key, value);\n    });\n  };\n  function initRum(initConfiguration) {\n    // This function should be available, regardless of initialization success.\n    getInitConfigurationStrategy = function () {\n      return deepClone(initConfiguration);\n    };\n    // If we are in a Synthetics test configured to automatically inject a RUM instance, we want to\n    // completely discard the customer application RUM instance by ignoring their init() call.  But,\n    // we should not ignore the init() call from the Synthetics-injected RUM instance, so the\n    // internal `ignoreInitIfSyntheticsWillInjectRum` option is here to bypass this condition.\n    if (ignoreInitIfSyntheticsWillInjectRum && willSyntheticsInjectRum()) {\n      return;\n    }\n    if (canUseEventBridge()) {\n      initConfiguration = overrideInitConfigurationForBridge(initConfiguration);\n    } else if (!canHandleSession(initConfiguration)) {\n      return;\n    }\n    if (!canInitRum(initConfiguration)) {\n      return;\n    }\n    var configuration = validateAndBuildRumConfiguration(initConfiguration);\n    if (!configuration) {\n      return;\n    }\n    if (isExperimentalFeatureEnabled('feature_flags')) {\n      ;\n      rumPublicApi.addFeatureFlagEvaluation = monitor(function (key, value) {\n        addFeatureFlagEvaluationStrategy(key, value);\n      });\n    }\n    if (!configuration.trackViewsManually) {\n      doStartRum(initConfiguration, configuration);\n    } else {\n      // drain beforeInitCalls by buffering them until we start RUM\n      // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls\n      // in order to ensure that calls are processed in order\n      var beforeInitCalls = bufferApiCalls;\n      bufferApiCalls = new BoundedBuffer();\n      startViewStrategy = function (options) {\n        doStartRum(initConfiguration, configuration, options);\n      };\n      beforeInitCalls.drain();\n    }\n    isAlreadyInitialized = true;\n  }\n  function doStartRum(initConfiguration, configuration, initialViewOptions) {\n    var startRumResults = startRumImpl(initConfiguration, configuration, recorderApi, globalContextManager, userContextManager, initialViewOptions);\n    startViewStrategy = startRumResults.startView, addActionStrategy = startRumResults.addAction, addErrorStrategy = startRumResults.addError, addTimingStrategy = startRumResults.addTiming, addFeatureFlagEvaluationStrategy = startRumResults.addFeatureFlagEvaluation, getInternalContextStrategy = startRumResults.getInternalContext;\n    bufferApiCalls.drain();\n    recorderApi.onRumStart(startRumResults.lifeCycle, configuration, startRumResults.session, startRumResults.viewContexts);\n  }\n  var startView = monitor(function (options) {\n    var sanitizedOptions = typeof options === 'object' ? options : {\n      name: options\n    };\n    startViewStrategy(sanitizedOptions);\n  });\n  var rumPublicApi = makePublicApi({\n    init: monitor(initRum),\n    /** @deprecated: use setGlobalContextProperty instead */\n    addRumGlobalContext: monitor(globalContextManager.add),\n    setGlobalContextProperty: monitor(globalContextManager.setContextProperty),\n    /** @deprecated: use removeGlobalContextProperty instead */\n    removeRumGlobalContext: monitor(globalContextManager.remove),\n    removeGlobalContextProperty: monitor(globalContextManager.removeContextProperty),\n    /** @deprecated: use getGlobalContext instead */\n    getRumGlobalContext: monitor(globalContextManager.get),\n    getGlobalContext: monitor(globalContextManager.getContext),\n    /** @deprecated: use setGlobalContext instead */\n    setRumGlobalContext: monitor(globalContextManager.set),\n    setGlobalContext: monitor(globalContextManager.setContext),\n    clearGlobalContext: monitor(globalContextManager.clearContext),\n    getInternalContext: monitor(function (startTime) {\n      return getInternalContextStrategy(startTime);\n    }),\n    getInitConfiguration: monitor(function () {\n      return getInitConfigurationStrategy();\n    }),\n    addAction: monitor(function (name, context) {\n      addActionStrategy({\n        name: name,\n        context: deepClone(context),\n        startClocks: clocksNow(),\n        type: \"custom\" /* CUSTOM */\n      });\n    }),\n\n    addError: function (error, context) {\n      var handlingStack = createHandlingStack();\n      callMonitored(function () {\n        addErrorStrategy({\n          error: error,\n          handlingStack: handlingStack,\n          context: deepClone(context),\n          startClocks: clocksNow()\n        });\n      });\n    },\n    addTiming: monitor(function (name, time) {\n      addTimingStrategy(name, time);\n    }),\n    setUser: monitor(function (newUser) {\n      if (checkUser(newUser)) {\n        userContextManager.setContext(sanitizeUser(newUser));\n      }\n    }),\n    getUser: monitor(userContextManager.getContext),\n    setUserProperty: monitor(function (key, property) {\n      var _a;\n      var sanitizedProperty = sanitizeUser((_a = {}, _a[key] = property, _a))[key];\n      userContextManager.setContextProperty(key, sanitizedProperty);\n    }),\n    removeUserProperty: monitor(userContextManager.removeContextProperty),\n    /** @deprecated: renamed to clearUser */\n    removeUser: monitor(userContextManager.clearContext),\n    clearUser: monitor(userContextManager.clearContext),\n    startView: startView,\n    startSessionReplayRecording: monitor(recorderApi.start),\n    stopSessionReplayRecording: monitor(recorderApi.stop)\n  });\n  return rumPublicApi;\n  function canHandleSession(initConfiguration) {\n    if (!areCookiesAuthorized(buildCookieOptions(initConfiguration))) {\n      display.warn('Cookies are not authorized, we will not send any data.');\n      return false;\n    }\n    if (isLocalFile()) {\n      display.error('Execution is not allowed in the current context.');\n      return false;\n    }\n    return true;\n  }\n  function canInitRum(initConfiguration) {\n    if (isAlreadyInitialized) {\n      if (!initConfiguration.silentMultipleInit) {\n        display.error('DD_RUM is already initialized.');\n      }\n      return false;\n    }\n    return true;\n  }\n  function overrideInitConfigurationForBridge(initConfiguration) {\n    return assign({}, initConfiguration, {\n      applicationId: '00000000-aaaa-0000-aaaa-000000000000',\n      clientToken: 'empty',\n      sessionSampleRate: 100\n    });\n  }\n  function isLocalFile() {\n    return window.location.protocol === 'file:';\n  }\n}","map":{"version":3,"names":["isExperimentalFeatureEnabled","willSyntheticsInjectRum","assign","BoundedBuffer","buildCookieOptions","createContextManager","deepClone","makePublicApi","monitor","clocksNow","timeStampNow","display","callMonitored","createHandlingStack","canUseEventBridge","areCookiesAuthorized","checkUser","sanitizeUser","validateAndBuildRumConfiguration","buildCommonContext","makeRumPublicApi","startRumImpl","recorderApi","_a","_b","_c","ignoreInitIfSyntheticsWillInjectRum","isAlreadyInitialized","globalContextManager","userContextManager","getInternalContextStrategy","undefined","getInitConfigurationStrategy","bufferApiCalls","addTimingStrategy","name","time","add","startViewStrategy","options","startClocks","addActionStrategy","action","commonContext","addErrorStrategy","providedError","addFeatureFlagEvaluationStrategy","key","value","initRum","initConfiguration","overrideInitConfigurationForBridge","canHandleSession","canInitRum","configuration","rumPublicApi","addFeatureFlagEvaluation","trackViewsManually","doStartRum","beforeInitCalls","drain","initialViewOptions","startRumResults","startView","addAction","addError","addTiming","getInternalContext","onRumStart","lifeCycle","session","viewContexts","sanitizedOptions","init","addRumGlobalContext","setGlobalContextProperty","setContextProperty","removeRumGlobalContext","remove","removeGlobalContextProperty","removeContextProperty","getRumGlobalContext","get","getGlobalContext","getContext","setRumGlobalContext","set","setGlobalContext","setContext","clearGlobalContext","clearContext","startTime","getInitConfiguration","context","type","error","handlingStack","setUser","newUser","getUser","setUserProperty","property","sanitizedProperty","removeUserProperty","removeUser","clearUser","startSessionReplayRecording","start","stopSessionReplayRecording","stop","warn","isLocalFile","silentMultipleInit","applicationId","clientToken","sessionSampleRate","window","location","protocol"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-rum-core/src/boot/rumPublicApi.ts"],"sourcesContent":["import type { Context, InitConfiguration, TimeStamp, RelativeTime, User } from '@datadog/browser-core'\nimport {\n  isExperimentalFeatureEnabled,\n  willSyntheticsInjectRum,\n  assign,\n  BoundedBuffer,\n  buildCookieOptions,\n  createContextManager,\n  deepClone,\n  makePublicApi,\n  monitor,\n  clocksNow,\n  timeStampNow,\n  display,\n  callMonitored,\n  createHandlingStack,\n  canUseEventBridge,\n  areCookiesAuthorized,\n  checkUser,\n  sanitizeUser,\n} from '@datadog/browser-core'\nimport type { LifeCycle } from '../domain/lifeCycle'\nimport type { ViewContexts } from '../domain/contexts/viewContexts'\nimport type { RumSessionManager } from '../domain/rumSessionManager'\nimport type { ReplayStats } from '../rawRumEvent.types'\nimport { ActionType } from '../rawRumEvent.types'\nimport type { RumConfiguration, RumInitConfiguration } from '../domain/configuration'\nimport { validateAndBuildRumConfiguration } from '../domain/configuration'\nimport type { ViewOptions } from '../domain/rumEventsCollection/view/trackViews'\nimport { buildCommonContext } from '../domain/contexts/commonContext'\nimport type { startRum } from './startRum'\n\nexport type RumPublicApi = ReturnType<typeof makeRumPublicApi>\n\nexport type StartRum = typeof startRum\n\ntype StartRumResult = ReturnType<typeof startRum>\n\nexport interface RecorderApi {\n  start: () => void\n  stop: () => void\n  onRumStart: (\n    lifeCycle: LifeCycle,\n    configuration: RumConfiguration,\n    sessionManager: RumSessionManager,\n    viewContexts: ViewContexts\n  ) => void\n  isRecording: () => boolean\n  getReplayStats: (viewId: string) => ReplayStats | undefined\n}\ninterface RumPublicApiOptions {\n  ignoreInitIfSyntheticsWillInjectRum?: boolean\n}\n\nexport function makeRumPublicApi(\n  startRumImpl: StartRum,\n  recorderApi: RecorderApi,\n  { ignoreInitIfSyntheticsWillInjectRum = true }: RumPublicApiOptions = {}\n) {\n  let isAlreadyInitialized = false\n\n  const globalContextManager = createContextManager()\n  const userContextManager = createContextManager()\n\n  let getInternalContextStrategy: StartRumResult['getInternalContext'] = () => undefined\n  let getInitConfigurationStrategy = (): InitConfiguration | undefined => undefined\n\n  let bufferApiCalls = new BoundedBuffer()\n  let addTimingStrategy: StartRumResult['addTiming'] = (name, time = timeStampNow()) => {\n    bufferApiCalls.add(() => addTimingStrategy(name, time))\n  }\n  let startViewStrategy: StartRumResult['startView'] = (options, startClocks = clocksNow()) => {\n    bufferApiCalls.add(() => startViewStrategy(options, startClocks))\n  }\n  let addActionStrategy: StartRumResult['addAction'] = (\n    action,\n    commonContext = buildCommonContext(globalContextManager, userContextManager, recorderApi)\n  ) => {\n    bufferApiCalls.add(() => addActionStrategy(action, commonContext))\n  }\n  let addErrorStrategy: StartRumResult['addError'] = (\n    providedError,\n    commonContext = buildCommonContext(globalContextManager, userContextManager, recorderApi)\n  ) => {\n    bufferApiCalls.add(() => addErrorStrategy(providedError, commonContext))\n  }\n\n  let addFeatureFlagEvaluationStrategy: StartRumResult['addFeatureFlagEvaluation'] = (key: string, value: any) => {\n    bufferApiCalls.add(() => addFeatureFlagEvaluationStrategy(key, value))\n  }\n\n  function initRum(initConfiguration: RumInitConfiguration) {\n    // This function should be available, regardless of initialization success.\n    getInitConfigurationStrategy = () => deepClone<InitConfiguration>(initConfiguration)\n\n    // If we are in a Synthetics test configured to automatically inject a RUM instance, we want to\n    // completely discard the customer application RUM instance by ignoring their init() call.  But,\n    // we should not ignore the init() call from the Synthetics-injected RUM instance, so the\n    // internal `ignoreInitIfSyntheticsWillInjectRum` option is here to bypass this condition.\n    if (ignoreInitIfSyntheticsWillInjectRum && willSyntheticsInjectRum()) {\n      return\n    }\n\n    if (canUseEventBridge()) {\n      initConfiguration = overrideInitConfigurationForBridge(initConfiguration)\n    } else if (!canHandleSession(initConfiguration)) {\n      return\n    }\n\n    if (!canInitRum(initConfiguration)) {\n      return\n    }\n\n    const configuration = validateAndBuildRumConfiguration(initConfiguration)\n    if (!configuration) {\n      return\n    }\n\n    if (isExperimentalFeatureEnabled('feature_flags')) {\n      ;(rumPublicApi as any).addFeatureFlagEvaluation = monitor((key: string, value: any) => {\n        addFeatureFlagEvaluationStrategy(key, value)\n      })\n    }\n\n    if (!configuration.trackViewsManually) {\n      doStartRum(initConfiguration, configuration)\n    } else {\n      // drain beforeInitCalls by buffering them until we start RUM\n      // if we get a startView, drain re-buffered calls before continuing to drain beforeInitCalls\n      // in order to ensure that calls are processed in order\n      const beforeInitCalls = bufferApiCalls\n      bufferApiCalls = new BoundedBuffer()\n\n      startViewStrategy = (options) => {\n        doStartRum(initConfiguration, configuration, options)\n      }\n      beforeInitCalls.drain()\n    }\n\n    isAlreadyInitialized = true\n  }\n\n  function doStartRum(\n    initConfiguration: RumInitConfiguration,\n    configuration: RumConfiguration,\n    initialViewOptions?: ViewOptions\n  ) {\n    const startRumResults = startRumImpl(\n      initConfiguration,\n      configuration,\n      recorderApi,\n      globalContextManager,\n      userContextManager,\n      initialViewOptions\n    )\n\n    ;({\n      startView: startViewStrategy,\n      addAction: addActionStrategy,\n      addError: addErrorStrategy,\n      addTiming: addTimingStrategy,\n      addFeatureFlagEvaluation: addFeatureFlagEvaluationStrategy,\n      getInternalContext: getInternalContextStrategy,\n    } = startRumResults)\n    bufferApiCalls.drain()\n\n    recorderApi.onRumStart(\n      startRumResults.lifeCycle,\n      configuration,\n      startRumResults.session,\n      startRumResults.viewContexts\n    )\n  }\n\n  const startView: {\n    (name?: string): void\n    (options: ViewOptions): void\n  } = monitor((options?: string | ViewOptions) => {\n    const sanitizedOptions = typeof options === 'object' ? options : { name: options }\n    startViewStrategy(sanitizedOptions)\n  })\n\n  const rumPublicApi = makePublicApi({\n    init: monitor(initRum),\n\n    /** @deprecated: use setGlobalContextProperty instead */\n    addRumGlobalContext: monitor(globalContextManager.add),\n    setGlobalContextProperty: monitor(globalContextManager.setContextProperty),\n\n    /** @deprecated: use removeGlobalContextProperty instead */\n    removeRumGlobalContext: monitor(globalContextManager.remove),\n    removeGlobalContextProperty: monitor(globalContextManager.removeContextProperty),\n\n    /** @deprecated: use getGlobalContext instead */\n    getRumGlobalContext: monitor(globalContextManager.get),\n    getGlobalContext: monitor(globalContextManager.getContext),\n\n    /** @deprecated: use setGlobalContext instead */\n    setRumGlobalContext: monitor(globalContextManager.set),\n    setGlobalContext: monitor(globalContextManager.setContext),\n\n    clearGlobalContext: monitor(globalContextManager.clearContext),\n\n    getInternalContext: monitor((startTime?: number) => getInternalContextStrategy(startTime)),\n    getInitConfiguration: monitor(() => getInitConfigurationStrategy()),\n\n    addAction: monitor((name: string, context?: object) => {\n      addActionStrategy({\n        name,\n        context: deepClone(context as Context),\n        startClocks: clocksNow(),\n        type: ActionType.CUSTOM,\n      })\n    }),\n\n    addError: (error: unknown, context?: object) => {\n      const handlingStack = createHandlingStack()\n      callMonitored(() => {\n        addErrorStrategy({\n          error,\n          handlingStack,\n          context: deepClone(context as Context),\n          startClocks: clocksNow(),\n        })\n      })\n    },\n\n    addTiming: monitor((name: string, time?: number) => {\n      addTimingStrategy(name, time as RelativeTime | TimeStamp | undefined)\n    }),\n\n    setUser: monitor((newUser: User) => {\n      if (checkUser(newUser)) {\n        userContextManager.setContext(sanitizeUser(newUser as Context))\n      }\n    }),\n\n    getUser: monitor(userContextManager.getContext),\n\n    setUserProperty: monitor((key, property) => {\n      const sanitizedProperty = sanitizeUser({ [key]: property })[key]\n      userContextManager.setContextProperty(key, sanitizedProperty)\n    }),\n\n    removeUserProperty: monitor(userContextManager.removeContextProperty),\n\n    /** @deprecated: renamed to clearUser */\n    removeUser: monitor(userContextManager.clearContext),\n    clearUser: monitor(userContextManager.clearContext),\n\n    startView,\n\n    startSessionReplayRecording: monitor(recorderApi.start),\n    stopSessionReplayRecording: monitor(recorderApi.stop),\n  })\n\n  return rumPublicApi\n\n  function canHandleSession(initConfiguration: RumInitConfiguration): boolean {\n    if (!areCookiesAuthorized(buildCookieOptions(initConfiguration))) {\n      display.warn('Cookies are not authorized, we will not send any data.')\n      return false\n    }\n\n    if (isLocalFile()) {\n      display.error('Execution is not allowed in the current context.')\n      return false\n    }\n    return true\n  }\n\n  function canInitRum(initConfiguration: RumInitConfiguration) {\n    if (isAlreadyInitialized) {\n      if (!initConfiguration.silentMultipleInit) {\n        display.error('DD_RUM is already initialized.')\n      }\n      return false\n    }\n    return true\n  }\n\n  function overrideInitConfigurationForBridge<C extends InitConfiguration>(initConfiguration: C): C {\n    return assign({}, initConfiguration, {\n      applicationId: '00000000-aaaa-0000-aaaa-000000000000',\n      clientToken: 'empty',\n      sessionSampleRate: 100,\n    })\n  }\n\n  function isLocalFile() {\n    return window.location.protocol === 'file:'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}