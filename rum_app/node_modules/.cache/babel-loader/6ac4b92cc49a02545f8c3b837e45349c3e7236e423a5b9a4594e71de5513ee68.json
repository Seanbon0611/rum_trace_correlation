{"ast":null,"code":"import { noop, requestIdleCallback } from '@datadog/browser-core';\n/**\n * Maximum duration to wait before processing mutations. If the browser is idle, mutations will be\n * processed more quickly. If the browser is busy executing small tasks (ex: rendering frames), the\n * mutations will wait MUTATION_PROCESS_MAX_DELAY milliseconds before being processed. If the\n * browser is busy executing a longer task, mutations will be processed after this task.\n */\nvar MUTATION_PROCESS_MAX_DELAY = 100;\nexport function createMutationBatch(processMutationBatch) {\n  var cancelScheduledFlush = noop;\n  var pendingMutations = [];\n  function flush() {\n    cancelScheduledFlush();\n    processMutationBatch(pendingMutations);\n    pendingMutations = [];\n  }\n  return {\n    addMutations: function (mutations) {\n      if (pendingMutations.length === 0) {\n        cancelScheduledFlush = requestIdleCallback(flush, {\n          timeout: MUTATION_PROCESS_MAX_DELAY\n        });\n      }\n      pendingMutations.push.apply(pendingMutations, mutations);\n    },\n    flush: flush,\n    stop: function () {\n      cancelScheduledFlush();\n    }\n  };\n}","map":{"version":3,"names":["noop","requestIdleCallback","MUTATION_PROCESS_MAX_DELAY","createMutationBatch","processMutationBatch","cancelScheduledFlush","pendingMutations","flush","addMutations","mutations","length","timeout","push","apply","stop"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-rum/src/domain/record/mutationBatch.ts"],"sourcesContent":["import { noop, requestIdleCallback } from '@datadog/browser-core'\nimport type { RumMutationRecord } from './mutationObserver'\n\n/**\n * Maximum duration to wait before processing mutations. If the browser is idle, mutations will be\n * processed more quickly. If the browser is busy executing small tasks (ex: rendering frames), the\n * mutations will wait MUTATION_PROCESS_MAX_DELAY milliseconds before being processed. If the\n * browser is busy executing a longer task, mutations will be processed after this task.\n */\nconst MUTATION_PROCESS_MAX_DELAY = 100\n\nexport function createMutationBatch(processMutationBatch: (mutations: RumMutationRecord[]) => void) {\n  let cancelScheduledFlush = noop\n  let pendingMutations: RumMutationRecord[] = []\n\n  function flush() {\n    cancelScheduledFlush()\n    processMutationBatch(pendingMutations)\n    pendingMutations = []\n  }\n\n  return {\n    addMutations: (mutations: RumMutationRecord[]) => {\n      if (pendingMutations.length === 0) {\n        cancelScheduledFlush = requestIdleCallback(flush, { timeout: MUTATION_PROCESS_MAX_DELAY })\n      }\n      pendingMutations.push(...mutations)\n    },\n\n    flush,\n\n    stop: () => {\n      cancelScheduledFlush()\n    },\n  }\n}\n"],"mappings":"AAAA,SAASA,IAAI,EAAEC,mBAAmB,QAAQ,uBAAuB;AAGjE;;;;;;AAMA,IAAMC,0BAA0B,GAAG,GAAG;AAEtC,OAAM,SAAUC,mBAAmBA,CAACC,oBAA8D;EAChG,IAAIC,oBAAoB,GAAGL,IAAI;EAC/B,IAAIM,gBAAgB,GAAwB,EAAE;EAE9C,SAASC,KAAKA,CAAA;IACZF,oBAAoB,EAAE;IACtBD,oBAAoB,CAACE,gBAAgB,CAAC;IACtCA,gBAAgB,GAAG,EAAE;EACvB;EAEA,OAAO;IACLE,YAAY,EAAE,SAAAA,CAACC,SAA8B;MAC3C,IAAIH,gBAAgB,CAACI,MAAM,KAAK,CAAC,EAAE;QACjCL,oBAAoB,GAAGJ,mBAAmB,CAACM,KAAK,EAAE;UAAEI,OAAO,EAAET;QAA0B,CAAE,CAAC;;MAE5FI,gBAAgB,CAACM,IAAI,CAAAC,KAAA,CAArBP,gBAAgB,EAASG,SAAS;IACpC,CAAC;IAEDF,KAAK,EAAAA,KAAA;IAELO,IAAI,EAAE,SAAAA,CAAA;MACJT,oBAAoB,EAAE;IACxB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}