{"ast":null,"code":"import { computeStackTrace } from '../domain/tracekit';\nimport { callMonitored } from './monitor';\nimport { jsonStringify, noop } from './utils';\nexport var ErrorSource = {\n  AGENT: 'agent',\n  CONSOLE: 'console',\n  CUSTOM: 'custom',\n  LOGGER: 'logger',\n  NETWORK: 'network',\n  SOURCE: 'source',\n  REPORT: 'report'\n};\nexport function computeRawError(_a) {\n  var stackTrace = _a.stackTrace,\n    originalError = _a.originalError,\n    handlingStack = _a.handlingStack,\n    startClocks = _a.startClocks,\n    nonErrorPrefix = _a.nonErrorPrefix,\n    source = _a.source,\n    handling = _a.handling;\n  if (!stackTrace || stackTrace.message === undefined && !(originalError instanceof Error)) {\n    return {\n      startClocks: startClocks,\n      source: source,\n      handling: handling,\n      originalError: originalError,\n      message: \"\".concat(nonErrorPrefix, \" \").concat(jsonStringify(originalError)),\n      stack: 'No stack, consider using an instance of Error',\n      handlingStack: handlingStack,\n      type: stackTrace && stackTrace.name\n    };\n  }\n  return {\n    startClocks: startClocks,\n    source: source,\n    handling: handling,\n    originalError: originalError,\n    message: stackTrace.message || 'Empty message',\n    stack: toStackTraceString(stackTrace),\n    handlingStack: handlingStack,\n    type: stackTrace.name,\n    causes: flattenErrorCauses(originalError, source)\n  };\n}\nexport function toStackTraceString(stack) {\n  var result = formatErrorMessage(stack);\n  stack.stack.forEach(function (frame) {\n    var func = frame.func === '?' ? '<anonymous>' : frame.func;\n    var args = frame.args && frame.args.length > 0 ? \"(\".concat(frame.args.join(', '), \")\") : '';\n    var line = frame.line ? \":\".concat(frame.line) : '';\n    var column = frame.line && frame.column ? \":\".concat(frame.column) : '';\n    result += \"\\n  at \".concat(func).concat(args, \" @ \").concat(frame.url).concat(line).concat(column);\n  });\n  return result;\n}\nexport function getFileFromStackTraceString(stack) {\n  var _a;\n  return (_a = /@ (.+)/.exec(stack)) === null || _a === void 0 ? void 0 : _a[1];\n}\nexport function formatErrorMessage(stack) {\n  return \"\".concat(stack.name || 'Error', \": \").concat(stack.message);\n}\n/**\n Creates a stacktrace without SDK internal frames.\n \n Constraints:\n - Has to be called at the utmost position of the call stack.\n - No monitored function should encapsulate it, that is why we need to use callMonitored inside it.\n */\nexport function createHandlingStack() {\n  /**\n   * Skip the two internal frames:\n   * - SDK API (console.error, ...)\n   * - this function\n   * in order to keep only the user calls\n   */\n  var internalFramesToSkip = 2;\n  var error = new Error();\n  var formattedStack;\n  // IE needs to throw the error to fill in the stack trace\n  if (!error.stack) {\n    try {\n      throw error;\n    } catch (e) {\n      noop();\n    }\n  }\n  callMonitored(function () {\n    var stackTrace = computeStackTrace(error);\n    stackTrace.stack = stackTrace.stack.slice(internalFramesToSkip);\n    formattedStack = toStackTraceString(stackTrace);\n  });\n  return formattedStack;\n}\nexport function flattenErrorCauses(error, parentSource) {\n  var currentError = error;\n  var causes = [];\n  while ((currentError === null || currentError === void 0 ? void 0 : currentError.cause) instanceof Error && causes.length < 10) {\n    var stackTrace = computeStackTrace(currentError.cause);\n    causes.push({\n      message: currentError.cause.message,\n      source: parentSource,\n      type: stackTrace === null || stackTrace === void 0 ? void 0 : stackTrace.name,\n      stack: stackTrace && toStackTraceString(stackTrace)\n    });\n    currentError = currentError.cause;\n  }\n  return causes.length ? causes : undefined;\n}","map":{"version":3,"names":["computeStackTrace","callMonitored","jsonStringify","noop","ErrorSource","AGENT","CONSOLE","CUSTOM","LOGGER","NETWORK","SOURCE","REPORT","computeRawError","_a","stackTrace","originalError","handlingStack","startClocks","nonErrorPrefix","source","handling","message","undefined","Error","concat","stack","type","name","toStackTraceString","causes","flattenErrorCauses","result","formatErrorMessage","forEach","frame","func","args","length","join","line","column","url","getFileFromStackTraceString","exec","createHandlingStack","internalFramesToSkip","error","formattedStack","e","slice","parentSource","currentError","cause","push"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-core/src/tools/error.ts"],"sourcesContent":["import type { StackTrace } from '../domain/tracekit'\nimport { computeStackTrace } from '../domain/tracekit'\nimport { callMonitored } from './monitor'\nimport type { ClocksState } from './timeUtils'\nimport { jsonStringify, noop } from './utils'\n\nexport interface ErrorWithCause extends Error {\n  cause?: Error\n}\n\nexport type RawErrorCause = {\n  message: string\n  source: string\n  type?: string\n  stack?: string\n}\n\nexport interface RawError {\n  startClocks: ClocksState\n  message: string\n  type?: string\n  stack?: string\n  source: ErrorSource\n  originalError?: unknown\n  handling?: ErrorHandling\n  handlingStack?: string\n  causes?: RawErrorCause[]\n}\n\nexport const ErrorSource = {\n  AGENT: 'agent',\n  CONSOLE: 'console',\n  CUSTOM: 'custom',\n  LOGGER: 'logger',\n  NETWORK: 'network',\n  SOURCE: 'source',\n  REPORT: 'report',\n} as const\n\nexport const enum ErrorHandling {\n  HANDLED = 'handled',\n  UNHANDLED = 'unhandled',\n}\n\nexport type ErrorSource = typeof ErrorSource[keyof typeof ErrorSource]\n\ntype RawErrorParams = {\n  stackTrace?: StackTrace\n  originalError: unknown\n\n  handlingStack?: string\n  startClocks: ClocksState\n  nonErrorPrefix: string\n  source: ErrorSource\n  handling: ErrorHandling\n}\n\nexport function computeRawError({\n  stackTrace,\n  originalError,\n  handlingStack,\n  startClocks,\n  nonErrorPrefix,\n  source,\n  handling,\n}: RawErrorParams): RawError {\n  if (!stackTrace || (stackTrace.message === undefined && !(originalError instanceof Error))) {\n    return {\n      startClocks,\n      source,\n      handling,\n      originalError,\n      message: `${nonErrorPrefix} ${jsonStringify(originalError)!}`,\n      stack: 'No stack, consider using an instance of Error',\n      handlingStack,\n      type: stackTrace && stackTrace.name,\n    }\n  }\n\n  return {\n    startClocks,\n    source,\n    handling,\n    originalError,\n    message: stackTrace.message || 'Empty message',\n    stack: toStackTraceString(stackTrace),\n    handlingStack,\n    type: stackTrace.name,\n    causes: flattenErrorCauses(originalError as ErrorWithCause, source),\n  }\n}\n\nexport function toStackTraceString(stack: StackTrace) {\n  let result = formatErrorMessage(stack)\n  stack.stack.forEach((frame) => {\n    const func = frame.func === '?' ? '<anonymous>' : frame.func\n    const args = frame.args && frame.args.length > 0 ? `(${frame.args.join(', ')})` : ''\n    const line = frame.line ? `:${frame.line}` : ''\n    const column = frame.line && frame.column ? `:${frame.column}` : ''\n    result += `\\n  at ${func!}${args} @ ${frame.url!}${line}${column}`\n  })\n  return result\n}\n\nexport function getFileFromStackTraceString(stack: string) {\n  return /@ (.+)/.exec(stack)?.[1]\n}\n\nexport function formatErrorMessage(stack: StackTrace) {\n  return `${stack.name || 'Error'}: ${stack.message!}`\n}\n\n/**\n Creates a stacktrace without SDK internal frames.\n \n Constraints:\n - Has to be called at the utmost position of the call stack.\n - No monitored function should encapsulate it, that is why we need to use callMonitored inside it.\n */\nexport function createHandlingStack(): string {\n  /**\n   * Skip the two internal frames:\n   * - SDK API (console.error, ...)\n   * - this function\n   * in order to keep only the user calls\n   */\n  const internalFramesToSkip = 2\n  const error = new Error()\n  let formattedStack: string\n\n  // IE needs to throw the error to fill in the stack trace\n  if (!error.stack) {\n    try {\n      throw error\n    } catch (e) {\n      noop()\n    }\n  }\n\n  callMonitored(() => {\n    const stackTrace = computeStackTrace(error)\n    stackTrace.stack = stackTrace.stack.slice(internalFramesToSkip)\n    formattedStack = toStackTraceString(stackTrace)\n  })\n\n  return formattedStack!\n}\n\nexport function flattenErrorCauses(error: ErrorWithCause, parentSource: ErrorSource): RawErrorCause[] | undefined {\n  let currentError = error\n  const causes: RawErrorCause[] = []\n  while (currentError?.cause instanceof Error && causes.length < 10) {\n    const stackTrace = computeStackTrace(currentError.cause)\n    causes.push({\n      message: currentError.cause.message,\n      source: parentSource,\n      type: stackTrace?.name,\n      stack: stackTrace && toStackTraceString(stackTrace),\n    })\n    currentError = currentError.cause\n  }\n  return causes.length ? causes : undefined\n}\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,oBAAoB;AACtD,SAASC,aAAa,QAAQ,WAAW;AAEzC,SAASC,aAAa,EAAEC,IAAI,QAAQ,SAAS;AAyB7C,OAAO,IAAMC,WAAW,GAAG;EACzBC,KAAK,EAAE,OAAO;EACdC,OAAO,EAAE,SAAS;EAClBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,OAAO,EAAE,SAAS;EAClBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE;CACA;AAoBV,OAAM,SAAUC,eAAeA,CAACC,EAQf;MAPfC,UAAU,GAAAD,EAAA,CAAAC,UAAA;IACVC,aAAa,GAAAF,EAAA,CAAAE,aAAA;IACbC,aAAa,GAAAH,EAAA,CAAAG,aAAA;IACbC,WAAW,GAAAJ,EAAA,CAAAI,WAAA;IACXC,cAAc,GAAAL,EAAA,CAAAK,cAAA;IACdC,MAAM,GAAAN,EAAA,CAAAM,MAAA;IACNC,QAAQ,GAAAP,EAAA,CAAAO,QAAA;EAER,IAAI,CAACN,UAAU,IAAKA,UAAU,CAACO,OAAO,KAAKC,SAAS,IAAI,EAAEP,aAAa,YAAYQ,KAAK,CAAE,EAAE;IAC1F,OAAO;MACLN,WAAW,EAAAA,WAAA;MACXE,MAAM,EAAAA,MAAA;MACNC,QAAQ,EAAAA,QAAA;MACRL,aAAa,EAAAA,aAAA;MACbM,OAAO,EAAE,GAAAG,MAAA,CAAGN,cAAc,OAAAM,MAAA,CAAItB,aAAa,CAACa,aAAa,CAAE,CAAE;MAC7DU,KAAK,EAAE,+CAA+C;MACtDT,aAAa,EAAAA,aAAA;MACbU,IAAI,EAAEZ,UAAU,IAAIA,UAAU,CAACa;KAChC;;EAGH,OAAO;IACLV,WAAW,EAAAA,WAAA;IACXE,MAAM,EAAAA,MAAA;IACNC,QAAQ,EAAAA,QAAA;IACRL,aAAa,EAAAA,aAAA;IACbM,OAAO,EAAEP,UAAU,CAACO,OAAO,IAAI,eAAe;IAC9CI,KAAK,EAAEG,kBAAkB,CAACd,UAAU,CAAC;IACrCE,aAAa,EAAAA,aAAA;IACbU,IAAI,EAAEZ,UAAU,CAACa,IAAI;IACrBE,MAAM,EAAEC,kBAAkB,CAACf,aAA+B,EAAEI,MAAM;GACnE;AACH;AAEA,OAAM,SAAUS,kBAAkBA,CAACH,KAAiB;EAClD,IAAIM,MAAM,GAAGC,kBAAkB,CAACP,KAAK,CAAC;EACtCA,KAAK,CAACA,KAAK,CAACQ,OAAO,CAAC,UAACC,KAAK;IACxB,IAAMC,IAAI,GAAGD,KAAK,CAACC,IAAI,KAAK,GAAG,GAAG,aAAa,GAAGD,KAAK,CAACC,IAAI;IAC5D,IAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI,IAAIF,KAAK,CAACE,IAAI,CAACC,MAAM,GAAG,CAAC,GAAG,IAAAb,MAAA,CAAIU,KAAK,CAACE,IAAI,CAACE,IAAI,CAAC,IAAI,CAAC,MAAG,GAAG,EAAE;IACpF,IAAMC,IAAI,GAAGL,KAAK,CAACK,IAAI,GAAG,IAAAf,MAAA,CAAIU,KAAK,CAACK,IAAI,CAAE,GAAG,EAAE;IAC/C,IAAMC,MAAM,GAAGN,KAAK,CAACK,IAAI,IAAIL,KAAK,CAACM,MAAM,GAAG,IAAAhB,MAAA,CAAIU,KAAK,CAACM,MAAM,CAAE,GAAG,EAAE;IACnET,MAAM,IAAI,UAAAP,MAAA,CAAUW,IAAK,EAAAX,MAAA,CAAGY,IAAI,SAAAZ,MAAA,CAAMU,KAAK,CAACO,GAAI,EAAAjB,MAAA,CAAGe,IAAI,EAAAf,MAAA,CAAGgB,MAAM,CAAE;EACpE,CAAC,CAAC;EACF,OAAOT,MAAM;AACf;AAEA,OAAM,SAAUW,2BAA2BA,CAACjB,KAAa;;EACvD,OAAO,CAAAZ,EAAA,WAAQ,CAAC8B,IAAI,CAAClB,KAAK,CAAC,cAAAZ,EAAA,uBAAAA,EAAA,CAAG,CAAC,CAAC;AAClC;AAEA,OAAM,SAAUmB,kBAAkBA,CAACP,KAAiB;EAClD,OAAO,GAAAD,MAAA,CAAGC,KAAK,CAACE,IAAI,IAAI,OAAO,QAAAH,MAAA,CAAKC,KAAK,CAACJ,OAAQ,CAAE;AACtD;AAEA;;;;;;;AAOA,OAAM,SAAUuB,mBAAmBA,CAAA;EACjC;;;;;;EAMA,IAAMC,oBAAoB,GAAG,CAAC;EAC9B,IAAMC,KAAK,GAAG,IAAIvB,KAAK,EAAE;EACzB,IAAIwB,cAAsB;EAE1B;EACA,IAAI,CAACD,KAAK,CAACrB,KAAK,EAAE;IAChB,IAAI;MACF,MAAMqB,KAAK;KACZ,CAAC,OAAOE,CAAC,EAAE;MACV7C,IAAI,EAAE;;;EAIVF,aAAa,CAAC;IACZ,IAAMa,UAAU,GAAGd,iBAAiB,CAAC8C,KAAK,CAAC;IAC3ChC,UAAU,CAACW,KAAK,GAAGX,UAAU,CAACW,KAAK,CAACwB,KAAK,CAACJ,oBAAoB,CAAC;IAC/DE,cAAc,GAAGnB,kBAAkB,CAACd,UAAU,CAAC;EACjD,CAAC,CAAC;EAEF,OAAOiC,cAAe;AACxB;AAEA,OAAM,SAAUjB,kBAAkBA,CAACgB,KAAqB,EAAEI,YAAyB;EACjF,IAAIC,YAAY,GAAGL,KAAK;EACxB,IAAMjB,MAAM,GAAoB,EAAE;EAClC,OAAO,CAAAsB,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEC,KAAK,aAAY7B,KAAK,IAAIM,MAAM,CAACQ,MAAM,GAAG,EAAE,EAAE;IACjE,IAAMvB,UAAU,GAAGd,iBAAiB,CAACmD,YAAY,CAACC,KAAK,CAAC;IACxDvB,MAAM,CAACwB,IAAI,CAAC;MACVhC,OAAO,EAAE8B,YAAY,CAACC,KAAK,CAAC/B,OAAO;MACnCF,MAAM,EAAE+B,YAAY;MACpBxB,IAAI,EAAEZ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEa,IAAI;MACtBF,KAAK,EAAEX,UAAU,IAAIc,kBAAkB,CAACd,UAAU;KACnD,CAAC;IACFqC,YAAY,GAAGA,YAAY,CAACC,KAAK;;EAEnC,OAAOvB,MAAM,CAACQ,MAAM,GAAGR,MAAM,GAAGP,SAAS;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}