{"ast":null,"code":"import { isNumber, ONE_YEAR, round } from './utils';\nexport function relativeToClocks(relative) {\n  return {\n    relative: relative,\n    timeStamp: getCorrectedTimeStamp(relative)\n  };\n}\nfunction getCorrectedTimeStamp(relativeTime) {\n  var correctedOrigin = dateNow() - performance.now();\n  // apply correction only for positive drift\n  if (correctedOrigin > getNavigationStart()) {\n    return Math.round(addDuration(correctedOrigin, relativeTime));\n  }\n  return getTimeStamp(relativeTime);\n}\nexport function currentDrift() {\n  return Math.round(dateNow() - addDuration(getNavigationStart(), performance.now()));\n}\nexport function toServerDuration(duration) {\n  if (!isNumber(duration)) {\n    return duration;\n  }\n  return round(duration * 1e6, 0);\n}\nexport function dateNow() {\n  // Do not use `Date.now` because sometimes websites are wrongly \"polyfilling\" it. For example, we\n  // had some users using a very old version of `datejs`, which patched `Date.now` to return a Date\n  // instance instead of a timestamp[1]. Those users are unlikely to fix this, so let's handle this\n  // case ourselves.\n  // [1]: https://github.com/datejs/Datejs/blob/97f5c7c58c5bc5accdab8aa7602b6ac56462d778/src/core-debug.js#L14-L16\n  return new Date().getTime();\n}\nexport function timeStampNow() {\n  return dateNow();\n}\nexport function relativeNow() {\n  return performance.now();\n}\nexport function clocksNow() {\n  return {\n    relative: relativeNow(),\n    timeStamp: timeStampNow()\n  };\n}\nexport function clocksOrigin() {\n  return {\n    relative: 0,\n    timeStamp: getNavigationStart()\n  };\n}\nexport function elapsed(start, end) {\n  return end - start;\n}\nexport function addDuration(a, b) {\n  return a + b;\n}\n/**\n * Get the time since the navigation was started.\n *\n * Note: this does not use `performance.timeOrigin` because it doesn't seem to reflect the actual\n * time on which the navigation has started: it may be much farther in the past, at least in Firefox 71.\n * Related issue in Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1429926\n */\nexport function getRelativeTime(timestamp) {\n  return timestamp - getNavigationStart();\n}\nexport function getTimeStamp(relativeTime) {\n  return Math.round(addDuration(getNavigationStart(), relativeTime));\n}\nexport function looksLikeRelativeTime(time) {\n  return time < ONE_YEAR;\n}\n/**\n * Navigation start slightly change on some rare cases\n */\nvar navigationStart;\nfunction getNavigationStart() {\n  if (navigationStart === undefined) {\n    navigationStart = performance.timing.navigationStart;\n  }\n  return navigationStart;\n}\nexport function resetNavigationStart() {\n  navigationStart = undefined;\n}","map":{"version":3,"names":["isNumber","ONE_YEAR","round","relativeToClocks","relative","timeStamp","getCorrectedTimeStamp","relativeTime","correctedOrigin","dateNow","performance","now","getNavigationStart","Math","addDuration","getTimeStamp","currentDrift","toServerDuration","duration","Date","getTime","timeStampNow","relativeNow","clocksNow","clocksOrigin","elapsed","start","end","a","b","getRelativeTime","timestamp","looksLikeRelativeTime","time","navigationStart","undefined","timing","resetNavigationStart"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-core/src/tools/timeUtils.ts"],"sourcesContent":["import { isNumber, ONE_YEAR, round } from './utils'\n\nexport type Duration = number & { d: 'Duration in ms' }\nexport type ServerDuration = number & { s: 'Duration in ns' }\nexport type TimeStamp = number & { t: 'Epoch time' }\nexport type RelativeTime = number & { r: 'Time relative to navigation start' } & { d: 'Duration in ms' }\nexport type ClocksState = { relative: RelativeTime; timeStamp: TimeStamp }\n\nexport function relativeToClocks(relative: RelativeTime) {\n  return { relative, timeStamp: getCorrectedTimeStamp(relative) }\n}\n\nfunction getCorrectedTimeStamp(relativeTime: RelativeTime) {\n  const correctedOrigin = (dateNow() - performance.now()) as TimeStamp\n  // apply correction only for positive drift\n  if (correctedOrigin > getNavigationStart()) {\n    return Math.round(addDuration(correctedOrigin, relativeTime)) as TimeStamp\n  }\n  return getTimeStamp(relativeTime)\n}\n\nexport function currentDrift() {\n  return Math.round(dateNow() - addDuration(getNavigationStart(), performance.now() as Duration))\n}\n\nexport function toServerDuration(duration: Duration): ServerDuration\nexport function toServerDuration(duration: Duration | undefined): ServerDuration | undefined\nexport function toServerDuration(duration: Duration | undefined) {\n  if (!isNumber(duration)) {\n    return duration\n  }\n  return round(duration * 1e6, 0) as ServerDuration\n}\n\nexport function dateNow() {\n  // Do not use `Date.now` because sometimes websites are wrongly \"polyfilling\" it. For example, we\n  // had some users using a very old version of `datejs`, which patched `Date.now` to return a Date\n  // instance instead of a timestamp[1]. Those users are unlikely to fix this, so let's handle this\n  // case ourselves.\n  // [1]: https://github.com/datejs/Datejs/blob/97f5c7c58c5bc5accdab8aa7602b6ac56462d778/src/core-debug.js#L14-L16\n  return new Date().getTime()\n}\n\nexport function timeStampNow() {\n  return dateNow() as TimeStamp\n}\n\nexport function relativeNow() {\n  return performance.now() as RelativeTime\n}\n\nexport function clocksNow() {\n  return { relative: relativeNow(), timeStamp: timeStampNow() }\n}\n\nexport function clocksOrigin() {\n  return { relative: 0 as RelativeTime, timeStamp: getNavigationStart() }\n}\n\nexport function elapsed(start: TimeStamp, end: TimeStamp): Duration\nexport function elapsed(start: RelativeTime, end: RelativeTime): Duration\nexport function elapsed(start: number, end: number) {\n  return (end - start) as Duration\n}\n\nexport function addDuration(a: TimeStamp, b: Duration): TimeStamp\nexport function addDuration(a: RelativeTime, b: Duration): RelativeTime\nexport function addDuration(a: Duration, b: Duration): Duration\nexport function addDuration(a: number, b: number) {\n  return a + b\n}\n\n/**\n * Get the time since the navigation was started.\n *\n * Note: this does not use `performance.timeOrigin` because it doesn't seem to reflect the actual\n * time on which the navigation has started: it may be much farther in the past, at least in Firefox 71.\n * Related issue in Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=1429926\n */\nexport function getRelativeTime(timestamp: TimeStamp) {\n  return (timestamp - getNavigationStart()) as RelativeTime\n}\n\nexport function getTimeStamp(relativeTime: RelativeTime) {\n  return Math.round(addDuration(getNavigationStart(), relativeTime)) as TimeStamp\n}\n\nexport function looksLikeRelativeTime(time: RelativeTime | TimeStamp): time is RelativeTime {\n  return time < ONE_YEAR\n}\n\n/**\n * Navigation start slightly change on some rare cases\n */\nlet navigationStart: TimeStamp | undefined\n\nfunction getNavigationStart() {\n  if (navigationStart === undefined) {\n    navigationStart = performance.timing.navigationStart as TimeStamp\n  }\n  return navigationStart\n}\n\nexport function resetNavigationStart() {\n  navigationStart = undefined\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,SAAS;AAQnD,OAAM,SAAUC,gBAAgBA,CAACC,QAAsB;EACrD,OAAO;IAAEA,QAAQ,EAAAA,QAAA;IAAEC,SAAS,EAAEC,qBAAqB,CAACF,QAAQ;EAAC,CAAE;AACjE;AAEA,SAASE,qBAAqBA,CAACC,YAA0B;EACvD,IAAMC,eAAe,GAAIC,OAAO,EAAE,GAAGC,WAAW,CAACC,GAAG,EAAgB;EACpE;EACA,IAAIH,eAAe,GAAGI,kBAAkB,EAAE,EAAE;IAC1C,OAAOC,IAAI,CAACX,KAAK,CAACY,WAAW,CAACN,eAAe,EAAED,YAAY,CAAC,CAAc;;EAE5E,OAAOQ,YAAY,CAACR,YAAY,CAAC;AACnC;AAEA,OAAM,SAAUS,YAAYA,CAAA;EAC1B,OAAOH,IAAI,CAACX,KAAK,CAACO,OAAO,EAAE,GAAGK,WAAW,CAACF,kBAAkB,EAAE,EAAEF,WAAW,CAACC,GAAG,EAAc,CAAC,CAAC;AACjG;AAIA,OAAM,SAAUM,gBAAgBA,CAACC,QAA8B;EAC7D,IAAI,CAAClB,QAAQ,CAACkB,QAAQ,CAAC,EAAE;IACvB,OAAOA,QAAQ;;EAEjB,OAAOhB,KAAK,CAACgB,QAAQ,GAAG,GAAG,EAAE,CAAC,CAAmB;AACnD;AAEA,OAAM,SAAUT,OAAOA,CAAA;EACrB;EACA;EACA;EACA;EACA;EACA,OAAO,IAAIU,IAAI,EAAE,CAACC,OAAO,EAAE;AAC7B;AAEA,OAAM,SAAUC,YAAYA,CAAA;EAC1B,OAAOZ,OAAO,EAAe;AAC/B;AAEA,OAAM,SAAUa,WAAWA,CAAA;EACzB,OAAOZ,WAAW,CAACC,GAAG,EAAkB;AAC1C;AAEA,OAAM,SAAUY,SAASA,CAAA;EACvB,OAAO;IAAEnB,QAAQ,EAAEkB,WAAW,EAAE;IAAEjB,SAAS,EAAEgB,YAAY;EAAE,CAAE;AAC/D;AAEA,OAAM,SAAUG,YAAYA,CAAA;EAC1B,OAAO;IAAEpB,QAAQ,EAAE,CAAiB;IAAEC,SAAS,EAAEO,kBAAkB;EAAE,CAAE;AACzE;AAIA,OAAM,SAAUa,OAAOA,CAACC,KAAa,EAAEC,GAAW;EAChD,OAAQA,GAAG,GAAGD,KAAK;AACrB;AAKA,OAAM,SAAUZ,WAAWA,CAACc,CAAS,EAAEC,CAAS;EAC9C,OAAOD,CAAC,GAAGC,CAAC;AACd;AAEA;;;;;;;AAOA,OAAM,SAAUC,eAAeA,CAACC,SAAoB;EAClD,OAAQA,SAAS,GAAGnB,kBAAkB,EAAE;AAC1C;AAEA,OAAM,SAAUG,YAAYA,CAACR,YAA0B;EACrD,OAAOM,IAAI,CAACX,KAAK,CAACY,WAAW,CAACF,kBAAkB,EAAE,EAAEL,YAAY,CAAC,CAAc;AACjF;AAEA,OAAM,SAAUyB,qBAAqBA,CAACC,IAA8B;EAClE,OAAOA,IAAI,GAAGhC,QAAQ;AACxB;AAEA;;;AAGA,IAAIiC,eAAsC;AAE1C,SAAStB,kBAAkBA,CAAA;EACzB,IAAIsB,eAAe,KAAKC,SAAS,EAAE;IACjCD,eAAe,GAAGxB,WAAW,CAAC0B,MAAM,CAACF,eAA4B;;EAEnE,OAAOA,eAAe;AACxB;AAEA,OAAM,SAAUG,oBAAoBA,CAAA;EAClCH,eAAe,GAAGC,SAAS;AAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}