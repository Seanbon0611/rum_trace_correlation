{"ast":null,"code":"import { isEmptyObject, includes, performDraw, ONE_SECOND, addTelemetryDebug, monitor } from '@datadog/browser-core';\nexport var MEASURES_PERIOD_DURATION = 10 * ONE_SECOND;\nvar currentPeriodMeasures;\nvar currentBatchMeasures;\nvar batchHasRumEvent;\nexport function startCustomerDataTelemetry(configuration, telemetry, lifeCycle, globalContextManager, userContextManager, featureFlagContexts, batchFlushObservable) {\n  var customerDataTelemetryEnabled = telemetry.enabled && performDraw(configuration.customerDataTelemetrySampleRate);\n  if (!customerDataTelemetryEnabled) {\n    return;\n  }\n  initCurrentPeriodMeasures();\n  initCurrentBatchMeasures();\n  // We measure the data of every view updates even if there could only be one per batch due to the upsert\n  // It means that contexts bytes count sums can be higher than it really is\n  lifeCycle.subscribe(11 /* RUM_EVENT_COLLECTED */, function (event) {\n    batchHasRumEvent = true;\n    updateMeasure(currentBatchMeasures.globalContextBytes, !isEmptyObject(globalContextManager.get()) ? globalContextManager.getBytesCount() : 0);\n    updateMeasure(currentBatchMeasures.userContextBytes, !isEmptyObject(userContextManager.get()) ? userContextManager.getBytesCount() : 0);\n    var featureFlagContext = featureFlagContexts.findFeatureFlagEvaluations();\n    var hasFeatureFlagContext = includes([\"view\" /* VIEW */, \"error\" /* ERROR */], event.type) && featureFlagContext && !isEmptyObject(featureFlagContext);\n    updateMeasure(currentBatchMeasures.featureFlagBytes, hasFeatureFlagContext ? featureFlagContexts.getFeatureFlagBytesCount() : 0);\n  });\n  batchFlushObservable.subscribe(function (_a) {\n    var bufferBytesCount = _a.bufferBytesCount,\n      bufferMessagesCount = _a.bufferMessagesCount;\n    // Don't measure batch that only contains telemetry events to avoid batch sending loop\n    // It could happen because after each batch we are adding a customer data measures telemetry event to the next one\n    if (!batchHasRumEvent) {\n      return;\n    }\n    currentPeriodMeasures.batchCount += 1;\n    updateMeasure(currentPeriodMeasures.batchBytesCount, bufferBytesCount);\n    updateMeasure(currentPeriodMeasures.batchMessagesCount, bufferMessagesCount);\n    mergeMeasure(currentPeriodMeasures.globalContextBytes, currentBatchMeasures.globalContextBytes);\n    mergeMeasure(currentPeriodMeasures.userContextBytes, currentBatchMeasures.userContextBytes);\n    mergeMeasure(currentPeriodMeasures.featureFlagBytes, currentBatchMeasures.featureFlagBytes);\n    initCurrentBatchMeasures();\n  });\n  setInterval(monitor(sendCurrentPeriodMeasures), MEASURES_PERIOD_DURATION);\n}\nfunction sendCurrentPeriodMeasures() {\n  if (currentPeriodMeasures.batchCount === 0) {\n    return;\n  }\n  addTelemetryDebug('Customer data measures', currentPeriodMeasures);\n  initCurrentPeriodMeasures();\n}\nfunction createMeasure() {\n  return {\n    min: Infinity,\n    max: 0,\n    sum: 0\n  };\n}\nfunction updateMeasure(measure, value) {\n  measure.sum += value;\n  measure.min = Math.min(measure.min, value);\n  measure.max = Math.max(measure.max, value);\n}\nfunction mergeMeasure(target, source) {\n  target.sum += source.sum;\n  target.min = Math.min(target.min, source.min);\n  target.max = Math.max(target.max, source.max);\n}\nfunction initCurrentPeriodMeasures() {\n  currentPeriodMeasures = {\n    batchCount: 0,\n    batchBytesCount: createMeasure(),\n    batchMessagesCount: createMeasure(),\n    globalContextBytes: createMeasure(),\n    userContextBytes: createMeasure(),\n    featureFlagBytes: createMeasure()\n  };\n}\nfunction initCurrentBatchMeasures() {\n  batchHasRumEvent = false;\n  currentBatchMeasures = {\n    globalContextBytes: createMeasure(),\n    userContextBytes: createMeasure(),\n    featureFlagBytes: createMeasure()\n  };\n}","map":{"version":3,"names":["isEmptyObject","includes","performDraw","ONE_SECOND","addTelemetryDebug","monitor","MEASURES_PERIOD_DURATION","currentPeriodMeasures","currentBatchMeasures","batchHasRumEvent","startCustomerDataTelemetry","configuration","telemetry","lifeCycle","globalContextManager","userContextManager","featureFlagContexts","batchFlushObservable","customerDataTelemetryEnabled","enabled","customerDataTelemetrySampleRate","initCurrentPeriodMeasures","initCurrentBatchMeasures","subscribe","event","updateMeasure","globalContextBytes","get","getBytesCount","userContextBytes","featureFlagContext","findFeatureFlagEvaluations","hasFeatureFlagContext","type","featureFlagBytes","getFeatureFlagBytesCount","_a","bufferBytesCount","bufferMessagesCount","batchCount","batchBytesCount","batchMessagesCount","mergeMeasure","setInterval","sendCurrentPeriodMeasures","createMeasure","min","Infinity","max","sum","measure","value","Math","target","source"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-rum-core/src/domain/startCustomerDataTelemetry.ts"],"sourcesContent":["import type { BatchFlushEvent, Context, ContextManager, Observable, Telemetry } from '@datadog/browser-core'\nimport { isEmptyObject, includes, performDraw, ONE_SECOND, addTelemetryDebug, monitor } from '@datadog/browser-core'\nimport { RumEventType } from '../rawRumEvent.types'\nimport type { RumEvent } from '../rumEvent.types'\nimport type { RumConfiguration } from './configuration'\nimport type { FeatureFlagContexts } from './contexts/featureFlagContext'\nimport type { LifeCycle } from './lifeCycle'\nimport { LifeCycleEventType } from './lifeCycle'\n\nexport const MEASURES_PERIOD_DURATION = 10 * ONE_SECOND\n\ntype Measure = {\n  min: number\n  max: number\n  sum: number\n}\n\ntype CurrentPeriodMeasures = {\n  batchCount: number\n  batchBytesCount: Measure\n  batchMessagesCount: Measure\n  globalContextBytes: Measure\n  userContextBytes: Measure\n  featureFlagBytes: Measure\n}\n\ntype CurrentBatchMeasures = {\n  globalContextBytes: Measure\n  userContextBytes: Measure\n  featureFlagBytes: Measure\n}\n\nlet currentPeriodMeasures: CurrentPeriodMeasures\nlet currentBatchMeasures: CurrentBatchMeasures\nlet batchHasRumEvent: boolean\n\nexport function startCustomerDataTelemetry(\n  configuration: RumConfiguration,\n  telemetry: Telemetry,\n  lifeCycle: LifeCycle,\n  globalContextManager: ContextManager,\n  userContextManager: ContextManager,\n  featureFlagContexts: FeatureFlagContexts,\n  batchFlushObservable: Observable<BatchFlushEvent>\n) {\n  const customerDataTelemetryEnabled = telemetry.enabled && performDraw(configuration.customerDataTelemetrySampleRate)\n  if (!customerDataTelemetryEnabled) {\n    return\n  }\n\n  initCurrentPeriodMeasures()\n  initCurrentBatchMeasures()\n\n  // We measure the data of every view updates even if there could only be one per batch due to the upsert\n  // It means that contexts bytes count sums can be higher than it really is\n  lifeCycle.subscribe(LifeCycleEventType.RUM_EVENT_COLLECTED, (event: RumEvent & Context) => {\n    batchHasRumEvent = true\n    updateMeasure(\n      currentBatchMeasures.globalContextBytes,\n      !isEmptyObject(globalContextManager.get()) ? globalContextManager.getBytesCount() : 0\n    )\n\n    updateMeasure(\n      currentBatchMeasures.userContextBytes,\n      !isEmptyObject(userContextManager.get()) ? userContextManager.getBytesCount() : 0\n    )\n\n    const featureFlagContext = featureFlagContexts.findFeatureFlagEvaluations()\n    const hasFeatureFlagContext =\n      includes([RumEventType.VIEW, RumEventType.ERROR], event.type) &&\n      featureFlagContext &&\n      !isEmptyObject(featureFlagContext)\n    updateMeasure(\n      currentBatchMeasures.featureFlagBytes,\n      hasFeatureFlagContext ? featureFlagContexts.getFeatureFlagBytesCount() : 0\n    )\n  })\n\n  batchFlushObservable.subscribe(({ bufferBytesCount, bufferMessagesCount }) => {\n    // Don't measure batch that only contains telemetry events to avoid batch sending loop\n    // It could happen because after each batch we are adding a customer data measures telemetry event to the next one\n    if (!batchHasRumEvent) {\n      return\n    }\n    currentPeriodMeasures.batchCount += 1\n    updateMeasure(currentPeriodMeasures.batchBytesCount, bufferBytesCount)\n    updateMeasure(currentPeriodMeasures.batchMessagesCount, bufferMessagesCount)\n    mergeMeasure(currentPeriodMeasures.globalContextBytes, currentBatchMeasures.globalContextBytes)\n    mergeMeasure(currentPeriodMeasures.userContextBytes, currentBatchMeasures.userContextBytes)\n    mergeMeasure(currentPeriodMeasures.featureFlagBytes, currentBatchMeasures.featureFlagBytes)\n    initCurrentBatchMeasures()\n  })\n\n  setInterval(monitor(sendCurrentPeriodMeasures), MEASURES_PERIOD_DURATION)\n}\n\nfunction sendCurrentPeriodMeasures() {\n  if (currentPeriodMeasures.batchCount === 0) {\n    return\n  }\n\n  addTelemetryDebug('Customer data measures', currentPeriodMeasures)\n  initCurrentPeriodMeasures()\n}\n\nfunction createMeasure(): Measure {\n  return { min: Infinity, max: 0, sum: 0 }\n}\n\nfunction updateMeasure(measure: Measure, value: number) {\n  measure.sum += value\n  measure.min = Math.min(measure.min, value)\n  measure.max = Math.max(measure.max, value)\n}\n\nfunction mergeMeasure(target: Measure, source: Measure) {\n  target.sum += source.sum\n  target.min = Math.min(target.min, source.min)\n  target.max = Math.max(target.max, source.max)\n}\n\nfunction initCurrentPeriodMeasures() {\n  currentPeriodMeasures = {\n    batchCount: 0,\n    batchBytesCount: createMeasure(),\n    batchMessagesCount: createMeasure(),\n    globalContextBytes: createMeasure(),\n    userContextBytes: createMeasure(),\n    featureFlagBytes: createMeasure(),\n  }\n}\n\nfunction initCurrentBatchMeasures() {\n  batchHasRumEvent = false\n  currentBatchMeasures = {\n    globalContextBytes: createMeasure(),\n    userContextBytes: createMeasure(),\n    featureFlagBytes: createMeasure(),\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}