{"ast":null,"code":"import { arrayFrom, getOrigin, isMatchOption, serializeConfiguration, assign, DefaultPrivacyLevel, display, isPercentage, objectHasValue, validateAndBuildConfiguration } from '@datadog/browser-core';\nimport { isTracingOption } from './tracing/tracer';\nexport function validateAndBuildRumConfiguration(initConfiguration) {\n  var _a, _b, _c, _d, _e, _f;\n  if (!initConfiguration.applicationId) {\n    display.error('Application ID is not configured, no RUM data will be collected.');\n    return;\n  }\n  if (initConfiguration.sessionReplaySampleRate !== undefined && !isPercentage(initConfiguration.sessionReplaySampleRate)) {\n    display.error('Session Replay Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  // TODO remove fallback in next major\n  var premiumSampleRate = (_a = initConfiguration.premiumSampleRate) !== null && _a !== void 0 ? _a : initConfiguration.replaySampleRate;\n  if (premiumSampleRate !== undefined && initConfiguration.sessionReplaySampleRate !== undefined) {\n    display.warn('Ignoring Premium Sample Rate because Session Replay Sample Rate is set');\n    premiumSampleRate = undefined;\n  }\n  if (premiumSampleRate !== undefined && !isPercentage(premiumSampleRate)) {\n    display.error('Premium Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  var traceSampleRate = (_b = initConfiguration.traceSampleRate) !== null && _b !== void 0 ? _b : initConfiguration.tracingSampleRate;\n  if (traceSampleRate !== undefined && !isPercentage(traceSampleRate)) {\n    display.error('Trace Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.excludedActivityUrls !== undefined && !Array.isArray(initConfiguration.excludedActivityUrls)) {\n    display.error('Excluded Activity Urls should be an array');\n    return;\n  }\n  var allowedTracingUrls = validateAndBuildTracingOptions(initConfiguration);\n  if (!allowedTracingUrls) {\n    return;\n  }\n  var baseConfiguration = validateAndBuildConfiguration(initConfiguration);\n  if (!baseConfiguration) {\n    return;\n  }\n  var trackUserInteractions = !!((_c = initConfiguration.trackUserInteractions) !== null && _c !== void 0 ? _c : initConfiguration.trackInteractions);\n  var trackFrustrations = !!initConfiguration.trackFrustrations;\n  return assign({\n    applicationId: initConfiguration.applicationId,\n    version: initConfiguration.version,\n    actionNameAttribute: initConfiguration.actionNameAttribute,\n    sessionReplaySampleRate: (_e = (_d = initConfiguration.sessionReplaySampleRate) !== null && _d !== void 0 ? _d : premiumSampleRate) !== null && _e !== void 0 ? _e : 100,\n    oldPlansBehavior: initConfiguration.sessionReplaySampleRate === undefined,\n    traceSampleRate: traceSampleRate,\n    allowedTracingUrls: allowedTracingUrls,\n    excludedActivityUrls: (_f = initConfiguration.excludedActivityUrls) !== null && _f !== void 0 ? _f : [],\n    trackUserInteractions: trackUserInteractions || trackFrustrations,\n    trackFrustrations: trackFrustrations,\n    trackViewsManually: !!initConfiguration.trackViewsManually,\n    trackResources: initConfiguration.trackResources,\n    trackLongTasks: initConfiguration.trackLongTasks,\n    defaultPrivacyLevel: objectHasValue(DefaultPrivacyLevel, initConfiguration.defaultPrivacyLevel) ? initConfiguration.defaultPrivacyLevel : DefaultPrivacyLevel.MASK_USER_INPUT,\n    customerDataTelemetrySampleRate: 1\n  }, baseConfiguration);\n}\n/**\n * Handles allowedTracingUrls and processes legacy allowedTracingOrigins\n */\nfunction validateAndBuildTracingOptions(initConfiguration) {\n  // Advise about parameters precedence.\n  if (initConfiguration.allowedTracingUrls !== undefined && initConfiguration.allowedTracingOrigins !== undefined) {\n    display.warn('Both allowedTracingUrls and allowedTracingOrigins (deprecated) have been defined. The parameter allowedTracingUrls will override allowedTracingOrigins.');\n  }\n  // Handle allowedTracingUrls first\n  if (initConfiguration.allowedTracingUrls !== undefined) {\n    if (!Array.isArray(initConfiguration.allowedTracingUrls)) {\n      display.error('Allowed Tracing URLs should be an array');\n      return;\n    }\n    if (initConfiguration.allowedTracingUrls.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service needs to be configured when tracing is enabled');\n      return;\n    }\n    // Convert from (MatchOption | TracingOption) to TracingOption, remove unknown properties\n    var tracingOptions_1 = [];\n    initConfiguration.allowedTracingUrls.forEach(function (option) {\n      if (isMatchOption(option)) {\n        tracingOptions_1.push({\n          match: option,\n          propagatorTypes: ['datadog']\n        });\n      } else if (isTracingOption(option)) {\n        tracingOptions_1.push(option);\n      } else {\n        display.warn('Allowed Tracing Urls parameters should be a string, RegExp, function, or an object. Ignoring parameter', option);\n      }\n    });\n    return tracingOptions_1;\n  }\n  // Handle conversion of allowedTracingOrigins to allowedTracingUrls\n  if (initConfiguration.allowedTracingOrigins !== undefined) {\n    if (!Array.isArray(initConfiguration.allowedTracingOrigins)) {\n      display.error('Allowed Tracing Origins should be an array');\n      return;\n    }\n    if (initConfiguration.allowedTracingOrigins.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service needs to be configured when tracing is enabled');\n      return;\n    }\n    var tracingOptions_2 = [];\n    initConfiguration.allowedTracingOrigins.forEach(function (legacyMatchOption) {\n      var tracingOption = convertLegacyMatchOptionToTracingOption(legacyMatchOption);\n      if (tracingOption) {\n        tracingOptions_2.push(tracingOption);\n      }\n    });\n    return tracingOptions_2;\n  }\n  return [];\n}\n/**\n * Converts parameters from the deprecated allowedTracingOrigins\n * to allowedTracingUrls. Handles the change from origin to full URLs.\n */\nfunction convertLegacyMatchOptionToTracingOption(item) {\n  var match;\n  if (typeof item === 'string') {\n    match = item;\n  } else if (item instanceof RegExp) {\n    match = function (url) {\n      return item.test(getOrigin(url));\n    };\n  } else if (typeof item === 'function') {\n    match = function (url) {\n      return item(getOrigin(url));\n    };\n  }\n  if (match === undefined) {\n    display.warn('Allowed Tracing Origins parameters should be a string, RegExp or function. Ignoring parameter', item);\n    return undefined;\n  }\n  return {\n    match: match,\n    propagatorTypes: ['datadog']\n  };\n}\n/**\n * Combines the selected tracing propagators from the different options in allowedTracingUrls,\n * and assumes 'datadog' has been selected when using allowedTracingOrigins\n */\nfunction getSelectedTracingPropagators(configuration) {\n  var usedTracingPropagators = new Set();\n  if (Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0) {\n    configuration.allowedTracingUrls.forEach(function (option) {\n      if (isMatchOption(option)) {\n        usedTracingPropagators.add('datadog');\n      } else {\n        option.propagatorTypes.forEach(function (propagatorType) {\n          return usedTracingPropagators.add(propagatorType);\n        });\n      }\n    });\n  }\n  if (Array.isArray(configuration.allowedTracingOrigins) && configuration.allowedTracingOrigins.length > 0) {\n    usedTracingPropagators.add('datadog');\n  }\n  return arrayFrom(usedTracingPropagators);\n}\nexport function serializeRumConfiguration(configuration) {\n  var _a, _b;\n  var baseSerializedConfiguration = serializeConfiguration(configuration);\n  return assign({\n    premium_sample_rate: configuration.premiumSampleRate,\n    replay_sample_rate: configuration.replaySampleRate,\n    session_replay_sample_rate: configuration.sessionReplaySampleRate,\n    trace_sample_rate: (_a = configuration.traceSampleRate) !== null && _a !== void 0 ? _a : configuration.tracingSampleRate,\n    action_name_attribute: configuration.actionNameAttribute,\n    use_allowed_tracing_origins: Array.isArray(configuration.allowedTracingOrigins) && configuration.allowedTracingOrigins.length > 0,\n    use_allowed_tracing_urls: Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0,\n    selected_tracing_propagators: getSelectedTracingPropagators(configuration),\n    default_privacy_level: configuration.defaultPrivacyLevel,\n    use_excluded_activity_urls: Array.isArray(configuration.allowedTracingOrigins) && configuration.allowedTracingOrigins.length > 0,\n    track_frustrations: configuration.trackFrustrations,\n    track_views_manually: configuration.trackViewsManually,\n    track_user_interactions: (_b = configuration.trackUserInteractions) !== null && _b !== void 0 ? _b : configuration.trackInteractions\n  }, baseSerializedConfiguration);\n}","map":{"version":3,"names":["arrayFrom","getOrigin","isMatchOption","serializeConfiguration","assign","DefaultPrivacyLevel","display","isPercentage","objectHasValue","validateAndBuildConfiguration","isTracingOption","validateAndBuildRumConfiguration","initConfiguration","applicationId","error","sessionReplaySampleRate","undefined","premiumSampleRate","_a","replaySampleRate","warn","traceSampleRate","_b","tracingSampleRate","excludedActivityUrls","Array","isArray","allowedTracingUrls","validateAndBuildTracingOptions","baseConfiguration","trackUserInteractions","_c","trackInteractions","trackFrustrations","version","actionNameAttribute","_e","_d","oldPlansBehavior","_f","trackViewsManually","trackResources","trackLongTasks","defaultPrivacyLevel","MASK_USER_INPUT","customerDataTelemetrySampleRate","allowedTracingOrigins","length","service","tracingOptions_1","forEach","option","push","match","propagatorTypes","tracingOptions_2","legacyMatchOption","tracingOption","convertLegacyMatchOptionToTracingOption","item","RegExp","url","test","getSelectedTracingPropagators","configuration","usedTracingPropagators","Set","add","propagatorType","serializeRumConfiguration","baseSerializedConfiguration","premium_sample_rate","replay_sample_rate","session_replay_sample_rate","trace_sample_rate","action_name_attribute","use_allowed_tracing_origins","use_allowed_tracing_urls","selected_tracing_propagators","default_privacy_level","use_excluded_activity_urls","track_frustrations","track_views_manually","track_user_interactions"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-rum-core/src/domain/configuration.ts"],"sourcesContent":["import type { Configuration, InitConfiguration, MatchOption, RawTelemetryConfiguration } from '@datadog/browser-core'\nimport {\n  arrayFrom,\n  getOrigin,\n  isMatchOption,\n  serializeConfiguration,\n  assign,\n  DefaultPrivacyLevel,\n  display,\n  isPercentage,\n  objectHasValue,\n  validateAndBuildConfiguration,\n} from '@datadog/browser-core'\nimport type { RumEventDomainContext } from '../domainContext.types'\nimport type { RumEvent } from '../rumEvent.types'\nimport { isTracingOption } from './tracing/tracer'\nimport type { PropagatorType, TracingOption } from './tracing/tracer.types'\n\nexport interface RumInitConfiguration extends InitConfiguration {\n  // global options\n  applicationId: string\n  beforeSend?: ((event: RumEvent, context: RumEventDomainContext) => void | boolean) | undefined\n  /**\n   * @deprecated use sessionReplaySampleRate instead\n   */\n  premiumSampleRate?: number | undefined\n  excludedActivityUrls?: MatchOption[] | undefined\n\n  // tracing options\n  /**\n   * @deprecated use allowedTracingUrls instead\n   */\n  allowedTracingOrigins?: MatchOption[] | undefined\n  allowedTracingUrls?: Array<MatchOption | TracingOption> | undefined\n  /**\n   * @deprecated use traceSampleRate instead\n   */\n  tracingSampleRate?: number | undefined\n  traceSampleRate?: number | undefined\n\n  // replay options\n  defaultPrivacyLevel?: DefaultPrivacyLevel | undefined\n  /**\n   * @deprecated use sessionReplaySampleRate instead\n   */\n  replaySampleRate?: number | undefined\n  sessionReplaySampleRate?: number | undefined\n\n  // action options\n  /**\n   * @deprecated use trackUserInteractions instead\n   */\n  trackInteractions?: boolean | undefined\n  trackUserInteractions?: boolean | undefined\n  trackFrustrations?: boolean | undefined\n  actionNameAttribute?: string | undefined\n\n  // view options\n  trackViewsManually?: boolean | undefined\n\n  trackResources?: boolean | undefined\n  trackLongTasks?: boolean | undefined\n}\n\nexport type HybridInitConfiguration = Omit<RumInitConfiguration, 'applicationId' | 'clientToken'>\n\nexport interface RumConfiguration extends Configuration {\n  // Built from init configuration\n  actionNameAttribute: string | undefined\n  traceSampleRate: number | undefined\n  allowedTracingUrls: TracingOption[]\n  excludedActivityUrls: MatchOption[]\n  applicationId: string\n  defaultPrivacyLevel: DefaultPrivacyLevel\n  oldPlansBehavior: boolean\n  sessionReplaySampleRate: number\n  trackUserInteractions: boolean\n  trackFrustrations: boolean\n  trackViewsManually: boolean\n  trackResources: boolean | undefined\n  trackLongTasks: boolean | undefined\n  version?: string\n  customerDataTelemetrySampleRate: number\n}\n\nexport function validateAndBuildRumConfiguration(\n  initConfiguration: RumInitConfiguration\n): RumConfiguration | undefined {\n  if (!initConfiguration.applicationId) {\n    display.error('Application ID is not configured, no RUM data will be collected.')\n    return\n  }\n\n  if (\n    initConfiguration.sessionReplaySampleRate !== undefined &&\n    !isPercentage(initConfiguration.sessionReplaySampleRate)\n  ) {\n    display.error('Session Replay Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  // TODO remove fallback in next major\n  let premiumSampleRate = initConfiguration.premiumSampleRate ?? initConfiguration.replaySampleRate\n  if (premiumSampleRate !== undefined && initConfiguration.sessionReplaySampleRate !== undefined) {\n    display.warn('Ignoring Premium Sample Rate because Session Replay Sample Rate is set')\n    premiumSampleRate = undefined\n  }\n\n  if (premiumSampleRate !== undefined && !isPercentage(premiumSampleRate)) {\n    display.error('Premium Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  const traceSampleRate = initConfiguration.traceSampleRate ?? initConfiguration.tracingSampleRate\n  if (traceSampleRate !== undefined && !isPercentage(traceSampleRate)) {\n    display.error('Trace Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (initConfiguration.excludedActivityUrls !== undefined && !Array.isArray(initConfiguration.excludedActivityUrls)) {\n    display.error('Excluded Activity Urls should be an array')\n    return\n  }\n\n  const allowedTracingUrls = validateAndBuildTracingOptions(initConfiguration)\n  if (!allowedTracingUrls) {\n    return\n  }\n\n  const baseConfiguration = validateAndBuildConfiguration(initConfiguration)\n  if (!baseConfiguration) {\n    return\n  }\n\n  const trackUserInteractions = !!(initConfiguration.trackUserInteractions ?? initConfiguration.trackInteractions)\n  const trackFrustrations = !!initConfiguration.trackFrustrations\n\n  return assign(\n    {\n      applicationId: initConfiguration.applicationId,\n      version: initConfiguration.version,\n      actionNameAttribute: initConfiguration.actionNameAttribute,\n      sessionReplaySampleRate: initConfiguration.sessionReplaySampleRate ?? premiumSampleRate ?? 100,\n      oldPlansBehavior: initConfiguration.sessionReplaySampleRate === undefined,\n      traceSampleRate,\n      allowedTracingUrls,\n      excludedActivityUrls: initConfiguration.excludedActivityUrls ?? [],\n      trackUserInteractions: trackUserInteractions || trackFrustrations,\n      trackFrustrations,\n      trackViewsManually: !!initConfiguration.trackViewsManually,\n      trackResources: initConfiguration.trackResources,\n      trackLongTasks: initConfiguration.trackLongTasks,\n      defaultPrivacyLevel: objectHasValue(DefaultPrivacyLevel, initConfiguration.defaultPrivacyLevel)\n        ? initConfiguration.defaultPrivacyLevel\n        : DefaultPrivacyLevel.MASK_USER_INPUT,\n      customerDataTelemetrySampleRate: 1,\n    },\n    baseConfiguration\n  )\n}\n\n/**\n * Handles allowedTracingUrls and processes legacy allowedTracingOrigins\n */\nfunction validateAndBuildTracingOptions(initConfiguration: RumInitConfiguration): TracingOption[] | undefined {\n  // Advise about parameters precedence.\n  if (initConfiguration.allowedTracingUrls !== undefined && initConfiguration.allowedTracingOrigins !== undefined) {\n    display.warn(\n      'Both allowedTracingUrls and allowedTracingOrigins (deprecated) have been defined. The parameter allowedTracingUrls will override allowedTracingOrigins.'\n    )\n  }\n  // Handle allowedTracingUrls first\n  if (initConfiguration.allowedTracingUrls !== undefined) {\n    if (!Array.isArray(initConfiguration.allowedTracingUrls)) {\n      display.error('Allowed Tracing URLs should be an array')\n      return\n    }\n    if (initConfiguration.allowedTracingUrls.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service needs to be configured when tracing is enabled')\n      return\n    }\n    // Convert from (MatchOption | TracingOption) to TracingOption, remove unknown properties\n    const tracingOptions: TracingOption[] = []\n    initConfiguration.allowedTracingUrls.forEach((option) => {\n      if (isMatchOption(option)) {\n        tracingOptions.push({ match: option, propagatorTypes: ['datadog'] })\n      } else if (isTracingOption(option)) {\n        tracingOptions.push(option)\n      } else {\n        display.warn(\n          'Allowed Tracing Urls parameters should be a string, RegExp, function, or an object. Ignoring parameter',\n          option\n        )\n      }\n    })\n\n    return tracingOptions\n  }\n\n  // Handle conversion of allowedTracingOrigins to allowedTracingUrls\n  if (initConfiguration.allowedTracingOrigins !== undefined) {\n    if (!Array.isArray(initConfiguration.allowedTracingOrigins)) {\n      display.error('Allowed Tracing Origins should be an array')\n      return\n    }\n    if (initConfiguration.allowedTracingOrigins.length !== 0 && initConfiguration.service === undefined) {\n      display.error('Service needs to be configured when tracing is enabled')\n      return\n    }\n\n    const tracingOptions: TracingOption[] = []\n    initConfiguration.allowedTracingOrigins.forEach((legacyMatchOption) => {\n      const tracingOption = convertLegacyMatchOptionToTracingOption(legacyMatchOption)\n      if (tracingOption) {\n        tracingOptions.push(tracingOption)\n      }\n    })\n    return tracingOptions\n  }\n\n  return []\n}\n\n/**\n * Converts parameters from the deprecated allowedTracingOrigins\n * to allowedTracingUrls. Handles the change from origin to full URLs.\n */\nfunction convertLegacyMatchOptionToTracingOption(item: MatchOption): TracingOption | undefined {\n  let match: MatchOption | undefined\n  if (typeof item === 'string') {\n    match = item\n  } else if (item instanceof RegExp) {\n    match = (url) => item.test(getOrigin(url))\n  } else if (typeof item === 'function') {\n    match = (url) => item(getOrigin(url))\n  }\n\n  if (match === undefined) {\n    display.warn('Allowed Tracing Origins parameters should be a string, RegExp or function. Ignoring parameter', item)\n    return undefined\n  }\n\n  return { match, propagatorTypes: ['datadog'] }\n}\n\n/**\n * Combines the selected tracing propagators from the different options in allowedTracingUrls,\n * and assumes 'datadog' has been selected when using allowedTracingOrigins\n */\nfunction getSelectedTracingPropagators(configuration: RumInitConfiguration): PropagatorType[] {\n  const usedTracingPropagators = new Set<PropagatorType>()\n\n  if (Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0) {\n    configuration.allowedTracingUrls.forEach((option) => {\n      if (isMatchOption(option)) {\n        usedTracingPropagators.add('datadog')\n      } else {\n        option.propagatorTypes.forEach((propagatorType) => usedTracingPropagators.add(propagatorType))\n      }\n    })\n  }\n\n  if (Array.isArray(configuration.allowedTracingOrigins) && configuration.allowedTracingOrigins.length > 0) {\n    usedTracingPropagators.add('datadog')\n  }\n\n  return arrayFrom(usedTracingPropagators)\n}\n\nexport function serializeRumConfiguration(configuration: RumInitConfiguration): RawTelemetryConfiguration {\n  const baseSerializedConfiguration = serializeConfiguration(configuration)\n\n  return assign(\n    {\n      premium_sample_rate: configuration.premiumSampleRate,\n      replay_sample_rate: configuration.replaySampleRate,\n      session_replay_sample_rate: configuration.sessionReplaySampleRate,\n      trace_sample_rate: configuration.traceSampleRate ?? configuration.tracingSampleRate,\n      action_name_attribute: configuration.actionNameAttribute,\n      use_allowed_tracing_origins:\n        Array.isArray(configuration.allowedTracingOrigins) && configuration.allowedTracingOrigins.length > 0,\n      use_allowed_tracing_urls:\n        Array.isArray(configuration.allowedTracingUrls) && configuration.allowedTracingUrls.length > 0,\n      selected_tracing_propagators: getSelectedTracingPropagators(configuration),\n      default_privacy_level: configuration.defaultPrivacyLevel,\n      use_excluded_activity_urls:\n        Array.isArray(configuration.allowedTracingOrigins) && configuration.allowedTracingOrigins.length > 0,\n      track_frustrations: configuration.trackFrustrations,\n      track_views_manually: configuration.trackViewsManually,\n      track_user_interactions: configuration.trackUserInteractions ?? configuration.trackInteractions,\n    },\n    baseSerializedConfiguration\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}