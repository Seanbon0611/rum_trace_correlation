{"ast":null,"code":"import { endsWith, getGlobalObject } from '../tools/utils';\nexport function getEventBridge() {\n  var eventBridgeGlobal = getEventBridgeGlobal();\n  if (!eventBridgeGlobal) {\n    return;\n  }\n  return {\n    getAllowedWebViewHosts: function () {\n      return JSON.parse(eventBridgeGlobal.getAllowedWebViewHosts());\n    },\n    send: function (eventType, event) {\n      eventBridgeGlobal.send(JSON.stringify({\n        eventType: eventType,\n        event: event\n      }));\n    }\n  };\n}\nexport function canUseEventBridge(currentHost) {\n  var _a;\n  if (currentHost === void 0) {\n    currentHost = (_a = getGlobalObject().location) === null || _a === void 0 ? void 0 : _a.hostname;\n  }\n  var bridge = getEventBridge();\n  return !!bridge && bridge.getAllowedWebViewHosts().some(function (allowedHost) {\n    return currentHost === allowedHost || endsWith(currentHost, \".\".concat(allowedHost));\n  });\n}\nfunction getEventBridgeGlobal() {\n  return getGlobalObject().DatadogEventBridge;\n}","map":{"version":3,"names":["endsWith","getGlobalObject","getEventBridge","eventBridgeGlobal","getEventBridgeGlobal","getAllowedWebViewHosts","JSON","parse","send","eventType","event","stringify","canUseEventBridge","currentHost","_a","location","hostname","bridge","some","allowedHost","concat","DatadogEventBridge"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-core/src/transport/eventBridge.ts"],"sourcesContent":["import { endsWith, getGlobalObject } from '../tools/utils'\n\nexport interface BrowserWindowWithEventBridge extends Window {\n  DatadogEventBridge?: DatadogEventBridge\n}\n\nexport interface DatadogEventBridge {\n  getAllowedWebViewHosts(): string\n  send(msg: string): void\n}\n\nexport function getEventBridge<T, E>() {\n  const eventBridgeGlobal = getEventBridgeGlobal()\n\n  if (!eventBridgeGlobal) {\n    return\n  }\n\n  return {\n    getAllowedWebViewHosts() {\n      return JSON.parse(eventBridgeGlobal.getAllowedWebViewHosts()) as string[]\n    },\n    send(eventType: T, event: E) {\n      eventBridgeGlobal.send(JSON.stringify({ eventType, event }))\n    },\n  }\n}\n\nexport function canUseEventBridge(currentHost = getGlobalObject<Window>().location?.hostname): boolean {\n  const bridge = getEventBridge()\n  return (\n    !!bridge &&\n    bridge\n      .getAllowedWebViewHosts()\n      .some((allowedHost) => currentHost === allowedHost || endsWith(currentHost, `.${allowedHost}`))\n  )\n}\n\nfunction getEventBridgeGlobal() {\n  return getGlobalObject<BrowserWindowWithEventBridge>().DatadogEventBridge\n}\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,eAAe,QAAQ,gBAAgB;AAW1D,OAAM,SAAUC,cAAcA,CAAA;EAC5B,IAAMC,iBAAiB,GAAGC,oBAAoB,EAAE;EAEhD,IAAI,CAACD,iBAAiB,EAAE;IACtB;;EAGF,OAAO;IACLE,sBAAsB,EAAtB,SAAAA,CAAA;MACE,OAAOC,IAAI,CAACC,KAAK,CAACJ,iBAAiB,CAACE,sBAAsB,EAAE,CAAa;IAC3E,CAAC;IACDG,IAAI,EAAJ,SAAAA,CAAKC,SAAY,EAAEC,KAAQ;MACzBP,iBAAiB,CAACK,IAAI,CAACF,IAAI,CAACK,SAAS,CAAC;QAAEF,SAAS,EAAAA,SAAA;QAAEC,KAAK,EAAAA;MAAA,CAAE,CAAC,CAAC;IAC9D;GACD;AACH;AAEA,OAAM,SAAUE,iBAAiBA,CAACC,WAA0D;;EAA1D,IAAAA,WAAA;IAAAA,WAAA,IAAAC,EAAA,GAAcb,eAAe,EAAU,CAACc,QAAQ,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,QAAQ;EAAA;EAC1F,IAAMC,MAAM,GAAGf,cAAc,EAAE;EAC/B,OACE,CAAC,CAACe,MAAM,IACRA,MAAM,CACHZ,sBAAsB,EAAE,CACxBa,IAAI,CAAC,UAACC,WAAW;IAAK,OAAAN,WAAW,KAAKM,WAAW,IAAInB,QAAQ,CAACa,WAAW,EAAE,IAAAO,MAAA,CAAID,WAAW,CAAE,CAAC;EAAvE,CAAuE,CAAC;AAErG;AAEA,SAASf,oBAAoBA,CAAA;EAC3B,OAAOH,eAAe,EAAgC,CAACoB,kBAAkB;AAC3E"},"metadata":{},"sourceType":"module","externalDependencies":[]}