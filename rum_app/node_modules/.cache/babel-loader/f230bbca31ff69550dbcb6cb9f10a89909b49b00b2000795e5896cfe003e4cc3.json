{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { ConsoleApiName, display } from './display';\nvar onMonitorErrorCollected;\nvar debugMode = false;\nexport function startMonitorErrorCollection(newOnMonitorErrorCollected) {\n  onMonitorErrorCollected = newOnMonitorErrorCollected;\n}\nexport function setDebugMode(newDebugMode) {\n  debugMode = newDebugMode;\n}\nexport function resetMonitor() {\n  onMonitorErrorCollected = undefined;\n  debugMode = false;\n}\nexport function monitored(_, __, descriptor) {\n  var originalMethod = descriptor.value;\n  descriptor.value = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    var decorated = onMonitorErrorCollected ? monitor(originalMethod) : originalMethod;\n    return decorated.apply(this, args);\n  };\n}\nexport function monitor(fn) {\n  return function () {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return callMonitored(fn, this, arguments);\n  }; // consider output type has input type\n}\n\nexport function callMonitored(fn, context, args) {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return fn.apply(context, args);\n  } catch (e) {\n    displayIfDebugEnabled(ConsoleApiName.error, e);\n    if (onMonitorErrorCollected) {\n      try {\n        onMonitorErrorCollected(e);\n      } catch (e) {\n        displayIfDebugEnabled(ConsoleApiName.error, e);\n      }\n    }\n  }\n}\nexport function displayIfDebugEnabled(api) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  if (debugMode) {\n    display.apply(void 0, __spreadArray([api, '[MONITOR]'], args, false));\n  }\n}","map":{"version":3,"names":["ConsoleApiName","display","onMonitorErrorCollected","debugMode","startMonitorErrorCollection","newOnMonitorErrorCollected","setDebugMode","newDebugMode","resetMonitor","undefined","monitored","_","__","descriptor","originalMethod","value","args","_i","arguments","length","decorated","monitor","apply","fn","callMonitored","context","e","displayIfDebugEnabled","error","api","__spreadArray"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-core/src/tools/monitor.ts"],"sourcesContent":["import { ConsoleApiName, display } from './display'\n\nlet onMonitorErrorCollected: undefined | ((error: unknown) => void)\nlet debugMode = false\n\nexport function startMonitorErrorCollection(newOnMonitorErrorCollected: (error: unknown) => void) {\n  onMonitorErrorCollected = newOnMonitorErrorCollected\n}\n\nexport function setDebugMode(newDebugMode: boolean) {\n  debugMode = newDebugMode\n}\n\nexport function resetMonitor() {\n  onMonitorErrorCollected = undefined\n  debugMode = false\n}\n\nexport function monitored<T extends (...params: any[]) => unknown>(\n  _: any,\n  __: string,\n  descriptor: TypedPropertyDescriptor<T>\n) {\n  const originalMethod = descriptor.value!\n  descriptor.value = function (this: any, ...args: Parameters<T>) {\n    const decorated = onMonitorErrorCollected ? monitor(originalMethod) : originalMethod\n    return decorated.apply(this, args) as ReturnType<T>\n  } as T\n}\n\nexport function monitor<T extends (...args: any[]) => any>(fn: T): T {\n  return function (this: any) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return callMonitored(fn, this, arguments as unknown as Parameters<T>)\n  } as unknown as T // consider output type has input type\n}\n\nexport function callMonitored<T extends (...args: any[]) => any>(\n  fn: T,\n  context: ThisParameterType<T>,\n  args: Parameters<T>\n): ReturnType<T> | undefined\nexport function callMonitored<T extends (this: void) => any>(fn: T): ReturnType<T> | undefined\nexport function callMonitored<T extends (...args: any[]) => any>(\n  fn: T,\n  context?: any,\n  args?: any\n): ReturnType<T> | undefined {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return fn.apply(context, args)\n  } catch (e) {\n    displayIfDebugEnabled(ConsoleApiName.error, e)\n    if (onMonitorErrorCollected) {\n      try {\n        onMonitorErrorCollected(e)\n      } catch (e) {\n        displayIfDebugEnabled(ConsoleApiName.error, e)\n      }\n    }\n  }\n}\n\nexport function displayIfDebugEnabled(api: ConsoleApiName, ...args: any[]) {\n  if (debugMode) {\n    display(api, '[MONITOR]', ...args)\n  }\n}\n"],"mappings":";;;;;;;;;AAAA,SAASA,cAAc,EAAEC,OAAO,QAAQ,WAAW;AAEnD,IAAIC,uBAA+D;AACnE,IAAIC,SAAS,GAAG,KAAK;AAErB,OAAM,SAAUC,2BAA2BA,CAACC,0BAAoD;EAC9FH,uBAAuB,GAAGG,0BAA0B;AACtD;AAEA,OAAM,SAAUC,YAAYA,CAACC,YAAqB;EAChDJ,SAAS,GAAGI,YAAY;AAC1B;AAEA,OAAM,SAAUC,YAAYA,CAAA;EAC1BN,uBAAuB,GAAGO,SAAS;EACnCN,SAAS,GAAG,KAAK;AACnB;AAEA,OAAM,SAAUO,SAASA,CACvBC,CAAM,EACNC,EAAU,EACVC,UAAsC;EAEtC,IAAMC,cAAc,GAAGD,UAAU,CAACE,KAAM;EACxCF,UAAU,CAACE,KAAK,GAAG;IAAqB,IAAAC,IAAA;SAAA,IAAAC,EAAA,IAAsB,EAAtBA,EAAA,GAAAC,SAAA,CAAAC,MAAsB,EAAtBF,EAAA,EAAsB;MAAtBD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;IACtC,IAAMG,SAAS,GAAGlB,uBAAuB,GAAGmB,OAAO,CAACP,cAAc,CAAC,GAAGA,cAAc;IACpF,OAAOM,SAAS,CAACE,KAAK,CAAC,IAAI,EAAEN,IAAI,CAAkB;EACrD,CAAM;AACR;AAEA,OAAM,SAAUK,OAAOA,CAAoCE,EAAK;EAC9D,OAAO;IACL;IACA,OAAOC,aAAa,CAACD,EAAE,EAAE,IAAI,EAAEL,SAAqC,CAAC;EACvE,CAAiB,EAAC;AACpB;;AAQA,OAAM,SAAUM,aAAaA,CAC3BD,EAAK,EACLE,OAAa,EACbT,IAAU;EAEV,IAAI;IACF;IACA,OAAOO,EAAE,CAACD,KAAK,CAACG,OAAO,EAAET,IAAI,CAAC;GAC/B,CAAC,OAAOU,CAAC,EAAE;IACVC,qBAAqB,CAAC3B,cAAc,CAAC4B,KAAK,EAAEF,CAAC,CAAC;IAC9C,IAAIxB,uBAAuB,EAAE;MAC3B,IAAI;QACFA,uBAAuB,CAACwB,CAAC,CAAC;OAC3B,CAAC,OAAOA,CAAC,EAAE;QACVC,qBAAqB,CAAC3B,cAAc,CAAC4B,KAAK,EAAEF,CAAC,CAAC;;;;AAItD;AAEA,OAAM,SAAUC,qBAAqBA,CAACE,GAAmB;EAAE,IAAAb,IAAA;OAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;IAAdD,IAAA,CAAAC,EAAA,QAAAC,SAAA,CAAAD,EAAA;;EACzD,IAAId,SAAS,EAAE;IACbF,OAAO,CAAAqB,KAAA,SAAAQ,aAAA,EAACD,GAAG,EAAE,WAAW,GAAKb,IAAI;;AAErC"},"metadata":{},"sourceType":"module","externalDependencies":[]}