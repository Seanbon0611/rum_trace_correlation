{"ast":null,"code":"import { getCurrentSite } from '../../browser/cookie';\nimport { catchUserErrors } from '../../tools/catchUserErrors';\nimport { display } from '../../tools/display';\nimport { assign, isPercentage, ONE_KIBI_BYTE, ONE_SECOND } from '../../tools/utils';\nimport { updateExperimentalFeatures } from './experimentalFeatures';\nimport { computeTransportConfiguration } from './transportConfiguration';\nexport var DefaultPrivacyLevel = {\n  ALLOW: 'allow',\n  MASK: 'mask',\n  MASK_USER_INPUT: 'mask-user-input'\n};\nexport function validateAndBuildConfiguration(initConfiguration) {\n  var _a, _b, _c;\n  if (!initConfiguration || !initConfiguration.clientToken) {\n    display.error('Client Token is not configured, we will not send any data.');\n    return;\n  }\n  var sessionSampleRate = (_a = initConfiguration.sessionSampleRate) !== null && _a !== void 0 ? _a : initConfiguration.sampleRate;\n  if (sessionSampleRate !== undefined && !isPercentage(sessionSampleRate)) {\n    display.error('Session Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.telemetrySampleRate !== undefined && !isPercentage(initConfiguration.telemetrySampleRate)) {\n    display.error('Telemetry Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  if (initConfiguration.telemetryConfigurationSampleRate !== undefined && !isPercentage(initConfiguration.telemetryConfigurationSampleRate)) {\n    display.error('Telemetry Configuration Sample Rate should be a number between 0 and 100');\n    return;\n  }\n  // Set the experimental feature flags as early as possible, so we can use them in most places\n  updateExperimentalFeatures(initConfiguration.enableExperimentalFeatures);\n  return assign({\n    beforeSend: initConfiguration.beforeSend && catchUserErrors(initConfiguration.beforeSend, 'beforeSend threw an error:'),\n    cookieOptions: buildCookieOptions(initConfiguration),\n    sessionSampleRate: sessionSampleRate !== null && sessionSampleRate !== void 0 ? sessionSampleRate : 100,\n    telemetrySampleRate: (_b = initConfiguration.telemetrySampleRate) !== null && _b !== void 0 ? _b : 20,\n    telemetryConfigurationSampleRate: (_c = initConfiguration.telemetryConfigurationSampleRate) !== null && _c !== void 0 ? _c : 5,\n    service: initConfiguration.service,\n    silentMultipleInit: !!initConfiguration.silentMultipleInit,\n    /**\n     * beacon payload max queue size implementation is 64kb\n     * ensure that we leave room for logs, rum and potential other users\n     */\n    batchBytesLimit: 16 * ONE_KIBI_BYTE,\n    eventRateLimiterThreshold: 3000,\n    maxTelemetryEventsPerPage: 15,\n    /**\n     * flush automatically, aim to be lower than ALB connection timeout\n     * to maximize connection reuse.\n     */\n    flushTimeout: 30 * ONE_SECOND,\n    /**\n     * Logs intake limit\n     */\n    batchMessagesLimit: 50,\n    messageBytesLimit: 256 * ONE_KIBI_BYTE\n  }, computeTransportConfiguration(initConfiguration));\n}\nexport function buildCookieOptions(initConfiguration) {\n  var cookieOptions = {};\n  cookieOptions.secure = mustUseSecureCookie(initConfiguration);\n  cookieOptions.crossSite = !!initConfiguration.useCrossSiteSessionCookie;\n  if (initConfiguration.trackSessionAcrossSubdomains) {\n    cookieOptions.domain = getCurrentSite();\n  }\n  return cookieOptions;\n}\nfunction mustUseSecureCookie(initConfiguration) {\n  return !!initConfiguration.useSecureSessionCookie || !!initConfiguration.useCrossSiteSessionCookie;\n}\nexport function serializeConfiguration(configuration) {\n  var _a, _b;\n  var proxy = (_a = configuration.proxy) !== null && _a !== void 0 ? _a : configuration.proxyUrl;\n  return {\n    session_sample_rate: (_b = configuration.sessionSampleRate) !== null && _b !== void 0 ? _b : configuration.sampleRate,\n    telemetry_sample_rate: configuration.telemetrySampleRate,\n    telemetry_configuration_sample_rate: configuration.telemetryConfigurationSampleRate,\n    use_before_send: !!configuration.beforeSend,\n    use_cross_site_session_cookie: configuration.useCrossSiteSessionCookie,\n    use_secure_session_cookie: configuration.useSecureSessionCookie,\n    use_proxy: proxy !== undefined ? !!proxy : undefined,\n    silent_multiple_init: configuration.silentMultipleInit,\n    track_session_across_subdomains: configuration.trackSessionAcrossSubdomains,\n    track_resources: configuration.trackResources,\n    track_long_task: configuration.trackLongTasks\n  };\n}","map":{"version":3,"names":["getCurrentSite","catchUserErrors","display","assign","isPercentage","ONE_KIBI_BYTE","ONE_SECOND","updateExperimentalFeatures","computeTransportConfiguration","DefaultPrivacyLevel","ALLOW","MASK","MASK_USER_INPUT","validateAndBuildConfiguration","initConfiguration","clientToken","error","sessionSampleRate","_a","sampleRate","undefined","telemetrySampleRate","telemetryConfigurationSampleRate","enableExperimentalFeatures","beforeSend","cookieOptions","buildCookieOptions","_b","_c","service","silentMultipleInit","batchBytesLimit","eventRateLimiterThreshold","maxTelemetryEventsPerPage","flushTimeout","batchMessagesLimit","messageBytesLimit","secure","mustUseSecureCookie","crossSite","useCrossSiteSessionCookie","trackSessionAcrossSubdomains","domain","useSecureSessionCookie","serializeConfiguration","configuration","proxy","proxyUrl","session_sample_rate","telemetry_sample_rate","telemetry_configuration_sample_rate","use_before_send","use_cross_site_session_cookie","use_secure_session_cookie","use_proxy","silent_multiple_init","track_session_across_subdomains","track_resources","trackResources","track_long_task","trackLongTasks"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-core/src/domain/configuration/configuration.ts"],"sourcesContent":["import type { CookieOptions } from '../../browser/cookie'\nimport { getCurrentSite } from '../../browser/cookie'\nimport { catchUserErrors } from '../../tools/catchUserErrors'\nimport { display } from '../../tools/display'\nimport { assign, isPercentage, ONE_KIBI_BYTE, ONE_SECOND } from '../../tools/utils'\nimport type { RawTelemetryConfiguration } from '../telemetry'\nimport { updateExperimentalFeatures } from './experimentalFeatures'\nimport type { TransportConfiguration } from './transportConfiguration'\nimport { computeTransportConfiguration } from './transportConfiguration'\n\nexport const DefaultPrivacyLevel = {\n  ALLOW: 'allow',\n  MASK: 'mask',\n  MASK_USER_INPUT: 'mask-user-input',\n} as const\nexport type DefaultPrivacyLevel = typeof DefaultPrivacyLevel[keyof typeof DefaultPrivacyLevel]\n\nexport interface InitConfiguration {\n  // global options\n  clientToken: string\n  beforeSend?: GenericBeforeSendCallback | undefined\n  /**\n   * @deprecated use sessionSampleRate instead\n   */\n  sampleRate?: number | undefined\n  sessionSampleRate?: number | undefined\n  telemetrySampleRate?: number | undefined\n  silentMultipleInit?: boolean | undefined\n  trackResources?: boolean | undefined\n  trackLongTasks?: boolean | undefined\n\n  // transport options\n  proxy?: string | undefined\n  /**\n   * @deprecated use `proxy` instead\n   */\n  proxyUrl?: string | undefined\n  site?: string | undefined\n\n  // tag and context options\n  service?: string | undefined\n  env?: string | undefined\n  version?: string | undefined\n\n  // cookie options\n  useCrossSiteSessionCookie?: boolean | undefined\n  useSecureSessionCookie?: boolean | undefined\n  trackSessionAcrossSubdomains?: boolean | undefined\n\n  // internal options\n  enableExperimentalFeatures?: string[] | undefined\n  replica?: ReplicaUserConfiguration | undefined\n  datacenter?: string\n  internalAnalyticsSubdomain?: string\n\n  telemetryConfigurationSampleRate?: number\n}\n\n// This type is only used to build the core configuration. Logs and RUM SDKs are using a proper type\n// for this option.\ntype GenericBeforeSendCallback = (event: any, context?: any) => unknown\n\ninterface ReplicaUserConfiguration {\n  applicationId?: string\n  clientToken: string\n}\n\nexport interface Configuration extends TransportConfiguration {\n  // Built from init configuration\n  beforeSend: GenericBeforeSendCallback | undefined\n  cookieOptions: CookieOptions\n  sessionSampleRate: number\n  telemetrySampleRate: number\n  telemetryConfigurationSampleRate: number\n  service: string | undefined\n  silentMultipleInit: boolean\n\n  // Event limits\n  eventRateLimiterThreshold: number // Limit the maximum number of actions, errors and logs per minutes\n  maxTelemetryEventsPerPage: number\n\n  // Batch configuration\n  batchBytesLimit: number\n  flushTimeout: number\n  batchMessagesLimit: number\n  messageBytesLimit: number\n}\n\nexport function validateAndBuildConfiguration(initConfiguration: InitConfiguration): Configuration | undefined {\n  if (!initConfiguration || !initConfiguration.clientToken) {\n    display.error('Client Token is not configured, we will not send any data.')\n    return\n  }\n\n  const sessionSampleRate = initConfiguration.sessionSampleRate ?? initConfiguration.sampleRate\n  if (sessionSampleRate !== undefined && !isPercentage(sessionSampleRate)) {\n    display.error('Session Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (initConfiguration.telemetrySampleRate !== undefined && !isPercentage(initConfiguration.telemetrySampleRate)) {\n    display.error('Telemetry Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  if (\n    initConfiguration.telemetryConfigurationSampleRate !== undefined &&\n    !isPercentage(initConfiguration.telemetryConfigurationSampleRate)\n  ) {\n    display.error('Telemetry Configuration Sample Rate should be a number between 0 and 100')\n    return\n  }\n\n  // Set the experimental feature flags as early as possible, so we can use them in most places\n  updateExperimentalFeatures(initConfiguration.enableExperimentalFeatures)\n\n  return assign(\n    {\n      beforeSend:\n        initConfiguration.beforeSend && catchUserErrors(initConfiguration.beforeSend, 'beforeSend threw an error:'),\n      cookieOptions: buildCookieOptions(initConfiguration),\n      sessionSampleRate: sessionSampleRate ?? 100,\n      telemetrySampleRate: initConfiguration.telemetrySampleRate ?? 20,\n      telemetryConfigurationSampleRate: initConfiguration.telemetryConfigurationSampleRate ?? 5,\n      service: initConfiguration.service,\n      silentMultipleInit: !!initConfiguration.silentMultipleInit,\n\n      /**\n       * beacon payload max queue size implementation is 64kb\n       * ensure that we leave room for logs, rum and potential other users\n       */\n      batchBytesLimit: 16 * ONE_KIBI_BYTE,\n\n      eventRateLimiterThreshold: 3000,\n      maxTelemetryEventsPerPage: 15,\n\n      /**\n       * flush automatically, aim to be lower than ALB connection timeout\n       * to maximize connection reuse.\n       */\n      flushTimeout: 30 * ONE_SECOND,\n\n      /**\n       * Logs intake limit\n       */\n      batchMessagesLimit: 50,\n      messageBytesLimit: 256 * ONE_KIBI_BYTE,\n    },\n    computeTransportConfiguration(initConfiguration)\n  )\n}\n\nexport function buildCookieOptions(initConfiguration: InitConfiguration) {\n  const cookieOptions: CookieOptions = {}\n\n  cookieOptions.secure = mustUseSecureCookie(initConfiguration)\n  cookieOptions.crossSite = !!initConfiguration.useCrossSiteSessionCookie\n\n  if (initConfiguration.trackSessionAcrossSubdomains) {\n    cookieOptions.domain = getCurrentSite()\n  }\n\n  return cookieOptions\n}\n\nfunction mustUseSecureCookie(initConfiguration: InitConfiguration) {\n  return !!initConfiguration.useSecureSessionCookie || !!initConfiguration.useCrossSiteSessionCookie\n}\n\nexport function serializeConfiguration(configuration: InitConfiguration): Partial<RawTelemetryConfiguration> {\n  const proxy = configuration.proxy ?? configuration.proxyUrl\n  return {\n    session_sample_rate: configuration.sessionSampleRate ?? configuration.sampleRate,\n    telemetry_sample_rate: configuration.telemetrySampleRate,\n    telemetry_configuration_sample_rate: configuration.telemetryConfigurationSampleRate,\n    use_before_send: !!configuration.beforeSend,\n    use_cross_site_session_cookie: configuration.useCrossSiteSessionCookie,\n    use_secure_session_cookie: configuration.useSecureSessionCookie,\n    use_proxy: proxy !== undefined ? !!proxy : undefined,\n    silent_multiple_init: configuration.silentMultipleInit,\n    track_session_across_subdomains: configuration.trackSessionAcrossSubdomains,\n    track_resources: configuration.trackResources,\n    track_long_task: configuration.trackLongTasks,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}