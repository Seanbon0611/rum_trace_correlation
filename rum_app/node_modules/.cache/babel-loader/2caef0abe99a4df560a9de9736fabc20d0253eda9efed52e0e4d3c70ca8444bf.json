{"ast":null,"code":"/* eslint-disable */\n/**\n * DO NOT MODIFY IT BY HAND. Run `yarn rum-events-format:sync` instead.\n */\nexport {};","map":{"version":3,"names":[],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-core/src/domain/telemetry/telemetryEvent.types.ts"],"sourcesContent":["/* eslint-disable */\n/**\n * DO NOT MODIFY IT BY HAND. Run `yarn rum-events-format:sync` instead.\n */\n\n/**\n * Schema of all properties of a telemetry event\n */\nexport type TelemetryEvent = TelemetryErrorEvent | TelemetryDebugEvent | TelemetryConfigurationEvent\n/**\n * Schema of all properties of a telemetry error event\n */\nexport type TelemetryErrorEvent = CommonTelemetryProperties & {\n  /**\n   * The telemetry log information\n   */\n  telemetry: {\n    /**\n     * Telemetry type\n     */\n    type?: 'log'\n    /**\n     * Level/severity of the log\n     */\n    status: 'error'\n    /**\n     * Body of the log\n     */\n    message: string\n    /**\n     * Error properties\n     */\n    error?: {\n      /**\n       * The stack trace or the complementary information about the error\n       */\n      stack?: string\n      /**\n       * The error type or kind (or code in some cases)\n       */\n      kind?: string\n      [k: string]: unknown\n    }\n    [k: string]: unknown\n  }\n  [k: string]: unknown\n}\n/**\n * Schema of all properties of a telemetry debug event\n */\nexport type TelemetryDebugEvent = CommonTelemetryProperties & {\n  /**\n   * The telemetry log information\n   */\n  telemetry: {\n    /**\n     * Telemetry type\n     */\n    type?: 'log'\n    /**\n     * Level/severity of the log\n     */\n    status: 'debug'\n    /**\n     * Body of the log\n     */\n    message: string\n    [k: string]: unknown\n  }\n  [k: string]: unknown\n}\n/**\n * Schema of all properties of a telemetry configuration event\n */\nexport type TelemetryConfigurationEvent = CommonTelemetryProperties & {\n  /**\n   * The telemetry configuration information\n   */\n  telemetry: {\n    /**\n     * Telemetry type\n     */\n    type: 'configuration'\n    /**\n     * Configuration properties\n     */\n    configuration: {\n      /**\n       * The percentage of sessions tracked\n       */\n      session_sample_rate?: number\n      /**\n       * The percentage of telemetry events sent\n       */\n      telemetry_sample_rate?: number\n      /**\n       * The percentage of telemetry configuration events sent after being sampled by telemetry_sample_rate\n       */\n      telemetry_configuration_sample_rate?: number\n      /**\n       * The percentage of requests traced\n       */\n      trace_sample_rate?: number\n      /**\n       * The percentage of sessions with Browser RUM & Session Replay pricing tracked (deprecated in favor of session_replay_sample_rate)\n       */\n      premium_sample_rate?: number\n      /**\n       * The percentage of sessions with Browser RUM & Session Replay pricing tracked (deprecated in favor of session_replay_sample_rate)\n       */\n      replay_sample_rate?: number\n      /**\n       * The percentage of sessions with Browser RUM & Session Replay pricing tracked\n       */\n      session_replay_sample_rate?: number\n      /**\n       * Whether a proxy configured is used\n       */\n      use_proxy?: boolean\n      /**\n       * Whether beforeSend callback function is used\n       */\n      use_before_send?: boolean\n      /**\n       * Whether initialization fails silently if the SDK is already initialized\n       */\n      silent_multiple_init?: boolean\n      /**\n       * Whether sessions across subdomains for the same site are tracked\n       */\n      track_session_across_subdomains?: boolean\n      /**\n       * Whether resources are tracked\n       */\n      track_resources?: boolean\n      /**\n       * Whether long tasks are tracked\n       */\n      track_long_task?: boolean\n      /**\n       * Whether a secure cross-site session cookie is used\n       */\n      use_cross_site_session_cookie?: boolean\n      /**\n       * Whether a secure session cookie is used\n       */\n      use_secure_session_cookie?: boolean\n      /**\n       * Attribute to be used to name actions\n       */\n      action_name_attribute?: string\n      /**\n       * Whether the allowed tracing origins list is used (deprecated in favor of use_allowed_tracing_urls)\n       */\n      use_allowed_tracing_origins?: boolean\n      /**\n       * Whether the allowed tracing urls list is used\n       */\n      use_allowed_tracing_urls?: boolean\n      /**\n       * A list of selected tracing propagators\n       */\n      selected_tracing_propagators?: ('datadog' | 'b3' | 'b3multi' | 'tracecontext')[]\n      /**\n       * Session replay default privacy level\n       */\n      default_privacy_level?: string\n      /**\n       * Whether the request origins list to ignore when computing the page activity is used\n       */\n      use_excluded_activity_urls?: boolean\n      /**\n       * Whether user frustrations are tracked\n       */\n      track_frustrations?: boolean\n      /**\n       * Whether the RUM views creation is handled manually\n       */\n      track_views_manually?: boolean\n      /**\n       * Whether user actions are tracked (deprecated in favor of track_user_interactions)\n       */\n      track_interactions?: boolean\n      /**\n       * Whether user actions are tracked\n       */\n      track_user_interactions?: boolean\n      /**\n       * Whether console.error logs, uncaught exceptions and network errors are tracked\n       */\n      forward_errors_to_logs?: boolean\n      /**\n       * The console.* tracked\n       */\n      forward_console_logs?: string[] | 'all'\n      /**\n       * The reports from the Reporting API tracked\n       */\n      forward_reports?: string[] | 'all'\n      /**\n       * Whether local encryption is used\n       */\n      use_local_encryption?: boolean\n      /**\n       * View tracking strategy\n       */\n      view_tracking_strategy?:\n        | 'ActivityViewTrackingStrategy'\n        | 'FragmentViewTrackingStrategy'\n        | 'MixedViewTrackingStrategy'\n        | 'NavigationViewTrackingStrategy'\n      /**\n       * Whether RUM events are tracked when the application is in Background\n       */\n      track_background_events?: boolean\n      /**\n       * The period between each Mobile Vital sample (in milliseconds)\n       */\n      mobile_vitals_update_period?: number\n      /**\n       * Whether error monitoring & crash reporting is enabled for the source platform\n       */\n      track_errors?: boolean\n      /**\n       * Whether automatic collection of network requests is enabled\n       */\n      track_network_requests?: boolean\n      /**\n       * Whether tracing features are enabled\n       */\n      use_tracing?: boolean\n      /**\n       * Whether native views are tracked (for cross platform SDKs)\n       */\n      track_native_views?: boolean\n      /**\n       * Whether native error monitoring & crash reporting is enabled (for cross platform SDKs)\n       */\n      track_native_errors?: boolean\n      /**\n       * Whether long task tracking is performed automatically\n       */\n      track_native_long_tasks?: boolean\n      /**\n       * Whether long task tracking is performed automatically for cross platform SDKs\n       */\n      track_cross_platform_long_tasks?: boolean\n      /**\n       * Whether the client has provided a list of first party hosts\n       */\n      use_first_party_hosts?: boolean\n      /**\n       * The type of initialization the SDK used, in case multiple are supported\n       */\n      initialization_type?: string\n      /**\n       * Whether Flutter build and raster time tracking is enabled\n       */\n      track_flutter_performance?: boolean\n      /**\n       * The window duration for batches sent by the SDK (in milliseconds)\n       */\n      batch_size?: number\n      /**\n       * The upload frequency of batches (in milliseconds)\n       */\n      batch_upload_frequency?: number\n      [k: string]: unknown\n    }\n    [k: string]: unknown\n  }\n  [k: string]: unknown\n}\n\n/**\n * Schema of common properties of Telemetry events\n */\nexport interface CommonTelemetryProperties {\n  /**\n   * Internal properties\n   */\n  _dd: {\n    /**\n     * Version of the RUM event format\n     */\n    readonly format_version: 2\n    [k: string]: unknown\n  }\n  /**\n   * Telemetry event type. Should specify telemetry only.\n   */\n  readonly type: 'telemetry'\n  /**\n   * Start of the event in ms from epoch\n   */\n  date: number\n  /**\n   * The SDK generating the telemetry event\n   */\n  service: string\n  /**\n   * The source of this event\n   */\n  readonly source: 'android' | 'ios' | 'browser' | 'flutter' | 'react-native'\n  /**\n   * The version of the SDK generating the telemetry event\n   */\n  version: string\n  /**\n   * Application properties\n   */\n  readonly application?: {\n    /**\n     * UUID of the application\n     */\n    id: string\n    [k: string]: unknown\n  }\n  /**\n   * Session properties\n   */\n  session?: {\n    /**\n     * UUID of the session\n     */\n    id: string\n    [k: string]: unknown\n  }\n  /**\n   * View properties\n   */\n  view?: {\n    /**\n     * UUID of the view\n     */\n    id: string\n    [k: string]: unknown\n  }\n  /**\n   * Action properties\n   */\n  action?: {\n    /**\n     * UUID of the action\n     */\n    id: string\n    [k: string]: unknown\n  }\n  /**\n   * Enabled experimental features\n   */\n  readonly experimental_features?: string[]\n  [k: string]: unknown\n}\n"],"mappings":"AAAA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}