{"ast":null,"code":"import { Observable } from '../tools/observable';\nimport { includes, objectValues } from '../tools/utils';\nimport { addEventListener, addEventListeners } from './addEventListener';\nexport var PageExitReason = {\n  HIDDEN: 'visibility_hidden',\n  UNLOADING: 'before_unload',\n  FROZEN: 'page_frozen'\n};\nexport function createPageExitObservable() {\n  var observable = new Observable(function () {\n    var stopListeners = addEventListeners(window, [\"visibilitychange\" /* VISIBILITY_CHANGE */, \"freeze\" /* FREEZE */], function (event) {\n      if (event.type === \"visibilitychange\" /* VISIBILITY_CHANGE */ && document.visibilityState === 'hidden') {\n        /**\n         * Only event that guarantee to fire on mobile devices when the page transitions to background state\n         * (e.g. when user switches to a different application, goes to homescreen, etc), or is being unloaded.\n         */\n        observable.notify({\n          reason: PageExitReason.HIDDEN\n        });\n      } else if (event.type === \"freeze\" /* FREEZE */) {\n        /**\n         * After transitioning in background a tab can be freezed to preserve resources. (cf: https://developer.chrome.com/blog/page-lifecycle-api)\n         * Allow to collect events happening between hidden and frozen state.\n         */\n        observable.notify({\n          reason: PageExitReason.FROZEN\n        });\n      }\n    }, {\n      capture: true\n    }).stop;\n    /**\n     * Safari does not support yet to send a request during:\n     * - a visibility change during doc unload (cf: https://bugs.webkit.org/show_bug.cgi?id=194897)\n     * - a page hide transition (cf: https://bugs.webkit.org/show_bug.cgi?id=188329)\n     */\n    var stopBeforeUnloadListener = addEventListener(window, \"beforeunload\" /* BEFORE_UNLOAD */, function () {\n      observable.notify({\n        reason: PageExitReason.UNLOADING\n      });\n    }).stop;\n    return function () {\n      stopListeners();\n      stopBeforeUnloadListener();\n    };\n  });\n  return observable;\n}\nexport function isPageExitReason(reason) {\n  return includes(objectValues(PageExitReason), reason);\n}","map":{"version":3,"names":["Observable","includes","objectValues","addEventListener","addEventListeners","PageExitReason","HIDDEN","UNLOADING","FROZEN","createPageExitObservable","observable","stopListeners","window","event","type","document","visibilityState","notify","reason","capture","stop","stopBeforeUnloadListener","isPageExitReason"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-core/src/browser/pageExitObservable.ts"],"sourcesContent":["import { Observable } from '../tools/observable'\nimport { includes, objectValues } from '../tools/utils'\nimport { addEventListener, addEventListeners, DOM_EVENT } from './addEventListener'\n\nexport const PageExitReason = {\n  HIDDEN: 'visibility_hidden',\n  UNLOADING: 'before_unload',\n  FROZEN: 'page_frozen',\n} as const\n\ntype PageExitReason = typeof PageExitReason[keyof typeof PageExitReason]\n\nexport interface PageExitEvent {\n  reason: PageExitReason\n}\n\nexport function createPageExitObservable(): Observable<PageExitEvent> {\n  const observable = new Observable<PageExitEvent>(() => {\n    const { stop: stopListeners } = addEventListeners(\n      window,\n      [DOM_EVENT.VISIBILITY_CHANGE, DOM_EVENT.FREEZE],\n      (event) => {\n        if (event.type === DOM_EVENT.VISIBILITY_CHANGE && document.visibilityState === 'hidden') {\n          /**\n           * Only event that guarantee to fire on mobile devices when the page transitions to background state\n           * (e.g. when user switches to a different application, goes to homescreen, etc), or is being unloaded.\n           */\n          observable.notify({ reason: PageExitReason.HIDDEN })\n        } else if (event.type === DOM_EVENT.FREEZE) {\n          /**\n           * After transitioning in background a tab can be freezed to preserve resources. (cf: https://developer.chrome.com/blog/page-lifecycle-api)\n           * Allow to collect events happening between hidden and frozen state.\n           */\n          observable.notify({ reason: PageExitReason.FROZEN })\n        }\n      },\n      { capture: true }\n    )\n\n    /**\n     * Safari does not support yet to send a request during:\n     * - a visibility change during doc unload (cf: https://bugs.webkit.org/show_bug.cgi?id=194897)\n     * - a page hide transition (cf: https://bugs.webkit.org/show_bug.cgi?id=188329)\n     */\n    const { stop: stopBeforeUnloadListener } = addEventListener(window, DOM_EVENT.BEFORE_UNLOAD, () => {\n      observable.notify({ reason: PageExitReason.UNLOADING })\n    })\n\n    return () => {\n      stopListeners()\n      stopBeforeUnloadListener()\n    }\n  })\n\n  return observable\n}\n\nexport function isPageExitReason(reason: string | undefined): reason is PageExitReason {\n  return includes(objectValues(PageExitReason), reason)\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,qBAAqB;AAChD,SAASC,QAAQ,EAAEC,YAAY,QAAQ,gBAAgB;AACvD,SAASC,gBAAgB,EAAEC,iBAAiB,QAAmB,oBAAoB;AAEnF,OAAO,IAAMC,cAAc,GAAG;EAC5BC,MAAM,EAAE,mBAAmB;EAC3BC,SAAS,EAAE,eAAe;EAC1BC,MAAM,EAAE;CACA;AAQV,OAAM,SAAUC,wBAAwBA,CAAA;EACtC,IAAMC,UAAU,GAAG,IAAIV,UAAU,CAAgB;IACvC,IAAMW,aAAa,GAAKP,iBAAiB,CAC/CQ,MAAM,EACN,mEAA+C,EAC/C,UAACC,KAAK;MACJ,IAAIA,KAAK,CAACC,IAAI,mDAAoCC,QAAQ,CAACC,eAAe,KAAK,QAAQ,EAAE;QACvF;;;;QAIAN,UAAU,CAACO,MAAM,CAAC;UAAEC,MAAM,EAAEb,cAAc,CAACC;QAAM,CAAE,CAAC;OACrD,MAAM,IAAIO,KAAK,CAACC,IAAI,4BAAuB;QAC1C;;;;QAIAJ,UAAU,CAACO,MAAM,CAAC;UAAEC,MAAM,EAAEb,cAAc,CAACG;QAAM,CAAE,CAAC;;IAExD,CAAC,EACD;MAAEW,OAAO,EAAE;IAAI,CAAE,CAClB,CAAAC,IAnB0B;IAqB3B;;;;;IAKQ,IAAMC,wBAAwB,GAAKlB,gBAAgB,CAACS,MAAM,sCAA2B;MAC3FF,UAAU,CAACO,MAAM,CAAC;QAAEC,MAAM,EAAEb,cAAc,CAACE;MAAS,CAAE,CAAC;IACzD,CAAC,CAAC,CAAAa,IAFoC;IAItC,OAAO;MACLT,aAAa,EAAE;MACfU,wBAAwB,EAAE;IAC5B,CAAC;EACH,CAAC,CAAC;EAEF,OAAOX,UAAU;AACnB;AAEA,OAAM,SAAUY,gBAAgBA,CAACJ,MAA0B;EACzD,OAAOjB,QAAQ,CAACC,YAAY,CAACG,cAAc,CAAC,EAAEa,MAAM,CAAC;AACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}