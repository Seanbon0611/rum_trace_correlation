{"ast":null,"code":"import { monitor } from '../tools/monitor';\nimport { getZoneJsOriginalValue } from '../tools/getZoneJsOriginalValue';\n/**\n * Add an event listener to an event target object (Window, Element, mock object...).  This provides\n * a few conveniences compared to using `element.addEventListener` directly:\n *\n * * supports IE11 by: using an option object only if needed and emulating the `once` option\n *\n * * wraps the listener with a `monitor` function\n *\n * * returns a `stop` function to remove the listener\n */\nexport function addEventListener(eventTarget, event, listener, options) {\n  return addEventListeners(eventTarget, [event], listener, options);\n}\n/**\n * Add event listeners to an event target object (Window, Element, mock object...).  This provides\n * a few conveniences compared to using `element.addEventListener` directly:\n *\n * * supports IE11 by: using an option object only if needed and emulating the `once` option\n *\n * * wraps the listener with a `monitor` function\n *\n * * returns a `stop` function to remove the listener\n *\n * * with `once: true`, the listener will be called at most once, even if different events are listened\n */\nexport function addEventListeners(eventTarget, events, listener, _a) {\n  var _b = _a === void 0 ? {} : _a,\n    once = _b.once,\n    capture = _b.capture,\n    passive = _b.passive;\n  var wrappedListener = monitor(once ? function (event) {\n    stop();\n    listener(event);\n  } : listener);\n  var options = passive ? {\n    capture: capture,\n    passive: passive\n  } : capture;\n  var add = getZoneJsOriginalValue(eventTarget, 'addEventListener');\n  events.forEach(function (event) {\n    return add.call(eventTarget, event, wrappedListener, options);\n  });\n  function stop() {\n    var remove = getZoneJsOriginalValue(eventTarget, 'removeEventListener');\n    events.forEach(function (event) {\n      return remove.call(eventTarget, event, wrappedListener, options);\n    });\n  }\n  return {\n    stop: stop\n  };\n}","map":{"version":3,"names":["monitor","getZoneJsOriginalValue","addEventListener","eventTarget","event","listener","options","addEventListeners","events","_a","_b","once","capture","passive","wrappedListener","stop","add","forEach","call","remove"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-core/src/browser/addEventListener.ts"],"sourcesContent":["import { monitor } from '../tools/monitor'\nimport { getZoneJsOriginalValue } from '../tools/getZoneJsOriginalValue'\n\nexport const enum DOM_EVENT {\n  BEFORE_UNLOAD = 'beforeunload',\n  CLICK = 'click',\n  DBL_CLICK = 'dblclick',\n  KEY_DOWN = 'keydown',\n  LOAD = 'load',\n  POP_STATE = 'popstate',\n  SCROLL = 'scroll',\n  TOUCH_START = 'touchstart',\n  TOUCH_END = 'touchend',\n  TOUCH_MOVE = 'touchmove',\n  VISIBILITY_CHANGE = 'visibilitychange',\n  PAGE_SHOW = 'pageshow',\n  FREEZE = 'freeze',\n  RESUME = 'resume',\n  DOM_CONTENT_LOADED = 'DOMContentLoaded',\n  POINTER_DOWN = 'pointerdown',\n  POINTER_UP = 'pointerup',\n  POINTER_CANCEL = 'pointercancel',\n  HASH_CHANGE = 'hashchange',\n  PAGE_HIDE = 'pagehide',\n  MOUSE_DOWN = 'mousedown',\n  MOUSE_UP = 'mouseup',\n  MOUSE_MOVE = 'mousemove',\n  FOCUS = 'focus',\n  BLUR = 'blur',\n  CONTEXT_MENU = 'contextmenu',\n  RESIZE = 'resize',\n  CHANGE = 'change',\n  INPUT = 'input',\n  PLAY = 'play',\n  PAUSE = 'pause',\n  SECURITY_POLICY_VIOLATION = 'securitypolicyviolation',\n  SELECTION_CHANGE = 'selectionchange',\n}\n\ninterface AddEventListenerOptions {\n  once?: boolean\n  capture?: boolean\n  passive?: boolean\n}\n\n/**\n * Add an event listener to an event target object (Window, Element, mock object...).  This provides\n * a few conveniences compared to using `element.addEventListener` directly:\n *\n * * supports IE11 by: using an option object only if needed and emulating the `once` option\n *\n * * wraps the listener with a `monitor` function\n *\n * * returns a `stop` function to remove the listener\n */\nexport function addEventListener<E extends Event>(\n  eventTarget: EventTarget,\n  event: DOM_EVENT,\n  listener: (event: E) => void,\n  options?: AddEventListenerOptions\n) {\n  return addEventListeners(eventTarget, [event], listener, options)\n}\n\n/**\n * Add event listeners to an event target object (Window, Element, mock object...).  This provides\n * a few conveniences compared to using `element.addEventListener` directly:\n *\n * * supports IE11 by: using an option object only if needed and emulating the `once` option\n *\n * * wraps the listener with a `monitor` function\n *\n * * returns a `stop` function to remove the listener\n *\n * * with `once: true`, the listener will be called at most once, even if different events are listened\n */\nexport function addEventListeners<E extends Event>(\n  eventTarget: EventTarget,\n  events: DOM_EVENT[],\n  listener: (event: E) => void,\n  { once, capture, passive }: AddEventListenerOptions = {}\n) {\n  const wrappedListener = monitor(\n    once\n      ? (event: Event) => {\n          stop()\n          listener(event as E)\n        }\n      : (listener as (event: Event) => void)\n  )\n\n  const options = passive ? { capture, passive } : capture\n\n  const add = getZoneJsOriginalValue(eventTarget, 'addEventListener')\n  events.forEach((event) => add.call(eventTarget, event, wrappedListener, options))\n\n  function stop() {\n    const remove = getZoneJsOriginalValue(eventTarget, 'removeEventListener')\n    events.forEach((event) => remove.call(eventTarget, event, wrappedListener, options))\n  }\n\n  return {\n    stop,\n  }\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,sBAAsB,QAAQ,iCAAiC;AA4CxE;;;;;;;;;;AAUA,OAAM,SAAUC,gBAAgBA,CAC9BC,WAAwB,EACxBC,KAAgB,EAChBC,QAA4B,EAC5BC,OAAiC;EAEjC,OAAOC,iBAAiB,CAACJ,WAAW,EAAE,CAACC,KAAK,CAAC,EAAEC,QAAQ,EAAEC,OAAO,CAAC;AACnE;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUC,iBAAiBA,CAC/BJ,WAAwB,EACxBK,MAAmB,EACnBH,QAA4B,EAC5BI,EAAwD;MAAxDC,EAAA,GAAAD,EAAA,cAAsD,EAAE,GAAAA,EAAA;IAAtDE,IAAI,GAAAD,EAAA,CAAAC,IAAA;IAAEC,OAAO,GAAAF,EAAA,CAAAE,OAAA;IAAEC,OAAO,GAAAH,EAAA,CAAAG,OAAA;EAExB,IAAMC,eAAe,GAAGd,OAAO,CAC7BW,IAAI,GACA,UAACP,KAAY;IACXW,IAAI,EAAE;IACNV,QAAQ,CAACD,KAAU,CAAC;EACtB,CAAC,GACAC,QAAmC,CACzC;EAED,IAAMC,OAAO,GAAGO,OAAO,GAAG;IAAED,OAAO,EAAAA,OAAA;IAAEC,OAAO,EAAAA;EAAA,CAAE,GAAGD,OAAO;EAExD,IAAMI,GAAG,GAAGf,sBAAsB,CAACE,WAAW,EAAE,kBAAkB,CAAC;EACnEK,MAAM,CAACS,OAAO,CAAC,UAACb,KAAK;IAAK,OAAAY,GAAG,CAACE,IAAI,CAACf,WAAW,EAAEC,KAAK,EAAEU,eAAe,EAAER,OAAO,CAAC;EAAtD,CAAsD,CAAC;EAEjF,SAASS,IAAIA,CAAA;IACX,IAAMI,MAAM,GAAGlB,sBAAsB,CAACE,WAAW,EAAE,qBAAqB,CAAC;IACzEK,MAAM,CAACS,OAAO,CAAC,UAACb,KAAK;MAAK,OAAAe,MAAM,CAACD,IAAI,CAACf,WAAW,EAAEC,KAAK,EAAEU,eAAe,EAAER,OAAO,CAAC;IAAzD,CAAyD,CAAC;EACtF;EAEA,OAAO;IACLS,IAAI,EAAAA;GACL;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}