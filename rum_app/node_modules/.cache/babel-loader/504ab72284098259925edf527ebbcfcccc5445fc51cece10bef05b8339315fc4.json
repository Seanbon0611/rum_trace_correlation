{"ast":null,"code":"import { timeStampNow } from '../../tools/timeUtils';\nimport { normalizeUrl } from '../../tools/urlPolyfill';\nimport { generateUUID } from '../../tools/utils';\nimport { INTAKE_SITE_AP1, INTAKE_SITE_US1 } from './intakeSites';\nexport var ENDPOINTS = {\n  logs: 'logs',\n  rum: 'rum',\n  sessionReplay: 'session-replay'\n};\nvar INTAKE_TRACKS = {\n  logs: 'logs',\n  rum: 'rum',\n  sessionReplay: 'replay'\n};\nexport function createEndpointBuilder(initConfiguration, endpointType, configurationTags) {\n  var buildUrlWithParameters = createEndpointUrlWithParametersBuilder(initConfiguration, endpointType);\n  return {\n    build: function (api, retry) {\n      var parameters = buildEndpointParameters(initConfiguration, endpointType, configurationTags, api, retry);\n      return buildUrlWithParameters(parameters);\n    },\n    urlPrefix: buildUrlWithParameters(''),\n    endpointType: endpointType\n  };\n}\n/**\n * Create a function used to build a full endpoint url from provided parameters. The goal of this\n * function is to pre-compute some parts of the URL to avoid re-computing everything on every\n * request, as only parameters are changing.\n */\nfunction createEndpointUrlWithParametersBuilder(initConfiguration, endpointType) {\n  var path = \"/api/v2/\".concat(INTAKE_TRACKS[endpointType]);\n  var proxy = initConfiguration.proxy,\n    proxyUrl = initConfiguration.proxyUrl;\n  if (proxy) {\n    var normalizedProxyUrl_1 = normalizeUrl(proxy);\n    return function (parameters) {\n      return \"\".concat(normalizedProxyUrl_1, \"?ddforward=\").concat(encodeURIComponent(\"\".concat(path, \"?\").concat(parameters)));\n    };\n  }\n  var host = buildEndpointHost(initConfiguration, endpointType);\n  if (proxy === undefined && proxyUrl) {\n    // TODO: remove this in a future major.\n    var normalizedProxyUrl_2 = normalizeUrl(proxyUrl);\n    return function (parameters) {\n      return \"\".concat(normalizedProxyUrl_2, \"?ddforward=\").concat(encodeURIComponent(\"https://\".concat(host).concat(path, \"?\").concat(parameters)));\n    };\n  }\n  return function (parameters) {\n    return \"https://\".concat(host).concat(path, \"?\").concat(parameters);\n  };\n}\nfunction buildEndpointHost(initConfiguration, endpointType) {\n  var _a = initConfiguration.site,\n    site = _a === void 0 ? INTAKE_SITE_US1 : _a,\n    internalAnalyticsSubdomain = initConfiguration.internalAnalyticsSubdomain;\n  if (internalAnalyticsSubdomain && site === INTAKE_SITE_US1) {\n    return \"\".concat(internalAnalyticsSubdomain, \".\").concat(INTAKE_SITE_US1);\n  }\n  var domainParts = site.split('.');\n  var extension = domainParts.pop();\n  var subdomain = site !== INTAKE_SITE_AP1 ? \"\".concat(ENDPOINTS[endpointType], \".\") : '';\n  return \"\".concat(subdomain, \"browser-intake-\").concat(domainParts.join('-'), \".\").concat(extension);\n}\n/**\n * Build parameters to be used for an intake request. Parameters should be re-built for each\n * request, as they change randomly.\n */\nfunction buildEndpointParameters(_a, endpointType, configurationTags, api, retry) {\n  var clientToken = _a.clientToken,\n    internalAnalyticsSubdomain = _a.internalAnalyticsSubdomain;\n  var tags = [\"sdk_version:\".concat(\"4.34.1\"), \"api:\".concat(api)].concat(configurationTags);\n  if (retry) {\n    tags.push(\"retry_count:\".concat(retry.count), \"retry_after:\".concat(retry.lastFailureStatus));\n  }\n  var parameters = ['ddsource=browser', \"ddtags=\".concat(encodeURIComponent(tags.join(','))), \"dd-api-key=\".concat(clientToken), \"dd-evp-origin-version=\".concat(encodeURIComponent(\"4.34.1\")), 'dd-evp-origin=browser', \"dd-request-id=\".concat(generateUUID())];\n  if (endpointType === 'rum') {\n    parameters.push(\"batch_time=\".concat(timeStampNow()));\n  }\n  if (internalAnalyticsSubdomain) {\n    parameters.reverse();\n  }\n  return parameters.join('&');\n}","map":{"version":3,"names":["timeStampNow","normalizeUrl","generateUUID","INTAKE_SITE_AP1","INTAKE_SITE_US1","ENDPOINTS","logs","rum","sessionReplay","INTAKE_TRACKS","createEndpointBuilder","initConfiguration","endpointType","configurationTags","buildUrlWithParameters","createEndpointUrlWithParametersBuilder","build","api","retry","parameters","buildEndpointParameters","urlPrefix","path","concat","proxy","proxyUrl","normalizedProxyUrl_1","encodeURIComponent","host","buildEndpointHost","undefined","normalizedProxyUrl_2","_a","site","internalAnalyticsSubdomain","domainParts","split","extension","pop","subdomain","join","clientToken","tags","push","count","lastFailureStatus","reverse"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-core/src/domain/configuration/endpointBuilder.ts"],"sourcesContent":["import type { RetryInfo } from '../../transport'\nimport { timeStampNow } from '../../tools/timeUtils'\nimport { normalizeUrl } from '../../tools/urlPolyfill'\nimport { generateUUID } from '../../tools/utils'\nimport type { InitConfiguration } from './configuration'\nimport { INTAKE_SITE_AP1, INTAKE_SITE_US1 } from './intakeSites'\n\n// replaced at build time\ndeclare const __BUILD_ENV__SDK_VERSION__: string\n\nexport const ENDPOINTS = {\n  logs: 'logs',\n  rum: 'rum',\n  sessionReplay: 'session-replay',\n} as const\n\nconst INTAKE_TRACKS = {\n  logs: 'logs',\n  rum: 'rum',\n  sessionReplay: 'replay',\n}\n\nexport type EndpointType = keyof typeof ENDPOINTS\n\nexport type EndpointBuilder = ReturnType<typeof createEndpointBuilder>\n\nexport function createEndpointBuilder(\n  initConfiguration: InitConfiguration,\n  endpointType: EndpointType,\n  configurationTags: string[]\n) {\n  const buildUrlWithParameters = createEndpointUrlWithParametersBuilder(initConfiguration, endpointType)\n\n  return {\n    build(api: 'xhr' | 'fetch' | 'beacon', retry?: RetryInfo) {\n      const parameters = buildEndpointParameters(initConfiguration, endpointType, configurationTags, api, retry)\n      return buildUrlWithParameters(parameters)\n    },\n    urlPrefix: buildUrlWithParameters(''),\n    endpointType,\n  }\n}\n\n/**\n * Create a function used to build a full endpoint url from provided parameters. The goal of this\n * function is to pre-compute some parts of the URL to avoid re-computing everything on every\n * request, as only parameters are changing.\n */\nfunction createEndpointUrlWithParametersBuilder(\n  initConfiguration: InitConfiguration,\n  endpointType: EndpointType\n): (parameters: string) => string {\n  const path = `/api/v2/${INTAKE_TRACKS[endpointType]}`\n\n  const { proxy, proxyUrl } = initConfiguration\n  if (proxy) {\n    const normalizedProxyUrl = normalizeUrl(proxy)\n    return (parameters) => `${normalizedProxyUrl}?ddforward=${encodeURIComponent(`${path}?${parameters}`)}`\n  }\n\n  const host = buildEndpointHost(initConfiguration, endpointType)\n\n  if (proxy === undefined && proxyUrl) {\n    // TODO: remove this in a future major.\n    const normalizedProxyUrl = normalizeUrl(proxyUrl)\n    return (parameters) =>\n      `${normalizedProxyUrl}?ddforward=${encodeURIComponent(`https://${host}${path}?${parameters}`)}`\n  }\n\n  return (parameters) => `https://${host}${path}?${parameters}`\n}\n\nfunction buildEndpointHost(initConfiguration: InitConfiguration, endpointType: EndpointType) {\n  const { site = INTAKE_SITE_US1, internalAnalyticsSubdomain } = initConfiguration\n\n  if (internalAnalyticsSubdomain && site === INTAKE_SITE_US1) {\n    return `${internalAnalyticsSubdomain}.${INTAKE_SITE_US1}`\n  }\n\n  const domainParts = site.split('.')\n  const extension = domainParts.pop()\n  const subdomain = site !== INTAKE_SITE_AP1 ? `${ENDPOINTS[endpointType]}.` : ''\n  return `${subdomain}browser-intake-${domainParts.join('-')}.${extension!}`\n}\n\n/**\n * Build parameters to be used for an intake request. Parameters should be re-built for each\n * request, as they change randomly.\n */\nfunction buildEndpointParameters(\n  { clientToken, internalAnalyticsSubdomain }: InitConfiguration,\n  endpointType: EndpointType,\n  configurationTags: string[],\n  api: 'xhr' | 'fetch' | 'beacon',\n  retry: RetryInfo | undefined\n) {\n  const tags = [`sdk_version:${__BUILD_ENV__SDK_VERSION__}`, `api:${api}`].concat(configurationTags)\n  if (retry) {\n    tags.push(`retry_count:${retry.count}`, `retry_after:${retry.lastFailureStatus}`)\n  }\n  const parameters = [\n    'ddsource=browser',\n    `ddtags=${encodeURIComponent(tags.join(','))}`,\n    `dd-api-key=${clientToken}`,\n    `dd-evp-origin-version=${encodeURIComponent(__BUILD_ENV__SDK_VERSION__)}`,\n    'dd-evp-origin=browser',\n    `dd-request-id=${generateUUID()}`,\n  ]\n\n  if (endpointType === 'rum') {\n    parameters.push(`batch_time=${timeStampNow()}`)\n  }\n  if (internalAnalyticsSubdomain) {\n    parameters.reverse()\n  }\n\n  return parameters.join('&')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}