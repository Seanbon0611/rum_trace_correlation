{"ast":null,"code":"import { combine, generateUUID, toServerDuration, relativeToClocks, assign, isNumber, isExperimentalFeatureEnabled } from '@datadog/browser-core';\nimport { matchRequestTiming } from './matchRequestTiming';\nimport { computePerformanceResourceDetails, computePerformanceResourceDuration, computeResourceKind, computeSize, isRequestKind } from './resourceUtils';\nexport function startResourceCollection(lifeCycle, configuration, sessionManager, pageStateHistory) {\n  lifeCycle.subscribe(6 /* REQUEST_COMPLETED */, function (request) {\n    lifeCycle.notify(10 /* RAW_RUM_EVENT_COLLECTED */, processRequest(request, configuration, sessionManager, pageStateHistory));\n  });\n  lifeCycle.subscribe(0 /* PERFORMANCE_ENTRIES_COLLECTED */, function (entries) {\n    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n      var entry = entries_1[_i];\n      if (entry.entryType === 'resource' && !isRequestKind(entry)) {\n        lifeCycle.notify(10 /* RAW_RUM_EVENT_COLLECTED */, processResourceEntry(entry, configuration, sessionManager, pageStateHistory));\n      }\n    }\n  });\n}\nfunction processRequest(request, configuration, sessionManager, pageStateHistory) {\n  var _a;\n  var type = request.type === \"xhr\" /* XHR */ ? \"xhr\" /* XHR */ : \"fetch\" /* FETCH */;\n  var matchingTiming = matchRequestTiming(request);\n  var startClocks = matchingTiming ? relativeToClocks(matchingTiming.startTime) : request.startClocks;\n  var correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetrics(matchingTiming) : undefined;\n  var tracingInfo = computeRequestTracingInfo(request, configuration);\n  var indexingInfo = computeIndexingInfo(sessionManager, startClocks);\n  var duration = toServerDuration(request.duration);\n  var durationOverrideInfo = computeDurationOverrideInfo(duration, correspondingTimingOverrides === null || correspondingTimingOverrides === void 0 ? void 0 : correspondingTimingOverrides.resource.duration);\n  var pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, (_a = matchingTiming === null || matchingTiming === void 0 ? void 0 : matchingTiming.duration) !== null && _a !== void 0 ? _a : request.duration);\n  var resourceEvent = combine({\n    date: startClocks.timeStamp,\n    resource: {\n      id: generateUUID(),\n      type: type,\n      duration: duration,\n      method: request.method,\n      status_code: request.status,\n      url: request.url\n    },\n    type: \"resource\" /* RESOURCE */\n  }, tracingInfo, correspondingTimingOverrides, indexingInfo, durationOverrideInfo, pageStateInfo);\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: matchingTiming && toPerformanceEntryRepresentation(matchingTiming),\n      xhr: request.xhr,\n      response: request.response,\n      requestInput: request.input,\n      requestInit: request.init,\n      error: request.error\n    }\n  };\n}\nfunction processResourceEntry(entry, configuration, sessionManager, pageStateHistory) {\n  var type = computeResourceKind(entry);\n  var entryMetrics = computePerformanceEntryMetrics(entry);\n  var startClocks = relativeToClocks(entry.startTime);\n  var tracingInfo = computeEntryTracingInfo(entry, configuration);\n  var indexingInfo = computeIndexingInfo(sessionManager, startClocks);\n  var pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, entry.duration);\n  var resourceEvent = combine({\n    date: startClocks.timeStamp,\n    resource: {\n      id: generateUUID(),\n      type: type,\n      url: entry.name\n    },\n    type: \"resource\" /* RESOURCE */\n  }, tracingInfo, entryMetrics, indexingInfo, pageStateInfo);\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: toPerformanceEntryRepresentation(entry)\n    }\n  };\n}\nfunction computePerformanceEntryMetrics(timing) {\n  return {\n    resource: assign({\n      duration: computePerformanceResourceDuration(timing),\n      size: computeSize(timing)\n    }, computePerformanceResourceDetails(timing))\n  };\n}\nfunction computeRequestTracingInfo(request, configuration) {\n  var hasBeenTraced = request.traceSampled && request.traceId && request.spanId;\n  if (!hasBeenTraced) {\n    return undefined;\n  }\n  return {\n    _dd: {\n      span_id: request.spanId.toDecimalString(),\n      trace_id: request.traceId.toDecimalString(),\n      rule_psr: getRulePsr(configuration)\n    }\n  };\n}\nfunction computeEntryTracingInfo(entry, configuration) {\n  var hasBeenTraced = entry.traceId;\n  if (!hasBeenTraced) {\n    return undefined;\n  }\n  return {\n    _dd: {\n      trace_id: entry.traceId,\n      rule_psr: getRulePsr(configuration)\n    }\n  };\n}\nfunction computeDurationOverrideInfo(computedDuration, performanceEntryDuration) {\n  if (!isExperimentalFeatureEnabled('resource_durations')) {\n    return;\n  }\n  return {\n    _dd: {\n      computed_duration: computedDuration,\n      performance_entry_duration: performanceEntryDuration,\n      override_duration_diff: performanceEntryDuration ? computedDuration - performanceEntryDuration : undefined\n    }\n  };\n}\n// TODO next major: use directly PerformanceEntry type in domain context\nfunction toPerformanceEntryRepresentation(entry) {\n  return entry;\n}\n/**\n * @returns number between 0 and 1 which represents trace sample rate\n */\nfunction getRulePsr(configuration) {\n  return isNumber(configuration.traceSampleRate) ? configuration.traceSampleRate / 100 : undefined;\n}\nfunction computeIndexingInfo(sessionManager, resourceStart) {\n  var session = sessionManager.findTrackedSession(resourceStart.relative);\n  return {\n    _dd: {\n      discarded: !session || !session.resourceAllowed\n    }\n  };\n}\nfunction computePageStateInfo(pageStateHistory, startClocks, duration) {\n  if (!isExperimentalFeatureEnabled('resource_page_states')) {\n    return;\n  }\n  return {\n    _dd: {\n      page_states: pageStateHistory.findAll(startClocks.relative, duration),\n      page_was_discarded: String(document.wasDiscarded)\n    }\n  };\n}","map":{"version":3,"names":["combine","generateUUID","toServerDuration","relativeToClocks","assign","isNumber","isExperimentalFeatureEnabled","matchRequestTiming","computePerformanceResourceDetails","computePerformanceResourceDuration","computeResourceKind","computeSize","isRequestKind","startResourceCollection","lifeCycle","configuration","sessionManager","pageStateHistory","subscribe","request","notify","processRequest","entries","_i","entries_1","length","entry","entryType","processResourceEntry","type","matchingTiming","startClocks","startTime","correspondingTimingOverrides","computePerformanceEntryMetrics","undefined","tracingInfo","computeRequestTracingInfo","indexingInfo","computeIndexingInfo","duration","durationOverrideInfo","computeDurationOverrideInfo","resource","pageStateInfo","computePageStateInfo","_a","resourceEvent","date","timeStamp","id","method","status_code","status","url","relative","rawRumEvent","domainContext","performanceEntry","toPerformanceEntryRepresentation","xhr","response","requestInput","input","requestInit","init","error","entryMetrics","computeEntryTracingInfo","name","timing","size","hasBeenTraced","traceSampled","traceId","spanId","_dd","span_id","toDecimalString","trace_id","rule_psr","getRulePsr","computedDuration","performanceEntryDuration","computed_duration","performance_entry_duration","override_duration_diff","traceSampleRate","resourceStart","session","findTrackedSession","discarded","resourceAllowed","page_states","findAll","page_was_discarded","String","document","wasDiscarded"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-rum-core/src/domain/rumEventsCollection/resource/resourceCollection.ts"],"sourcesContent":["import {\n  combine,\n  generateUUID,\n  RequestType,\n  ResourceType,\n  toServerDuration,\n  relativeToClocks,\n  assign,\n  isNumber,\n  isExperimentalFeatureEnabled,\n} from '@datadog/browser-core'\nimport type { ClocksState, ServerDuration, Duration } from '@datadog/browser-core'\nimport type { RumConfiguration } from '../../configuration'\nimport type { RumPerformanceEntry, RumPerformanceResourceTiming } from '../../../browser/performanceCollection'\nimport type {\n  PerformanceEntryRepresentation,\n  RumXhrResourceEventDomainContext,\n  RumFetchResourceEventDomainContext,\n} from '../../../domainContext.types'\nimport type { RawRumResourceEvent } from '../../../rawRumEvent.types'\nimport { RumEventType } from '../../../rawRumEvent.types'\nimport type { LifeCycle, RawRumEventCollectedData } from '../../lifeCycle'\nimport { LifeCycleEventType } from '../../lifeCycle'\nimport type { RequestCompleteEvent } from '../../requestCollection'\nimport type { RumSessionManager } from '../../rumSessionManager'\nimport type { PageStateHistory } from '../../contexts/pageStateHistory'\nimport { matchRequestTiming } from './matchRequestTiming'\nimport {\n  computePerformanceResourceDetails,\n  computePerformanceResourceDuration,\n  computeResourceKind,\n  computeSize,\n  isRequestKind,\n} from './resourceUtils'\n\nexport function startResourceCollection(\n  lifeCycle: LifeCycle,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  pageStateHistory: PageStateHistory\n) {\n  lifeCycle.subscribe(LifeCycleEventType.REQUEST_COMPLETED, (request: RequestCompleteEvent) => {\n    lifeCycle.notify(\n      LifeCycleEventType.RAW_RUM_EVENT_COLLECTED,\n      processRequest(request, configuration, sessionManager, pageStateHistory)\n    )\n  })\n\n  lifeCycle.subscribe(LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED, (entries) => {\n    for (const entry of entries) {\n      if (entry.entryType === 'resource' && !isRequestKind(entry)) {\n        lifeCycle.notify(\n          LifeCycleEventType.RAW_RUM_EVENT_COLLECTED,\n          processResourceEntry(entry, configuration, sessionManager, pageStateHistory)\n        )\n      }\n    }\n  })\n}\n\nfunction processRequest(\n  request: RequestCompleteEvent,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  pageStateHistory: PageStateHistory\n): RawRumEventCollectedData<RawRumResourceEvent> {\n  const type = request.type === RequestType.XHR ? ResourceType.XHR : ResourceType.FETCH\n\n  const matchingTiming = matchRequestTiming(request)\n  const startClocks = matchingTiming ? relativeToClocks(matchingTiming.startTime) : request.startClocks\n  const correspondingTimingOverrides = matchingTiming ? computePerformanceEntryMetrics(matchingTiming) : undefined\n\n  const tracingInfo = computeRequestTracingInfo(request, configuration)\n  const indexingInfo = computeIndexingInfo(sessionManager, startClocks)\n\n  const duration = toServerDuration(request.duration)\n  const durationOverrideInfo = computeDurationOverrideInfo(duration, correspondingTimingOverrides?.resource.duration)\n  const pageStateInfo = computePageStateInfo(\n    pageStateHistory,\n    startClocks,\n    matchingTiming?.duration ?? request.duration\n  )\n\n  const resourceEvent = combine(\n    {\n      date: startClocks.timeStamp,\n      resource: {\n        id: generateUUID(),\n        type,\n        duration,\n        method: request.method,\n        status_code: request.status,\n        url: request.url,\n      },\n      type: RumEventType.RESOURCE as const,\n    },\n    tracingInfo,\n    correspondingTimingOverrides,\n    indexingInfo,\n    durationOverrideInfo,\n    pageStateInfo\n  )\n\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: matchingTiming && toPerformanceEntryRepresentation(matchingTiming),\n      xhr: request.xhr,\n      response: request.response,\n      requestInput: request.input,\n      requestInit: request.init,\n      error: request.error,\n    } as RumFetchResourceEventDomainContext | RumXhrResourceEventDomainContext,\n  }\n}\n\nfunction processResourceEntry(\n  entry: RumPerformanceResourceTiming,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  pageStateHistory: PageStateHistory\n): RawRumEventCollectedData<RawRumResourceEvent> {\n  const type = computeResourceKind(entry)\n  const entryMetrics = computePerformanceEntryMetrics(entry)\n  const startClocks = relativeToClocks(entry.startTime)\n\n  const tracingInfo = computeEntryTracingInfo(entry, configuration)\n  const indexingInfo = computeIndexingInfo(sessionManager, startClocks)\n  const pageStateInfo = computePageStateInfo(pageStateHistory, startClocks, entry.duration)\n\n  const resourceEvent = combine(\n    {\n      date: startClocks.timeStamp,\n      resource: {\n        id: generateUUID(),\n        type,\n        url: entry.name,\n      },\n      type: RumEventType.RESOURCE as const,\n    },\n    tracingInfo,\n    entryMetrics,\n    indexingInfo,\n    pageStateInfo\n  )\n  return {\n    startTime: startClocks.relative,\n    rawRumEvent: resourceEvent,\n    domainContext: {\n      performanceEntry: toPerformanceEntryRepresentation(entry),\n    },\n  }\n}\n\nfunction computePerformanceEntryMetrics(timing: RumPerformanceResourceTiming) {\n  return {\n    resource: assign(\n      {\n        duration: computePerformanceResourceDuration(timing),\n        size: computeSize(timing),\n      },\n      computePerformanceResourceDetails(timing)\n    ),\n  }\n}\n\nfunction computeRequestTracingInfo(request: RequestCompleteEvent, configuration: RumConfiguration) {\n  const hasBeenTraced = request.traceSampled && request.traceId && request.spanId\n  if (!hasBeenTraced) {\n    return undefined\n  }\n  return {\n    _dd: {\n      span_id: request.spanId!.toDecimalString(),\n      trace_id: request.traceId!.toDecimalString(),\n      rule_psr: getRulePsr(configuration),\n    },\n  }\n}\n\nfunction computeEntryTracingInfo(entry: RumPerformanceResourceTiming, configuration: RumConfiguration) {\n  const hasBeenTraced = entry.traceId\n  if (!hasBeenTraced) {\n    return undefined\n  }\n  return {\n    _dd: {\n      trace_id: entry.traceId,\n      rule_psr: getRulePsr(configuration),\n    },\n  }\n}\n\nfunction computeDurationOverrideInfo(\n  computedDuration: ServerDuration,\n  performanceEntryDuration: ServerDuration | undefined\n) {\n  if (!isExperimentalFeatureEnabled('resource_durations')) {\n    return\n  }\n\n  return {\n    _dd: {\n      computed_duration: computedDuration,\n      performance_entry_duration: performanceEntryDuration,\n      override_duration_diff: performanceEntryDuration ? computedDuration - performanceEntryDuration : undefined,\n    },\n  }\n}\n\n// TODO next major: use directly PerformanceEntry type in domain context\nfunction toPerformanceEntryRepresentation(entry: RumPerformanceEntry): PerformanceEntryRepresentation {\n  return entry as PerformanceEntryRepresentation\n}\n\n/**\n * @returns number between 0 and 1 which represents trace sample rate\n */\nfunction getRulePsr(configuration: RumConfiguration) {\n  return isNumber(configuration.traceSampleRate) ? configuration.traceSampleRate / 100 : undefined\n}\n\nfunction computeIndexingInfo(sessionManager: RumSessionManager, resourceStart: ClocksState) {\n  const session = sessionManager.findTrackedSession(resourceStart.relative)\n  return {\n    _dd: {\n      discarded: !session || !session.resourceAllowed,\n    },\n  }\n}\n\nfunction computePageStateInfo(pageStateHistory: PageStateHistory, startClocks: ClocksState, duration: Duration) {\n  if (!isExperimentalFeatureEnabled('resource_page_states')) {\n    return\n  }\n\n  return {\n    _dd: {\n      page_states: pageStateHistory.findAll(startClocks.relative, duration),\n      page_was_discarded: String((document as any).wasDiscarded),\n    },\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}