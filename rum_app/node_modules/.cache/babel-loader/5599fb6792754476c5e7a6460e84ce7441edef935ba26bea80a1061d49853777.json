{"ast":null,"code":"import { computeStackTrace } from '../tracekit';\nimport { createHandlingStack, formatErrorMessage, toStackTraceString } from '../../tools/error';\nimport { mergeObservables, Observable } from '../../tools/observable';\nimport { find, jsonStringify } from '../../tools/utils';\nimport { ConsoleApiName } from '../../tools/display';\nimport { callMonitored } from '../../tools/monitor';\nvar consoleObservablesByApi = {};\nexport function initConsoleObservable(apis) {\n  var consoleObservables = apis.map(function (api) {\n    if (!consoleObservablesByApi[api]) {\n      consoleObservablesByApi[api] = createConsoleObservable(api);\n    }\n    return consoleObservablesByApi[api];\n  });\n  return mergeObservables.apply(void 0, consoleObservables);\n}\n/* eslint-disable no-console */\nfunction createConsoleObservable(api) {\n  var observable = new Observable(function () {\n    var originalConsoleApi = console[api];\n    console[api] = function () {\n      var params = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        params[_i] = arguments[_i];\n      }\n      originalConsoleApi.apply(console, params);\n      var handlingStack = createHandlingStack();\n      callMonitored(function () {\n        observable.notify(buildConsoleLog(params, api, handlingStack));\n      });\n    };\n    return function () {\n      console[api] = originalConsoleApi;\n    };\n  });\n  return observable;\n}\nfunction buildConsoleLog(params, api, handlingStack) {\n  // Todo: remove console error prefix in the next major version\n  var message = params.map(function (param) {\n    return formatConsoleParameters(param);\n  }).join(' ');\n  var stack;\n  if (api === ConsoleApiName.error) {\n    var firstErrorParam = find(params, function (param) {\n      return param instanceof Error;\n    });\n    stack = firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined;\n    message = \"console error: \".concat(message);\n  }\n  return {\n    api: api,\n    message: message,\n    stack: stack,\n    handlingStack: handlingStack\n  };\n}\nfunction formatConsoleParameters(param) {\n  if (typeof param === 'string') {\n    return param;\n  }\n  if (param instanceof Error) {\n    return formatErrorMessage(computeStackTrace(param));\n  }\n  return jsonStringify(param, undefined, 2);\n}","map":{"version":3,"names":["computeStackTrace","createHandlingStack","formatErrorMessage","toStackTraceString","mergeObservables","Observable","find","jsonStringify","ConsoleApiName","callMonitored","consoleObservablesByApi","initConsoleObservable","apis","consoleObservables","map","api","createConsoleObservable","apply","observable","originalConsoleApi","console","params","_i","arguments","length","handlingStack","notify","buildConsoleLog","message","param","formatConsoleParameters","join","stack","error","firstErrorParam","Error","undefined","concat"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-core/src/domain/console/consoleObservable.ts"],"sourcesContent":["import { computeStackTrace } from '../tracekit'\nimport { createHandlingStack, formatErrorMessage, toStackTraceString } from '../../tools/error'\nimport { mergeObservables, Observable } from '../../tools/observable'\nimport { find, jsonStringify } from '../../tools/utils'\nimport { ConsoleApiName } from '../../tools/display'\nimport { callMonitored } from '../../tools/monitor'\n\nexport interface ConsoleLog {\n  message: string\n  api: ConsoleApiName\n  stack?: string\n  handlingStack?: string\n}\n\nconst consoleObservablesByApi: { [k in ConsoleApiName]?: Observable<ConsoleLog> } = {}\n\nexport function initConsoleObservable(apis: ConsoleApiName[]) {\n  const consoleObservables = apis.map((api) => {\n    if (!consoleObservablesByApi[api]) {\n      consoleObservablesByApi[api] = createConsoleObservable(api)\n    }\n    return consoleObservablesByApi[api]!\n  })\n\n  return mergeObservables<ConsoleLog>(...consoleObservables)\n}\n\n/* eslint-disable no-console */\nfunction createConsoleObservable(api: ConsoleApiName) {\n  const observable = new Observable<ConsoleLog>(() => {\n    const originalConsoleApi = console[api]\n\n    console[api] = (...params: unknown[]) => {\n      originalConsoleApi.apply(console, params)\n      const handlingStack = createHandlingStack()\n\n      callMonitored(() => {\n        observable.notify(buildConsoleLog(params, api, handlingStack))\n      })\n    }\n\n    return () => {\n      console[api] = originalConsoleApi\n    }\n  })\n\n  return observable\n}\n\nfunction buildConsoleLog(params: unknown[], api: ConsoleApiName, handlingStack: string): ConsoleLog {\n  // Todo: remove console error prefix in the next major version\n  let message = params.map((param) => formatConsoleParameters(param)).join(' ')\n  let stack\n\n  if (api === ConsoleApiName.error) {\n    const firstErrorParam = find(params, (param: unknown): param is Error => param instanceof Error)\n    stack = firstErrorParam ? toStackTraceString(computeStackTrace(firstErrorParam)) : undefined\n    message = `console error: ${message}`\n  }\n\n  return {\n    api,\n    message,\n    stack,\n    handlingStack,\n  }\n}\n\nfunction formatConsoleParameters(param: unknown) {\n  if (typeof param === 'string') {\n    return param\n  }\n  if (param instanceof Error) {\n    return formatErrorMessage(computeStackTrace(param))\n  }\n  return jsonStringify(param, undefined, 2)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,aAAa;AAC/C,SAASC,mBAAmB,EAAEC,kBAAkB,EAAEC,kBAAkB,QAAQ,mBAAmB;AAC/F,SAASC,gBAAgB,EAAEC,UAAU,QAAQ,wBAAwB;AACrE,SAASC,IAAI,EAAEC,aAAa,QAAQ,mBAAmB;AACvD,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,aAAa,QAAQ,qBAAqB;AASnD,IAAMC,uBAAuB,GAAuD,EAAE;AAEtF,OAAM,SAAUC,qBAAqBA,CAACC,IAAsB;EAC1D,IAAMC,kBAAkB,GAAGD,IAAI,CAACE,GAAG,CAAC,UAACC,GAAG;IACtC,IAAI,CAACL,uBAAuB,CAACK,GAAG,CAAC,EAAE;MACjCL,uBAAuB,CAACK,GAAG,CAAC,GAAGC,uBAAuB,CAACD,GAAG,CAAC;;IAE7D,OAAOL,uBAAuB,CAACK,GAAG,CAAE;EACtC,CAAC,CAAC;EAEF,OAAOX,gBAAgB,CAAAa,KAAA,SAAgBJ,kBAAkB;AAC3D;AAEA;AACA,SAASG,uBAAuBA,CAACD,GAAmB;EAClD,IAAMG,UAAU,GAAG,IAAIb,UAAU,CAAa;IAC5C,IAAMc,kBAAkB,GAAGC,OAAO,CAACL,GAAG,CAAC;IAEvCK,OAAO,CAACL,GAAG,CAAC,GAAG;MAAC,IAAAM,MAAA;WAAA,IAAAC,EAAA,IAAoB,EAApBA,EAAA,GAAAC,SAAA,CAAAC,MAAoB,EAApBF,EAAA,EAAoB;QAApBD,MAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MACdH,kBAAkB,CAACF,KAAK,CAACG,OAAO,EAAEC,MAAM,CAAC;MACzC,IAAMI,aAAa,GAAGxB,mBAAmB,EAAE;MAE3CQ,aAAa,CAAC;QACZS,UAAU,CAACQ,MAAM,CAACC,eAAe,CAACN,MAAM,EAAEN,GAAG,EAAEU,aAAa,CAAC,CAAC;MAChE,CAAC,CAAC;IACJ,CAAC;IAED,OAAO;MACLL,OAAO,CAACL,GAAG,CAAC,GAAGI,kBAAkB;IACnC,CAAC;EACH,CAAC,CAAC;EAEF,OAAOD,UAAU;AACnB;AAEA,SAASS,eAAeA,CAACN,MAAiB,EAAEN,GAAmB,EAAEU,aAAqB;EACpF;EACA,IAAIG,OAAO,GAAGP,MAAM,CAACP,GAAG,CAAC,UAACe,KAAK;IAAK,OAAAC,uBAAuB,CAACD,KAAK,CAAC;EAA9B,CAA8B,CAAC,CAACE,IAAI,CAAC,GAAG,CAAC;EAC7E,IAAIC,KAAK;EAET,IAAIjB,GAAG,KAAKP,cAAc,CAACyB,KAAK,EAAE;IAChC,IAAMC,eAAe,GAAG5B,IAAI,CAACe,MAAM,EAAE,UAACQ,KAAc;MAAqB,OAAAA,KAAK,YAAYM,KAAK;IAAtB,CAAsB,CAAC;IAChGH,KAAK,GAAGE,eAAe,GAAG/B,kBAAkB,CAACH,iBAAiB,CAACkC,eAAe,CAAC,CAAC,GAAGE,SAAS;IAC5FR,OAAO,GAAG,kBAAAS,MAAA,CAAkBT,OAAO,CAAE;;EAGvC,OAAO;IACLb,GAAG,EAAAA,GAAA;IACHa,OAAO,EAAAA,OAAA;IACPI,KAAK,EAAAA,KAAA;IACLP,aAAa,EAAAA;GACd;AACH;AAEA,SAASK,uBAAuBA,CAACD,KAAc;EAC7C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK;;EAEd,IAAIA,KAAK,YAAYM,KAAK,EAAE;IAC1B,OAAOjC,kBAAkB,CAACF,iBAAiB,CAAC6B,KAAK,CAAC,CAAC;;EAErD,OAAOtB,aAAa,CAACsB,KAAK,EAAEO,SAAS,EAAE,CAAC,CAAC;AAC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}