{"ast":null,"code":"var LifeCycle = /** @class */function () {\n  function LifeCycle() {\n    this.callbacks = {};\n  }\n  LifeCycle.prototype.notify = function (eventType, data) {\n    var eventCallbacks = this.callbacks[eventType];\n    if (eventCallbacks) {\n      eventCallbacks.forEach(function (callback) {\n        return callback(data);\n      });\n    }\n  };\n  LifeCycle.prototype.subscribe = function (eventType, callback) {\n    var _this = this;\n    if (!this.callbacks[eventType]) {\n      this.callbacks[eventType] = [];\n    }\n    this.callbacks[eventType].push(callback);\n    return {\n      unsubscribe: function () {\n        _this.callbacks[eventType] = _this.callbacks[eventType].filter(function (other) {\n          return callback !== other;\n        });\n      }\n    };\n  };\n  return LifeCycle;\n}();\nexport { LifeCycle };","map":{"version":3,"names":["LifeCycle","callbacks","prototype","notify","eventType","data","eventCallbacks","forEach","callback","subscribe","_this","push","unsubscribe","filter","other"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-rum-core/src/domain/lifeCycle.ts"],"sourcesContent":["import type { Context, PageExitEvent, RawError, RelativeTime, Subscription } from '@datadog/browser-core'\nimport type { RumPerformanceEntry } from '../browser/performanceCollection'\nimport type { RumEventDomainContext } from '../domainContext.types'\nimport type { RawRumEvent } from '../rawRumEvent.types'\nimport type { RumEvent } from '../rumEvent.types'\nimport type { CommonContext } from './contexts/commonContext'\nimport type { RequestCompleteEvent, RequestStartEvent } from './requestCollection'\nimport type { AutoAction } from './rumEventsCollection/action/actionCollection'\nimport type { ViewEvent, ViewCreatedEvent, ViewEndedEvent } from './rumEventsCollection/view/trackViews'\n\nexport const enum LifeCycleEventType {\n  PERFORMANCE_ENTRIES_COLLECTED,\n  AUTO_ACTION_COMPLETED,\n  VIEW_CREATED,\n  VIEW_UPDATED,\n  VIEW_ENDED,\n  REQUEST_STARTED,\n  REQUEST_COMPLETED,\n\n  // The SESSION_EXPIRED lifecycle event has been introduced to represent when a session has expired\n  // and trigger cleanup tasks related to this, prior to renewing the session. Its implementation is\n  // slightly naive: it is not triggered as soon as the session is expired, but rather just before\n  // notifying that the session is renewed. Thus, the session id is already set to the newly renewed\n  // session.\n  //\n  // This implementation is \"good enough\" for our use-cases. Improving this is not trivial,\n  // primarily because multiple instances of the SDK may be managing the same session cookie at\n  // the same time, for example when using Logs and RUM on the same page, or opening multiple tabs\n  // on the same domain.\n  SESSION_EXPIRED,\n\n  SESSION_RENEWED,\n  PAGE_EXITED,\n  RAW_RUM_EVENT_COLLECTED,\n  RUM_EVENT_COLLECTED,\n  RAW_ERROR_COLLECTED,\n}\n\nexport class LifeCycle {\n  private callbacks: { [key in LifeCycleEventType]?: Array<(data: any) => void> } = {}\n\n  notify(eventType: LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED, data: RumPerformanceEntry[]): void\n  notify(eventType: LifeCycleEventType.REQUEST_STARTED, data: RequestStartEvent): void\n  notify(eventType: LifeCycleEventType.REQUEST_COMPLETED, data: RequestCompleteEvent): void\n  notify(eventType: LifeCycleEventType.AUTO_ACTION_COMPLETED, data: AutoAction): void\n  notify(eventType: LifeCycleEventType.VIEW_CREATED, data: ViewCreatedEvent): void\n  notify(eventType: LifeCycleEventType.VIEW_UPDATED, data: ViewEvent): void\n  notify(eventType: LifeCycleEventType.VIEW_ENDED, data: ViewEndedEvent): void\n  notify(eventType: LifeCycleEventType.PAGE_EXITED, data: PageExitEvent): void\n  notify(\n    eventType: LifeCycleEventType.RAW_ERROR_COLLECTED,\n    data: { error: RawError; savedCommonContext?: CommonContext; customerContext?: Context }\n  ): void\n  notify(eventType: LifeCycleEventType.SESSION_EXPIRED | LifeCycleEventType.SESSION_RENEWED): void\n  notify(eventType: LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, data: RawRumEventCollectedData): void\n  notify(eventType: LifeCycleEventType.RUM_EVENT_COLLECTED, data: RumEvent & Context): void\n  notify(eventType: LifeCycleEventType, data?: any) {\n    const eventCallbacks = this.callbacks[eventType]\n    if (eventCallbacks) {\n      eventCallbacks.forEach((callback) => callback(data))\n    }\n  }\n\n  subscribe(\n    eventType: LifeCycleEventType.PERFORMANCE_ENTRIES_COLLECTED,\n    callback: (data: RumPerformanceEntry[]) => void\n  ): Subscription\n  subscribe(eventType: LifeCycleEventType.REQUEST_STARTED, callback: (data: RequestStartEvent) => void): Subscription\n  subscribe(\n    eventType: LifeCycleEventType.REQUEST_COMPLETED,\n    callback: (data: RequestCompleteEvent) => void\n  ): Subscription\n  subscribe(eventType: LifeCycleEventType.AUTO_ACTION_COMPLETED, callback: (data: AutoAction) => void): Subscription\n  subscribe(eventType: LifeCycleEventType.VIEW_CREATED, callback: (data: ViewCreatedEvent) => void): Subscription\n  subscribe(eventType: LifeCycleEventType.VIEW_UPDATED, callback: (data: ViewEvent) => void): Subscription\n  subscribe(eventType: LifeCycleEventType.VIEW_ENDED, callback: (data: ViewEndedEvent) => void): Subscription\n  subscribe(eventType: LifeCycleEventType.PAGE_EXITED, callback: (data: PageExitEvent) => void): Subscription\n  subscribe(\n    eventType: LifeCycleEventType.RAW_ERROR_COLLECTED,\n    callback: (data: { error: RawError; savedCommonContext?: CommonContext; customerContext?: Context }) => void\n  ): Subscription\n  subscribe(\n    eventType: LifeCycleEventType.SESSION_EXPIRED | LifeCycleEventType.SESSION_RENEWED,\n    callback: () => void\n  ): Subscription\n  subscribe(\n    eventType: LifeCycleEventType.RAW_RUM_EVENT_COLLECTED,\n    callback: (data: RawRumEventCollectedData) => void\n  ): Subscription\n  subscribe(\n    eventType: LifeCycleEventType.RUM_EVENT_COLLECTED,\n    callback: (data: RumEvent & Context) => void\n  ): Subscription\n  subscribe(eventType: LifeCycleEventType, callback: (data?: any) => void) {\n    if (!this.callbacks[eventType]) {\n      this.callbacks[eventType] = []\n    }\n    this.callbacks[eventType]!.push(callback)\n    return {\n      unsubscribe: () => {\n        this.callbacks[eventType] = this.callbacks[eventType]!.filter((other) => callback !== other)\n      },\n    }\n  }\n}\n\nexport interface RawRumEventCollectedData<E extends RawRumEvent = RawRumEvent> {\n  startTime: RelativeTime\n  savedCommonContext?: CommonContext\n  customerContext?: Context\n  rawRumEvent: E\n  domainContext: RumEventDomainContext<E['type']>\n}\n"],"mappings":"AAsCA,IAAAA,SAAA;EAAA,SAAAA,UAAA;IACU,KAAAC,SAAS,GAAiE,EAAE;EAiEtF;EAhDED,SAAA,CAAAE,SAAA,CAAAC,MAAM,GAAN,UAAOC,SAA6B,EAAEC,IAAU;IAC9C,IAAMC,cAAc,GAAG,IAAI,CAACL,SAAS,CAACG,SAAS,CAAC;IAChD,IAAIE,cAAc,EAAE;MAClBA,cAAc,CAACC,OAAO,CAAC,UAACC,QAAQ;QAAK,OAAAA,QAAQ,CAACH,IAAI,CAAC;MAAd,CAAc,CAAC;;EAExD,CAAC;EAgCDL,SAAA,CAAAE,SAAA,CAAAO,SAAS,GAAT,UAAUL,SAA6B,EAAEI,QAA8B;IAAvE,IAAAE,KAAA;IACE,IAAI,CAAC,IAAI,CAACT,SAAS,CAACG,SAAS,CAAC,EAAE;MAC9B,IAAI,CAACH,SAAS,CAACG,SAAS,CAAC,GAAG,EAAE;;IAEhC,IAAI,CAACH,SAAS,CAACG,SAAS,CAAE,CAACO,IAAI,CAACH,QAAQ,CAAC;IACzC,OAAO;MACLI,WAAW,EAAE,SAAAA,CAAA;QACXF,KAAI,CAACT,SAAS,CAACG,SAAS,CAAC,GAAGM,KAAI,CAACT,SAAS,CAACG,SAAS,CAAE,CAACS,MAAM,CAAC,UAACC,KAAK;UAAK,OAAAN,QAAQ,KAAKM,KAAK;QAAlB,CAAkB,CAAC;MAC9F;KACD;EACH,CAAC;EACH,OAAAd,SAAC;AAAD,CAAC,EAlED"},"metadata":{},"sourceType":"module","externalDependencies":[]}