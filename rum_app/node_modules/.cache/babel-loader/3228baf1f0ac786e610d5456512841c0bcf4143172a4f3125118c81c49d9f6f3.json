{"ast":null,"code":"import { addTelemetryError, display, includes, monitor } from '@datadog/browser-core';\nimport { createDeflateWorker } from './deflateWorker';\nvar state = {\n  status: 0 /* Nil */\n};\nexport function startDeflateWorker(callback, createDeflateWorkerImpl) {\n  if (createDeflateWorkerImpl === void 0) {\n    createDeflateWorkerImpl = createDeflateWorker;\n  }\n  switch (state.status) {\n    case 0 /* Nil */:\n      state = {\n        status: 1 /* Loading */,\n        callbacks: [callback]\n      };\n      doStartDeflateWorker(createDeflateWorkerImpl);\n      break;\n    case 1 /* Loading */:\n      state.callbacks.push(callback);\n      break;\n    case 2 /* Error */:\n      callback();\n      break;\n    case 3 /* Initialized */:\n      callback(state.worker);\n      break;\n  }\n}\nexport function resetDeflateWorkerState() {\n  state = {\n    status: 0 /* Nil */\n  };\n}\n/**\n * Starts the deflate worker and handle messages and errors\n *\n * The spec allow browsers to handle worker errors differently:\n * - Chromium throws an exception\n * - Firefox fires an error event\n *\n * more details: https://bugzilla.mozilla.org/show_bug.cgi?id=1736865#c2\n */\nexport function doStartDeflateWorker(createDeflateWorkerImpl) {\n  if (createDeflateWorkerImpl === void 0) {\n    createDeflateWorkerImpl = createDeflateWorker;\n  }\n  try {\n    var worker_1 = createDeflateWorkerImpl();\n    worker_1.addEventListener('error', monitor(onError));\n    worker_1.addEventListener('message', monitor(function (_a) {\n      var data = _a.data;\n      if (data.type === 'errored') {\n        onError(data.error);\n      } else if (data.type === 'initialized') {\n        onInitialized(worker_1);\n      }\n    }));\n    worker_1.postMessage({\n      action: 'init'\n    });\n    return worker_1;\n  } catch (error) {\n    onError(error);\n  }\n}\nfunction onInitialized(worker) {\n  if (state.status === 1 /* Loading */) {\n    state.callbacks.forEach(function (callback) {\n      return callback(worker);\n    });\n    state = {\n      status: 3 /* Initialized */,\n      worker: worker\n    };\n  }\n}\nfunction onError(error) {\n  if (state.status === 1 /* Loading */) {\n    display.error('Session Replay recording failed to start: an error occurred while creating the Worker:', error);\n    if (error instanceof Event || error instanceof Error && includes(error.message, 'Content Security Policy')) {\n      display.error('Please make sure CSP is correctly configured ' + 'https://docs.datadoghq.com/real_user_monitoring/faq/content_security_policy');\n    } else {\n      addTelemetryError(error);\n    }\n    state.callbacks.forEach(function (callback) {\n      return callback();\n    });\n    state = {\n      status: 2 /* Error */\n    };\n  } else {\n    addTelemetryError(error);\n  }\n}","map":{"version":3,"names":["addTelemetryError","display","includes","monitor","createDeflateWorker","state","status","startDeflateWorker","callback","createDeflateWorkerImpl","callbacks","doStartDeflateWorker","push","worker","resetDeflateWorkerState","worker_1","addEventListener","onError","_a","data","type","error","onInitialized","postMessage","action","forEach","Event","Error","message"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-rum/src/domain/segmentCollection/startDeflateWorker.ts"],"sourcesContent":["import { addTelemetryError, display, includes, monitor } from '@datadog/browser-core'\nimport type { DeflateWorker } from './deflateWorker'\nimport { createDeflateWorker } from './deflateWorker'\n\n/**\n * In order to be sure that the worker is correctly working, we need a round trip of\n * initialization messages, making the creation asynchronous.\n * These worker lifecycle states handle this case.\n */\nconst enum DeflateWorkerStatus {\n  Nil,\n  Loading,\n  Error,\n  Initialized,\n}\n\ntype DeflateWorkerState =\n  | {\n      status: DeflateWorkerStatus.Nil\n    }\n  | {\n      status: DeflateWorkerStatus.Loading\n      callbacks: Array<(worker?: DeflateWorker) => void>\n    }\n  | {\n      status: DeflateWorkerStatus.Error\n    }\n  | {\n      status: DeflateWorkerStatus.Initialized\n      worker: DeflateWorker\n    }\n\nlet state: DeflateWorkerState = { status: DeflateWorkerStatus.Nil }\n\nexport function startDeflateWorker(\n  callback: (worker?: DeflateWorker) => void,\n  createDeflateWorkerImpl = createDeflateWorker\n) {\n  switch (state.status) {\n    case DeflateWorkerStatus.Nil:\n      state = { status: DeflateWorkerStatus.Loading, callbacks: [callback] }\n      doStartDeflateWorker(createDeflateWorkerImpl)\n      break\n    case DeflateWorkerStatus.Loading:\n      state.callbacks.push(callback)\n      break\n    case DeflateWorkerStatus.Error:\n      callback()\n      break\n    case DeflateWorkerStatus.Initialized:\n      callback(state.worker)\n      break\n  }\n}\n\nexport function resetDeflateWorkerState() {\n  state = { status: DeflateWorkerStatus.Nil }\n}\n\n/**\n * Starts the deflate worker and handle messages and errors\n *\n * The spec allow browsers to handle worker errors differently:\n * - Chromium throws an exception\n * - Firefox fires an error event\n *\n * more details: https://bugzilla.mozilla.org/show_bug.cgi?id=1736865#c2\n */\nexport function doStartDeflateWorker(createDeflateWorkerImpl = createDeflateWorker) {\n  try {\n    const worker = createDeflateWorkerImpl()\n    worker.addEventListener('error', monitor(onError))\n    worker.addEventListener(\n      'message',\n      monitor(({ data }) => {\n        if (data.type === 'errored') {\n          onError(data.error)\n        } else if (data.type === 'initialized') {\n          onInitialized(worker)\n        }\n      })\n    )\n    worker.postMessage({ action: 'init' })\n    return worker\n  } catch (error) {\n    onError(error)\n  }\n}\n\nfunction onInitialized(worker: DeflateWorker) {\n  if (state.status === DeflateWorkerStatus.Loading) {\n    state.callbacks.forEach((callback) => callback(worker))\n    state = { status: DeflateWorkerStatus.Initialized, worker }\n  }\n}\n\nfunction onError(error: unknown) {\n  if (state.status === DeflateWorkerStatus.Loading) {\n    display.error('Session Replay recording failed to start: an error occurred while creating the Worker:', error)\n    if (error instanceof Event || (error instanceof Error && includes(error.message, 'Content Security Policy'))) {\n      display.error(\n        'Please make sure CSP is correctly configured ' +\n          'https://docs.datadoghq.com/real_user_monitoring/faq/content_security_policy'\n      )\n    } else {\n      addTelemetryError(error)\n    }\n    state.callbacks.forEach((callback) => callback())\n    state = { status: DeflateWorkerStatus.Error }\n  } else {\n    addTelemetryError(error)\n  }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,uBAAuB;AAErF,SAASC,mBAAmB,QAAQ,iBAAiB;AA8BrD,IAAIC,KAAK,GAAuB;EAAEC,MAAM;AAAyB,CAAE;AAEnE,OAAM,SAAUC,kBAAkBA,CAChCC,QAA0C,EAC1CC,uBAA6C;EAA7C,IAAAA,uBAAA;IAAAA,uBAAA,GAAAL,mBAA6C;EAAA;EAE7C,QAAQC,KAAK,CAACC,MAAM;IAClB;MACED,KAAK,GAAG;QAAEC,MAAM;QAA+BI,SAAS,EAAE,CAACF,QAAQ;MAAC,CAAE;MACtEG,oBAAoB,CAACF,uBAAuB,CAAC;MAC7C;IACF;MACEJ,KAAK,CAACK,SAAS,CAACE,IAAI,CAACJ,QAAQ,CAAC;MAC9B;IACF;MACEA,QAAQ,EAAE;MACV;IACF;MACEA,QAAQ,CAACH,KAAK,CAACQ,MAAM,CAAC;MACtB;EAAK;AAEX;AAEA,OAAM,SAAUC,uBAAuBA,CAAA;EACrCT,KAAK,GAAG;IAAEC,MAAM;EAAyB,CAAE;AAC7C;AAEA;;;;;;;;;AASA,OAAM,SAAUK,oBAAoBA,CAACF,uBAA6C;EAA7C,IAAAA,uBAAA;IAAAA,uBAAA,GAAAL,mBAA6C;EAAA;EAChF,IAAI;IACF,IAAMW,QAAM,GAAGN,uBAAuB,EAAE;IACxCM,QAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEb,OAAO,CAACc,OAAO,CAAC,CAAC;IAClDF,QAAM,CAACC,gBAAgB,CACrB,SAAS,EACTb,OAAO,CAAC,UAACe,EAAQ;UAANC,IAAI,GAAAD,EAAA,CAAAC,IAAA;MACb,IAAIA,IAAI,CAACC,IAAI,KAAK,SAAS,EAAE;QAC3BH,OAAO,CAACE,IAAI,CAACE,KAAK,CAAC;OACpB,MAAM,IAAIF,IAAI,CAACC,IAAI,KAAK,aAAa,EAAE;QACtCE,aAAa,CAACP,QAAM,CAAC;;IAEzB,CAAC,CAAC,CACH;IACDA,QAAM,CAACQ,WAAW,CAAC;MAAEC,MAAM,EAAE;IAAM,CAAE,CAAC;IACtC,OAAOT,QAAM;GACd,CAAC,OAAOM,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC;;AAElB;AAEA,SAASC,aAAaA,CAACT,MAAqB;EAC1C,IAAIR,KAAK,CAACC,MAAM,sBAAkC;IAChDD,KAAK,CAACK,SAAS,CAACe,OAAO,CAAC,UAACjB,QAAQ;MAAK,OAAAA,QAAQ,CAACK,MAAM,CAAC;IAAhB,CAAgB,CAAC;IACvDR,KAAK,GAAG;MAAEC,MAAM;MAAmCO,MAAM,EAAAA;IAAA,CAAE;;AAE/D;AAEA,SAASI,OAAOA,CAACI,KAAc;EAC7B,IAAIhB,KAAK,CAACC,MAAM,sBAAkC;IAChDL,OAAO,CAACoB,KAAK,CAAC,wFAAwF,EAAEA,KAAK,CAAC;IAC9G,IAAIA,KAAK,YAAYK,KAAK,IAAKL,KAAK,YAAYM,KAAK,IAAIzB,QAAQ,CAACmB,KAAK,CAACO,OAAO,EAAE,yBAAyB,CAAE,EAAE;MAC5G3B,OAAO,CAACoB,KAAK,CACX,+CAA+C,GAC7C,6EAA6E,CAChF;KACF,MAAM;MACLrB,iBAAiB,CAACqB,KAAK,CAAC;;IAE1BhB,KAAK,CAACK,SAAS,CAACe,OAAO,CAAC,UAACjB,QAAQ;MAAK,OAAAA,QAAQ,EAAE;IAAV,CAAU,CAAC;IACjDH,KAAK,GAAG;MAAEC,MAAM;IAA2B,CAAE;GAC9C,MAAM;IACLN,iBAAiB,CAACqB,KAAK,CAAC;;AAE5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}