{"ast":null,"code":"import { timeStampNow, createHttpRequest } from '@datadog/browser-core';\nimport { record } from '../domain/record';\nimport { startSegmentCollection, SEGMENT_BYTES_LIMIT } from '../domain/segmentCollection';\nimport { RecordType } from '../types';\nexport function startRecording(lifeCycle, configuration, sessionManager, viewContexts, worker, httpRequest) {\n  var reportError = function (error) {\n    lifeCycle.notify(12 /* RAW_ERROR_COLLECTED */, {\n      error: error\n    });\n  };\n  var replayRequest = httpRequest || createHttpRequest(configuration.sessionReplayEndpointBuilder, SEGMENT_BYTES_LIMIT, reportError);\n  var _a = startSegmentCollection(lifeCycle, configuration.applicationId, sessionManager, viewContexts, replayRequest, worker),\n    addRecord = _a.addRecord,\n    stopSegmentCollection = _a.stop;\n  var _b = record({\n      emit: addRecord,\n      configuration: configuration,\n      lifeCycle: lifeCycle\n    }),\n    stopRecording = _b.stop,\n    takeSubsequentFullSnapshot = _b.takeSubsequentFullSnapshot,\n    flushMutations = _b.flushMutations;\n  var unsubscribeViewEnded = lifeCycle.subscribe(4 /* VIEW_ENDED */, function () {\n    flushMutations();\n    addRecord({\n      timestamp: timeStampNow(),\n      type: RecordType.ViewEnd\n    });\n  }).unsubscribe;\n  var unsubscribeViewCreated = lifeCycle.subscribe(2 /* VIEW_CREATED */, function (view) {\n    takeSubsequentFullSnapshot(view.startClocks.timeStamp);\n  }).unsubscribe;\n  return {\n    stop: function () {\n      unsubscribeViewEnded();\n      unsubscribeViewCreated();\n      stopRecording();\n      stopSegmentCollection();\n    }\n  };\n}","map":{"version":3,"names":["timeStampNow","createHttpRequest","record","startSegmentCollection","SEGMENT_BYTES_LIMIT","RecordType","startRecording","lifeCycle","configuration","sessionManager","viewContexts","worker","httpRequest","reportError","error","notify","replayRequest","sessionReplayEndpointBuilder","_a","applicationId","addRecord","stopSegmentCollection","stop","_b","emit","stopRecording","takeSubsequentFullSnapshot","flushMutations","unsubscribeViewEnded","subscribe","timestamp","type","ViewEnd","unsubscribe","unsubscribeViewCreated","view","startClocks","timeStamp"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-rum/src/boot/startRecording.ts"],"sourcesContent":["import type { RawError, HttpRequest } from '@datadog/browser-core'\nimport { timeStampNow, createHttpRequest } from '@datadog/browser-core'\nimport type {\n  LifeCycle,\n  ViewContexts,\n  RumConfiguration,\n  RumSessionManager,\n  ViewCreatedEvent,\n} from '@datadog/browser-rum-core'\nimport { LifeCycleEventType } from '@datadog/browser-rum-core'\n\nimport { record } from '../domain/record'\nimport type { DeflateWorker } from '../domain/segmentCollection'\nimport { startSegmentCollection, SEGMENT_BYTES_LIMIT } from '../domain/segmentCollection'\nimport { RecordType } from '../types'\n\nexport function startRecording(\n  lifeCycle: LifeCycle,\n  configuration: RumConfiguration,\n  sessionManager: RumSessionManager,\n  viewContexts: ViewContexts,\n  worker: DeflateWorker,\n  httpRequest?: HttpRequest\n) {\n  const reportError = (error: RawError) => {\n    lifeCycle.notify(LifeCycleEventType.RAW_ERROR_COLLECTED, { error })\n  }\n\n  const replayRequest =\n    httpRequest || createHttpRequest(configuration.sessionReplayEndpointBuilder, SEGMENT_BYTES_LIMIT, reportError)\n\n  const { addRecord, stop: stopSegmentCollection } = startSegmentCollection(\n    lifeCycle,\n    configuration.applicationId,\n    sessionManager,\n    viewContexts,\n    replayRequest,\n    worker\n  )\n\n  const {\n    stop: stopRecording,\n    takeSubsequentFullSnapshot,\n    flushMutations,\n  } = record({\n    emit: addRecord,\n    configuration,\n    lifeCycle,\n  })\n\n  const { unsubscribe: unsubscribeViewEnded } = lifeCycle.subscribe(LifeCycleEventType.VIEW_ENDED, () => {\n    flushMutations()\n    addRecord({\n      timestamp: timeStampNow(),\n      type: RecordType.ViewEnd,\n    })\n  })\n  const { unsubscribe: unsubscribeViewCreated } = lifeCycle.subscribe(\n    LifeCycleEventType.VIEW_CREATED,\n    (view: ViewCreatedEvent) => {\n      takeSubsequentFullSnapshot(view.startClocks.timeStamp)\n    }\n  )\n\n  return {\n    stop: () => {\n      unsubscribeViewEnded()\n      unsubscribeViewCreated()\n      stopRecording()\n      stopSegmentCollection()\n    },\n  }\n}\n"],"mappings":"AACA,SAASA,YAAY,EAAEC,iBAAiB,QAAQ,uBAAuB;AAUvE,SAASC,MAAM,QAAQ,kBAAkB;AAEzC,SAASC,sBAAsB,EAAEC,mBAAmB,QAAQ,6BAA6B;AACzF,SAASC,UAAU,QAAQ,UAAU;AAErC,OAAM,SAAUC,cAAcA,CAC5BC,SAAoB,EACpBC,aAA+B,EAC/BC,cAAiC,EACjCC,YAA0B,EAC1BC,MAAqB,EACrBC,WAAyB;EAEzB,IAAMC,WAAW,GAAG,SAAAA,CAACC,KAAe;IAClCP,SAAS,CAACQ,MAAM,+BAAyC;MAAED,KAAK,EAAAA;IAAA,CAAE,CAAC;EACrE,CAAC;EAED,IAAME,aAAa,GACjBJ,WAAW,IAAIX,iBAAiB,CAACO,aAAa,CAACS,4BAA4B,EAAEb,mBAAmB,EAAES,WAAW,CAAC;EAE1G,IAAAK,EAAA,GAA6Cf,sBAAsB,CACvEI,SAAS,EACTC,aAAa,CAACW,aAAa,EAC3BV,cAAc,EACdC,YAAY,EACZM,aAAa,EACbL,MAAM,CACP;IAPOS,SAAS,GAAAF,EAAA,CAAAE,SAAA;IAAQC,qBAAqB,GAAAH,EAAA,CAAAI,IAO7C;EAEK,IAAAC,EAAA,GAIFrB,MAAM,CAAC;MACTsB,IAAI,EAAEJ,SAAS;MACfZ,aAAa,EAAAA,aAAA;MACbD,SAAS,EAAAA;KACV,CAAC;IAPMkB,aAAa,GAAAF,EAAA,CAAAD,IAAA;IACnBI,0BAA0B,GAAAH,EAAA,CAAAG,0BAAA;IAC1BC,cAAc,GAAAJ,EAAA,CAAAI,cAKd;EAEM,IAAaC,oBAAoB,GAAKrB,SAAS,CAACsB,SAAS,qBAAgC;IAC/FF,cAAc,EAAE;IAChBP,SAAS,CAAC;MACRU,SAAS,EAAE9B,YAAY,EAAE;MACzB+B,IAAI,EAAE1B,UAAU,CAAC2B;KAClB,CAAC;EACJ,CAAC,CAAC,CAAAC,WANuC;EAOjC,IAAaC,sBAAsB,GAAK3B,SAAS,CAACsB,SAAS,uBAEjE,UAACM,IAAsB;IACrBT,0BAA0B,CAACS,IAAI,CAACC,WAAW,CAACC,SAAS,CAAC;EACxD,CAAC,CACF,CAAAJ,WAL0C;EAO3C,OAAO;IACLX,IAAI,EAAE,SAAAA,CAAA;MACJM,oBAAoB,EAAE;MACtBM,sBAAsB,EAAE;MACxBT,aAAa,EAAE;MACfJ,qBAAqB,EAAE;IACzB;GACD;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}