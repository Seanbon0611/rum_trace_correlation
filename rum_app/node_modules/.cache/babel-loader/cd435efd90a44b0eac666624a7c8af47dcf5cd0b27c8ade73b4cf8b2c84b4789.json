{"ast":null,"code":"import { elementMatches, ONE_SECOND } from '@datadog/browser-core';\nvar MIN_CLICKS_PER_SECOND_TO_CONSIDER_RAGE = 3;\nexport function computeFrustration(clicks, rageClick) {\n  if (isRage(clicks)) {\n    rageClick.addFrustration(\"rage_click\" /* RAGE_CLICK */);\n    if (clicks.some(isDead)) {\n      rageClick.addFrustration(\"dead_click\" /* DEAD_CLICK */);\n    }\n\n    if (rageClick.hasError) {\n      rageClick.addFrustration(\"error_click\" /* ERROR_CLICK */);\n    }\n\n    return {\n      isRage: true\n    };\n  }\n  var hasSelectionChanged = clicks.some(function (click) {\n    return click.getUserActivity().selection;\n  });\n  clicks.forEach(function (click) {\n    if (click.hasError) {\n      click.addFrustration(\"error_click\" /* ERROR_CLICK */);\n    }\n\n    if (isDead(click) &&\n    // Avoid considering clicks part of a double-click or triple-click selections as dead clicks\n    !hasSelectionChanged) {\n      click.addFrustration(\"dead_click\" /* DEAD_CLICK */);\n    }\n  });\n\n  return {\n    isRage: false\n  };\n}\nexport function isRage(clicks) {\n  if (clicks.some(function (click) {\n    return click.getUserActivity().selection;\n  })) {\n    return false;\n  }\n  for (var i = 0; i < clicks.length - (MIN_CLICKS_PER_SECOND_TO_CONSIDER_RAGE - 1); i += 1) {\n    if (clicks[i + MIN_CLICKS_PER_SECOND_TO_CONSIDER_RAGE - 1].event.timeStamp - clicks[i].event.timeStamp <= ONE_SECOND) {\n      return true;\n    }\n  }\n  return false;\n}\nvar DEAD_CLICK_EXCLUDE_SELECTOR =\n// inputs that don't trigger a meaningful event like \"input\" when clicked, including textual\n// inputs (using a negative selector is shorter here)\n'input:not([type=\"checkbox\"]):not([type=\"radio\"]):not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]):not([type=\"range\"]),' + 'textarea,' + 'select,' +\n// contenteditable and their descendants don't always trigger meaningful changes when manipulated\n'[contenteditable],' + '[contenteditable] *,' +\n// canvas, as there is no good way to detect activity occurring on them\n'canvas,' +\n// links that are interactive (have an href attribute) or any of their descendants, as they can\n// open a new tab or navigate to a hash without triggering a meaningful event\n'a[href],' + 'a[href] *';\nexport function isDead(click) {\n  if (click.hasPageActivity || click.getUserActivity().input) {\n    return false;\n  }\n  return !elementMatches(click.event.target, DEAD_CLICK_EXCLUDE_SELECTOR);\n}","map":{"version":3,"names":["elementMatches","ONE_SECOND","MIN_CLICKS_PER_SECOND_TO_CONSIDER_RAGE","computeFrustration","clicks","rageClick","isRage","addFrustration","some","isDead","hasError","hasSelectionChanged","click","getUserActivity","selection","forEach","i","length","event","timeStamp","DEAD_CLICK_EXCLUDE_SELECTOR","hasPageActivity","input","target"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-rum-core/src/domain/rumEventsCollection/action/computeFrustration.ts"],"sourcesContent":["import { elementMatches, ONE_SECOND } from '@datadog/browser-core'\nimport { FrustrationType } from '../../../rawRumEvent.types'\nimport type { Click } from './trackClickActions'\n\nconst MIN_CLICKS_PER_SECOND_TO_CONSIDER_RAGE = 3\n\nexport function computeFrustration(clicks: Click[], rageClick: Click) {\n  if (isRage(clicks)) {\n    rageClick.addFrustration(FrustrationType.RAGE_CLICK)\n    if (clicks.some(isDead)) {\n      rageClick.addFrustration(FrustrationType.DEAD_CLICK)\n    }\n    if (rageClick.hasError) {\n      rageClick.addFrustration(FrustrationType.ERROR_CLICK)\n    }\n    return { isRage: true }\n  }\n\n  const hasSelectionChanged = clicks.some((click) => click.getUserActivity().selection)\n  clicks.forEach((click) => {\n    if (click.hasError) {\n      click.addFrustration(FrustrationType.ERROR_CLICK)\n    }\n    if (\n      isDead(click) &&\n      // Avoid considering clicks part of a double-click or triple-click selections as dead clicks\n      !hasSelectionChanged\n    ) {\n      click.addFrustration(FrustrationType.DEAD_CLICK)\n    }\n  })\n  return { isRage: false }\n}\n\nexport function isRage(clicks: Click[]) {\n  if (clicks.some((click) => click.getUserActivity().selection)) {\n    return false\n  }\n  for (let i = 0; i < clicks.length - (MIN_CLICKS_PER_SECOND_TO_CONSIDER_RAGE - 1); i += 1) {\n    if (\n      clicks[i + MIN_CLICKS_PER_SECOND_TO_CONSIDER_RAGE - 1].event.timeStamp - clicks[i].event.timeStamp <=\n      ONE_SECOND\n    ) {\n      return true\n    }\n  }\n  return false\n}\n\nconst DEAD_CLICK_EXCLUDE_SELECTOR =\n  // inputs that don't trigger a meaningful event like \"input\" when clicked, including textual\n  // inputs (using a negative selector is shorter here)\n  'input:not([type=\"checkbox\"]):not([type=\"radio\"]):not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]):not([type=\"range\"]),' +\n  'textarea,' +\n  'select,' +\n  // contenteditable and their descendants don't always trigger meaningful changes when manipulated\n  '[contenteditable],' +\n  '[contenteditable] *,' +\n  // canvas, as there is no good way to detect activity occurring on them\n  'canvas,' +\n  // links that are interactive (have an href attribute) or any of their descendants, as they can\n  // open a new tab or navigate to a hash without triggering a meaningful event\n  'a[href],' +\n  'a[href] *'\n\nexport function isDead(click: Click) {\n  if (click.hasPageActivity || click.getUserActivity().input) {\n    return false\n  }\n  return !elementMatches(click.event.target, DEAD_CLICK_EXCLUDE_SELECTOR)\n}\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,UAAU,QAAQ,uBAAuB;AAIlE,IAAMC,sCAAsC,GAAG,CAAC;AAEhD,OAAM,SAAUC,kBAAkBA,CAACC,MAAe,EAAEC,SAAgB;EAClE,IAAIC,MAAM,CAACF,MAAM,CAAC,EAAE;IAClBC,SAAS,CAACE,cAAc,+BAA4B;IACpD,IAAIH,MAAM,CAACI,IAAI,CAACC,MAAM,CAAC,EAAE;MACvBJ,SAAS,CAACE,cAAc,+BAA4B;;;IAEtD,IAAIF,SAAS,CAACK,QAAQ,EAAE;MACtBL,SAAS,CAACE,cAAc,iCAA6B;;;IAEvD,OAAO;MAAED,MAAM,EAAE;IAAI,CAAE;;EAGzB,IAAMK,mBAAmB,GAAGP,MAAM,CAACI,IAAI,CAAC,UAACI,KAAK;IAAK,OAAAA,KAAK,CAACC,eAAe,EAAE,CAACC,SAAS;EAAjC,CAAiC,CAAC;EACrFV,MAAM,CAACW,OAAO,CAAC,UAACH,KAAK;IACnB,IAAIA,KAAK,CAACF,QAAQ,EAAE;MAClBE,KAAK,CAACL,cAAc,iCAA6B;;;IAEnD,IACEE,MAAM,CAACG,KAAK,CAAC;IACb;IACA,CAACD,mBAAmB,EACpB;MACAC,KAAK,CAACL,cAAc,+BAA4B;;EAEpD,CAAC,CAAC;;EACF,OAAO;IAAED,MAAM,EAAE;EAAK,CAAE;AAC1B;AAEA,OAAM,SAAUA,MAAMA,CAACF,MAAe;EACpC,IAAIA,MAAM,CAACI,IAAI,CAAC,UAACI,KAAK;IAAK,OAAAA,KAAK,CAACC,eAAe,EAAE,CAACC,SAAS;EAAjC,CAAiC,CAAC,EAAE;IAC7D,OAAO,KAAK;;EAEd,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,MAAM,CAACa,MAAM,IAAIf,sCAAsC,GAAG,CAAC,CAAC,EAAEc,CAAC,IAAI,CAAC,EAAE;IACxF,IACEZ,MAAM,CAACY,CAAC,GAAGd,sCAAsC,GAAG,CAAC,CAAC,CAACgB,KAAK,CAACC,SAAS,GAAGf,MAAM,CAACY,CAAC,CAAC,CAACE,KAAK,CAACC,SAAS,IAClGlB,UAAU,EACV;MACA,OAAO,IAAI;;;EAGf,OAAO,KAAK;AACd;AAEA,IAAMmB,2BAA2B;AAC/B;AACA;AACA,qIAAqI,GACrI,WAAW,GACX,SAAS;AACT;AACA,oBAAoB,GACpB,sBAAsB;AACtB;AACA,SAAS;AACT;AACA;AACA,UAAU,GACV,WAAW;AAEb,OAAM,SAAUX,MAAMA,CAACG,KAAY;EACjC,IAAIA,KAAK,CAACS,eAAe,IAAIT,KAAK,CAACC,eAAe,EAAE,CAACS,KAAK,EAAE;IAC1D,OAAO,KAAK;;EAEd,OAAO,CAACtB,cAAc,CAACY,KAAK,CAACM,KAAK,CAACK,MAAM,EAAEH,2BAA2B,CAAC;AACzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}