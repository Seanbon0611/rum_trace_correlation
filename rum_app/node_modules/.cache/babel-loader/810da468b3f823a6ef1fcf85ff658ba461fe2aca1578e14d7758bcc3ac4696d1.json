{"ast":null,"code":"import { instrumentMethodAndCallOriginal } from '../../tools/instrumentMethod';\nimport { computeStackTrace } from './computeStackTrace';\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/;\n/**\n * Cross-browser collection of unhandled errors\n *\n * Supports:\n * - Firefox: full stack trace with line numbers, plus column number\n * on top frame; column number is not guaranteed\n * - Opera: full stack trace with line and column numbers\n * - Chrome: full stack trace with line and column numbers\n * - Safari: line and column number for the top frame only; some frames\n * may be missing, and column number is not guaranteed\n * - IE: line and column number for the top frame only; some frames\n * may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n * - IE5.5+ (only 8.0 tested)\n * - Firefox 0.9+ (only 3.5+ tested)\n * - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n * Exceptions Have Stacktrace to be enabled in opera:config)\n * - Safari 3+ (only 4+ tested)\n * - Chrome 1+ (only 5+ tested)\n * - Konqueror 3.5+ (untested)\n *\n * Tries to catch all unhandled errors and report them to the\n * callback.\n *\n * Callbacks receive a StackTrace object as described in the\n * computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\nexport function startUnhandledErrorCollection(callback) {\n  var stopInstrumentingOnError = instrumentOnError(callback).stop;\n  var stopInstrumentingOnUnhandledRejection = instrumentUnhandledRejection(callback).stop;\n  return {\n    stop: function () {\n      stopInstrumentingOnError();\n      stopInstrumentingOnUnhandledRejection();\n    }\n  };\n}\n/**\n * Install a global onerror handler\n */\nfunction instrumentOnError(callback) {\n  return instrumentMethodAndCallOriginal(window, 'onerror', {\n    before: function (message, url, lineNo, columnNo, errorObj) {\n      var stack;\n      if (errorObj) {\n        stack = computeStackTrace(errorObj);\n        callback(stack, errorObj);\n      } else {\n        var location_1 = {\n          url: url,\n          column: columnNo,\n          line: lineNo\n        };\n        var name_1;\n        var msg = message;\n        if ({}.toString.call(message) === '[object String]') {\n          var groups = ERROR_TYPES_RE.exec(msg);\n          if (groups) {\n            name_1 = groups[1];\n            msg = groups[2];\n          }\n        }\n        stack = {\n          name: name_1,\n          message: typeof msg === 'string' ? msg : undefined,\n          stack: [location_1]\n        };\n        callback(stack, message);\n      }\n    }\n  });\n}\n/**\n * Install a global onunhandledrejection handler\n */\nfunction instrumentUnhandledRejection(callback) {\n  return instrumentMethodAndCallOriginal(window, 'onunhandledrejection', {\n    before: function (e) {\n      var reason = e.reason || 'Empty reason';\n      var stack = computeStackTrace(reason);\n      callback(stack, reason);\n    }\n  });\n}","map":{"version":3,"names":["instrumentMethodAndCallOriginal","computeStackTrace","ERROR_TYPES_RE","startUnhandledErrorCollection","callback","stopInstrumentingOnError","instrumentOnError","stop","stopInstrumentingOnUnhandledRejection","instrumentUnhandledRejection","window","before","message","url","lineNo","columnNo","errorObj","stack","location_1","column","line","name_1","msg","toString","call","groups","exec","name","undefined","e","reason"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-core/src/domain/tracekit/tracekit.ts"],"sourcesContent":["import { instrumentMethodAndCallOriginal } from '../../tools/instrumentMethod'\nimport { computeStackTrace } from './computeStackTrace'\nimport type { UnhandledErrorCallback, StackTrace } from './types'\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nconst ERROR_TYPES_RE =\n  /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/\n\n/**\n * Cross-browser collection of unhandled errors\n *\n * Supports:\n * - Firefox: full stack trace with line numbers, plus column number\n * on top frame; column number is not guaranteed\n * - Opera: full stack trace with line and column numbers\n * - Chrome: full stack trace with line and column numbers\n * - Safari: line and column number for the top frame only; some frames\n * may be missing, and column number is not guaranteed\n * - IE: line and column number for the top frame only; some frames\n * may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n * - IE5.5+ (only 8.0 tested)\n * - Firefox 0.9+ (only 3.5+ tested)\n * - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n * Exceptions Have Stacktrace to be enabled in opera:config)\n * - Safari 3+ (only 4+ tested)\n * - Chrome 1+ (only 5+ tested)\n * - Konqueror 3.5+ (untested)\n *\n * Tries to catch all unhandled errors and report them to the\n * callback.\n *\n * Callbacks receive a StackTrace object as described in the\n * computeStackTrace docs.\n *\n * @memberof TraceKit\n * @namespace\n */\n\nexport function startUnhandledErrorCollection(callback: UnhandledErrorCallback) {\n  const { stop: stopInstrumentingOnError } = instrumentOnError(callback)\n  const { stop: stopInstrumentingOnUnhandledRejection } = instrumentUnhandledRejection(callback)\n\n  return {\n    stop: () => {\n      stopInstrumentingOnError()\n      stopInstrumentingOnUnhandledRejection()\n    },\n  }\n}\n\n/**\n * Install a global onerror handler\n */\nfunction instrumentOnError(callback: UnhandledErrorCallback) {\n  return instrumentMethodAndCallOriginal(window, 'onerror', {\n    before(this: any, message: Event | string, url?: string, lineNo?: number, columnNo?: number, errorObj?: Error) {\n      let stack: StackTrace\n\n      if (errorObj) {\n        stack = computeStackTrace(errorObj)\n        callback(stack, errorObj)\n      } else {\n        const location = {\n          url,\n          column: columnNo,\n          line: lineNo,\n        }\n\n        let name\n        let msg = message\n        if ({}.toString.call(message) === '[object String]') {\n          const groups = ERROR_TYPES_RE.exec(msg as string)\n          if (groups) {\n            name = groups[1]\n            msg = groups[2]\n          }\n        }\n\n        stack = {\n          name,\n          message: typeof msg === 'string' ? msg : undefined,\n          stack: [location],\n        }\n\n        callback(stack, message)\n      }\n    },\n  })\n}\n\n/**\n * Install a global onunhandledrejection handler\n */\nfunction instrumentUnhandledRejection(callback: UnhandledErrorCallback) {\n  return instrumentMethodAndCallOriginal(window, 'onunhandledrejection', {\n    before(e: PromiseRejectionEvent) {\n      const reason = e.reason || 'Empty reason'\n      const stack = computeStackTrace(reason)\n      callback(stack, reason)\n    },\n  })\n}\n"],"mappings":"AAAA,SAASA,+BAA+B,QAAQ,8BAA8B;AAC9E,SAASC,iBAAiB,QAAQ,qBAAqB;AAGvD;AACA,IAAMC,cAAc,GAClB,yGAAyG;AAE3G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,SAAUC,6BAA6BA,CAACC,QAAgC;EACpE,IAAMC,wBAAwB,GAAKC,iBAAiB,CAACF,QAAQ,CAAC,CAAAG,IAAhC;EAC9B,IAAMC,qCAAqC,GAAKC,4BAA4B,CAACL,QAAQ,CAAC,CAAAG,IAA3C;EAEnD,OAAO;IACLA,IAAI,EAAE,SAAAA,CAAA;MACJF,wBAAwB,EAAE;MAC1BG,qCAAqC,EAAE;IACzC;GACD;AACH;AAEA;;;AAGA,SAASF,iBAAiBA,CAACF,QAAgC;EACzD,OAAOJ,+BAA+B,CAACU,MAAM,EAAE,SAAS,EAAE;IACxDC,MAAM,EAAN,SAAAA,CAAkBC,OAAuB,EAAEC,GAAY,EAAEC,MAAe,EAAEC,QAAiB,EAAEC,QAAgB;MAC3G,IAAIC,KAAiB;MAErB,IAAID,QAAQ,EAAE;QACZC,KAAK,GAAGhB,iBAAiB,CAACe,QAAQ,CAAC;QACnCZ,QAAQ,CAACa,KAAK,EAAED,QAAQ,CAAC;OAC1B,MAAM;QACL,IAAME,UAAQ,GAAG;UACfL,GAAG,EAAAA,GAAA;UACHM,MAAM,EAAEJ,QAAQ;UAChBK,IAAI,EAAEN;SACP;QAED,IAAIO,MAAI;QACR,IAAIC,GAAG,GAAGV,OAAO;QACjB,IAAI,EAAE,CAACW,QAAQ,CAACC,IAAI,CAACZ,OAAO,CAAC,KAAK,iBAAiB,EAAE;UACnD,IAAMa,MAAM,GAAGvB,cAAc,CAACwB,IAAI,CAACJ,GAAa,CAAC;UACjD,IAAIG,MAAM,EAAE;YACVJ,MAAI,GAAGI,MAAM,CAAC,CAAC,CAAC;YAChBH,GAAG,GAAGG,MAAM,CAAC,CAAC,CAAC;;;QAInBR,KAAK,GAAG;UACNU,IAAI,EAAAN,MAAA;UACJT,OAAO,EAAE,OAAOU,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGM,SAAS;UAClDX,KAAK,EAAE,CAACC,UAAQ;SACjB;QAEDd,QAAQ,CAACa,KAAK,EAAEL,OAAO,CAAC;;IAE5B;GACD,CAAC;AACJ;AAEA;;;AAGA,SAASH,4BAA4BA,CAACL,QAAgC;EACpE,OAAOJ,+BAA+B,CAACU,MAAM,EAAE,sBAAsB,EAAE;IACrEC,MAAM,EAAN,SAAAA,CAAOkB,CAAwB;MAC7B,IAAMC,MAAM,GAAGD,CAAC,CAACC,MAAM,IAAI,cAAc;MACzC,IAAMb,KAAK,GAAGhB,iBAAiB,CAAC6B,MAAM,CAAC;MACvC1B,QAAQ,CAACa,KAAK,EAAEa,MAAM,CAAC;IACzB;GACD,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}