{"ast":null,"code":"import { getCookie } from '../../browser/cookie';\nimport { SESSION_COOKIE_NAME, persistSession } from './sessionCookieStore';\nexport var OLD_SESSION_COOKIE_NAME = '_dd';\nexport var OLD_RUM_COOKIE_NAME = '_dd_r';\nexport var OLD_LOGS_COOKIE_NAME = '_dd_l';\n// duplicate values to avoid dependency issues\nexport var RUM_SESSION_KEY = 'rum';\nexport var LOGS_SESSION_KEY = 'logs';\n/**\n * This migration should remain in the codebase as long as older versions are available/live\n * to allow older sdk versions to be upgraded to newer versions without compatibility issues.\n */\nexport function tryOldCookiesMigration(options) {\n  var sessionString = getCookie(SESSION_COOKIE_NAME);\n  var oldSessionId = getCookie(OLD_SESSION_COOKIE_NAME);\n  var oldRumType = getCookie(OLD_RUM_COOKIE_NAME);\n  var oldLogsType = getCookie(OLD_LOGS_COOKIE_NAME);\n  if (!sessionString) {\n    var session = {};\n    if (oldSessionId) {\n      session.id = oldSessionId;\n    }\n    if (oldLogsType && /^[01]$/.test(oldLogsType)) {\n      session[LOGS_SESSION_KEY] = oldLogsType;\n    }\n    if (oldRumType && /^[012]$/.test(oldRumType)) {\n      session[RUM_SESSION_KEY] = oldRumType;\n    }\n    persistSession(session, options);\n  }\n}","map":{"version":3,"names":["getCookie","SESSION_COOKIE_NAME","persistSession","OLD_SESSION_COOKIE_NAME","OLD_RUM_COOKIE_NAME","OLD_LOGS_COOKIE_NAME","RUM_SESSION_KEY","LOGS_SESSION_KEY","tryOldCookiesMigration","options","sessionString","oldSessionId","oldRumType","oldLogsType","session","id","test"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-core/src/domain/session/oldCookiesMigration.ts"],"sourcesContent":["import type { CookieOptions } from '../../browser/cookie'\nimport { getCookie } from '../../browser/cookie'\nimport type { SessionState } from './sessionStore'\nimport { SESSION_COOKIE_NAME, persistSession } from './sessionCookieStore'\n\nexport const OLD_SESSION_COOKIE_NAME = '_dd'\nexport const OLD_RUM_COOKIE_NAME = '_dd_r'\nexport const OLD_LOGS_COOKIE_NAME = '_dd_l'\n\n// duplicate values to avoid dependency issues\nexport const RUM_SESSION_KEY = 'rum'\nexport const LOGS_SESSION_KEY = 'logs'\n\n/**\n * This migration should remain in the codebase as long as older versions are available/live\n * to allow older sdk versions to be upgraded to newer versions without compatibility issues.\n */\nexport function tryOldCookiesMigration(options: CookieOptions) {\n  const sessionString = getCookie(SESSION_COOKIE_NAME)\n  const oldSessionId = getCookie(OLD_SESSION_COOKIE_NAME)\n  const oldRumType = getCookie(OLD_RUM_COOKIE_NAME)\n  const oldLogsType = getCookie(OLD_LOGS_COOKIE_NAME)\n  if (!sessionString) {\n    const session: SessionState = {}\n    if (oldSessionId) {\n      session.id = oldSessionId\n    }\n    if (oldLogsType && /^[01]$/.test(oldLogsType)) {\n      session[LOGS_SESSION_KEY] = oldLogsType\n    }\n    if (oldRumType && /^[012]$/.test(oldRumType)) {\n      session[RUM_SESSION_KEY] = oldRumType\n    }\n    persistSession(session, options)\n  }\n}\n"],"mappings":"AACA,SAASA,SAAS,QAAQ,sBAAsB;AAEhD,SAASC,mBAAmB,EAAEC,cAAc,QAAQ,sBAAsB;AAE1E,OAAO,IAAMC,uBAAuB,GAAG,KAAK;AAC5C,OAAO,IAAMC,mBAAmB,GAAG,OAAO;AAC1C,OAAO,IAAMC,oBAAoB,GAAG,OAAO;AAE3C;AACA,OAAO,IAAMC,eAAe,GAAG,KAAK;AACpC,OAAO,IAAMC,gBAAgB,GAAG,MAAM;AAEtC;;;;AAIA,OAAM,SAAUC,sBAAsBA,CAACC,OAAsB;EAC3D,IAAMC,aAAa,GAAGV,SAAS,CAACC,mBAAmB,CAAC;EACpD,IAAMU,YAAY,GAAGX,SAAS,CAACG,uBAAuB,CAAC;EACvD,IAAMS,UAAU,GAAGZ,SAAS,CAACI,mBAAmB,CAAC;EACjD,IAAMS,WAAW,GAAGb,SAAS,CAACK,oBAAoB,CAAC;EACnD,IAAI,CAACK,aAAa,EAAE;IAClB,IAAMI,OAAO,GAAiB,EAAE;IAChC,IAAIH,YAAY,EAAE;MAChBG,OAAO,CAACC,EAAE,GAAGJ,YAAY;;IAE3B,IAAIE,WAAW,IAAI,QAAQ,CAACG,IAAI,CAACH,WAAW,CAAC,EAAE;MAC7CC,OAAO,CAACP,gBAAgB,CAAC,GAAGM,WAAW;;IAEzC,IAAID,UAAU,IAAI,SAAS,CAACI,IAAI,CAACJ,UAAU,CAAC,EAAE;MAC5CE,OAAO,CAACR,eAAe,CAAC,GAAGM,UAAU;;IAEvCV,cAAc,CAACY,OAAO,EAAEL,OAAO,CAAC;;AAEpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}