{"ast":null,"code":"import { ConsoleApiName } from '../../tools/display';\nimport { toStackTraceString } from '../../tools/error';\nimport { assign, combine, jsonStringify, performDraw, includes, startsWith, arrayFrom } from '../../tools/utils';\nimport { getExperimentalFeatures, INTAKE_SITE_STAGING, INTAKE_SITE_US1_FED } from '../configuration';\nimport { computeStackTrace } from '../tracekit';\nimport { Observable } from '../../tools/observable';\nimport { timeStampNow } from '../../tools/timeUtils';\nimport { displayIfDebugEnabled, startMonitorErrorCollection } from '../../tools/monitor';\nimport { sendToExtension } from '../../tools/sendToExtension';\nimport { TelemetryType } from './rawTelemetryEvent.types';\nvar ALLOWED_FRAME_URLS = ['https://www.datadoghq-browser-agent.com', 'https://www.datad0g-browser-agent.com', 'http://localhost', '<anonymous>'];\nvar TELEMETRY_EXCLUDED_SITES = [INTAKE_SITE_US1_FED];\nvar telemetryConfiguration = {\n  maxEventsPerPage: 0,\n  sentEventCount: 0,\n  telemetryEnabled: false,\n  telemetryConfigurationEnabled: false\n};\nvar onRawTelemetryEventCollected;\nexport function startTelemetry(telemetryService, configuration) {\n  var contextProvider;\n  var observable = new Observable();\n  telemetryConfiguration.telemetryEnabled = !includes(TELEMETRY_EXCLUDED_SITES, configuration.site) && performDraw(configuration.telemetrySampleRate);\n  telemetryConfiguration.telemetryConfigurationEnabled = telemetryConfiguration.telemetryEnabled && performDraw(configuration.telemetryConfigurationSampleRate);\n  onRawTelemetryEventCollected = function (rawEvent) {\n    if (telemetryConfiguration.telemetryEnabled) {\n      var event_1 = toTelemetryEvent(telemetryService, rawEvent);\n      observable.notify(event_1);\n      sendToExtension('telemetry', event_1);\n    }\n  };\n  startMonitorErrorCollection(addTelemetryError);\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: configuration.maxTelemetryEventsPerPage,\n    sentEventCount: 0\n  });\n  function toTelemetryEvent(telemetryService, event) {\n    return combine({\n      type: 'telemetry',\n      date: timeStampNow(),\n      service: telemetryService,\n      version: \"4.34.1\",\n      source: 'browser',\n      _dd: {\n        format_version: 2\n      },\n      telemetry: event,\n      experimental_features: arrayFrom(getExperimentalFeatures())\n    }, contextProvider !== undefined ? contextProvider() : {});\n  }\n  return {\n    setContextProvider: function (provider) {\n      contextProvider = provider;\n    },\n    observable: observable,\n    enabled: telemetryConfiguration.telemetryEnabled\n  };\n}\nexport function startFakeTelemetry() {\n  var events = [];\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: Infinity,\n    sentEventCount: 0\n  });\n  onRawTelemetryEventCollected = function (event) {\n    events.push(event);\n  };\n  return events;\n}\nexport function resetTelemetry() {\n  onRawTelemetryEventCollected = undefined;\n}\n/**\n * Avoid mixing telemetry events from different data centers\n * but keep replicating staging events for reliability\n */\nexport function isTelemetryReplicationAllowed(configuration) {\n  return configuration.site === INTAKE_SITE_STAGING;\n}\nexport function addTelemetryDebug(message, context) {\n  displayIfDebugEnabled(ConsoleApiName.debug, message, context);\n  addTelemetry(assign({\n    type: TelemetryType.log,\n    message: message,\n    status: \"debug\" /* debug */\n  }, context));\n}\nexport function addTelemetryError(e) {\n  addTelemetry(assign({\n    type: TelemetryType.log,\n    status: \"error\" /* error */\n  }, formatError(e)));\n}\nexport function addTelemetryConfiguration(configuration) {\n  if (telemetryConfiguration.telemetryConfigurationEnabled) {\n    addTelemetry({\n      type: TelemetryType.configuration,\n      configuration: configuration\n    });\n  }\n}\nfunction addTelemetry(event) {\n  if (onRawTelemetryEventCollected && telemetryConfiguration.sentEventCount < telemetryConfiguration.maxEventsPerPage) {\n    telemetryConfiguration.sentEventCount += 1;\n    onRawTelemetryEventCollected(event);\n  }\n}\nexport function formatError(e) {\n  if (e instanceof Error) {\n    var stackTrace = computeStackTrace(e);\n    return {\n      error: {\n        kind: stackTrace.name,\n        stack: toStackTraceString(scrubCustomerFrames(stackTrace))\n      },\n      message: stackTrace.message\n    };\n  }\n  return {\n    error: {\n      stack: 'Not an instance of error'\n    },\n    message: \"Uncaught \".concat(jsonStringify(e))\n  };\n}\nexport function scrubCustomerFrames(stackTrace) {\n  stackTrace.stack = stackTrace.stack.filter(function (frame) {\n    return !frame.url || ALLOWED_FRAME_URLS.some(function (allowedFrameUrl) {\n      return startsWith(frame.url, allowedFrameUrl);\n    });\n  });\n  return stackTrace;\n}","map":{"version":3,"names":["ConsoleApiName","toStackTraceString","assign","combine","jsonStringify","performDraw","includes","startsWith","arrayFrom","getExperimentalFeatures","INTAKE_SITE_STAGING","INTAKE_SITE_US1_FED","computeStackTrace","Observable","timeStampNow","displayIfDebugEnabled","startMonitorErrorCollection","sendToExtension","TelemetryType","ALLOWED_FRAME_URLS","TELEMETRY_EXCLUDED_SITES","telemetryConfiguration","maxEventsPerPage","sentEventCount","telemetryEnabled","telemetryConfigurationEnabled","onRawTelemetryEventCollected","startTelemetry","telemetryService","configuration","contextProvider","observable","site","telemetrySampleRate","telemetryConfigurationSampleRate","rawEvent","event_1","toTelemetryEvent","notify","addTelemetryError","maxTelemetryEventsPerPage","event","type","date","service","version","source","_dd","format_version","telemetry","experimental_features","undefined","setContextProvider","provider","enabled","startFakeTelemetry","events","Infinity","push","resetTelemetry","isTelemetryReplicationAllowed","addTelemetryDebug","message","context","debug","addTelemetry","log","status","e","formatError","addTelemetryConfiguration","Error","stackTrace","error","kind","name","stack","scrubCustomerFrames","concat","filter","frame","url","some","allowedFrameUrl"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/rum_and_trace_correlation/rum_app/node_modules/@datadog/browser-core/src/domain/telemetry/telemetry.ts"],"sourcesContent":["import type { Context } from '../../tools/context'\nimport { ConsoleApiName } from '../../tools/display'\nimport { toStackTraceString } from '../../tools/error'\nimport { assign, combine, jsonStringify, performDraw, includes, startsWith, arrayFrom } from '../../tools/utils'\nimport type { Configuration } from '../configuration'\nimport { getExperimentalFeatures, INTAKE_SITE_STAGING, INTAKE_SITE_US1_FED } from '../configuration'\nimport type { StackTrace } from '../tracekit'\nimport { computeStackTrace } from '../tracekit'\nimport { Observable } from '../../tools/observable'\nimport { timeStampNow } from '../../tools/timeUtils'\nimport { displayIfDebugEnabled, startMonitorErrorCollection } from '../../tools/monitor'\nimport { sendToExtension } from '../../tools/sendToExtension'\nimport type { TelemetryEvent } from './telemetryEvent.types'\nimport type { RawTelemetryConfiguration, RawTelemetryEvent } from './rawTelemetryEvent.types'\nimport { StatusType, TelemetryType } from './rawTelemetryEvent.types'\n\n// replaced at build time\ndeclare const __BUILD_ENV__SDK_VERSION__: string\n\nconst ALLOWED_FRAME_URLS = [\n  'https://www.datadoghq-browser-agent.com',\n  'https://www.datad0g-browser-agent.com',\n  'http://localhost',\n  '<anonymous>',\n]\n\nexport const enum TelemetryService {\n  LOGS = 'browser-logs-sdk',\n  RUM = 'browser-rum-sdk',\n}\n\nexport interface Telemetry {\n  setContextProvider: (provider: () => Context) => void\n  observable: Observable<TelemetryEvent & Context>\n  enabled: boolean\n}\n\nconst TELEMETRY_EXCLUDED_SITES: string[] = [INTAKE_SITE_US1_FED]\n\nconst telemetryConfiguration: {\n  maxEventsPerPage: number\n  sentEventCount: number\n  telemetryEnabled: boolean\n  telemetryConfigurationEnabled: boolean\n} = { maxEventsPerPage: 0, sentEventCount: 0, telemetryEnabled: false, telemetryConfigurationEnabled: false }\n\nlet onRawTelemetryEventCollected: ((event: RawTelemetryEvent) => void) | undefined\n\nexport function startTelemetry(telemetryService: TelemetryService, configuration: Configuration): Telemetry {\n  let contextProvider: () => Context\n  const observable = new Observable<TelemetryEvent & Context>()\n\n  telemetryConfiguration.telemetryEnabled =\n    !includes(TELEMETRY_EXCLUDED_SITES, configuration.site) && performDraw(configuration.telemetrySampleRate)\n  telemetryConfiguration.telemetryConfigurationEnabled =\n    telemetryConfiguration.telemetryEnabled && performDraw(configuration.telemetryConfigurationSampleRate)\n\n  onRawTelemetryEventCollected = (rawEvent: RawTelemetryEvent) => {\n    if (telemetryConfiguration.telemetryEnabled) {\n      const event = toTelemetryEvent(telemetryService, rawEvent)\n      observable.notify(event)\n      sendToExtension('telemetry', event)\n    }\n  }\n  startMonitorErrorCollection(addTelemetryError)\n\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: configuration.maxTelemetryEventsPerPage,\n    sentEventCount: 0,\n  })\n\n  function toTelemetryEvent(telemetryService: TelemetryService, event: RawTelemetryEvent): TelemetryEvent & Context {\n    return combine(\n      {\n        type: 'telemetry' as const,\n        date: timeStampNow(),\n        service: telemetryService,\n        version: __BUILD_ENV__SDK_VERSION__,\n        source: 'browser' as const,\n        _dd: {\n          format_version: 2 as const,\n        },\n        telemetry: event as any, // https://github.com/microsoft/TypeScript/issues/48457\n        experimental_features: arrayFrom(getExperimentalFeatures()),\n      },\n      contextProvider !== undefined ? contextProvider() : {}\n    )\n  }\n\n  return {\n    setContextProvider: (provider: () => Context) => {\n      contextProvider = provider\n    },\n    observable,\n    enabled: telemetryConfiguration.telemetryEnabled,\n  }\n}\n\nexport function startFakeTelemetry() {\n  const events: RawTelemetryEvent[] = []\n  assign(telemetryConfiguration, {\n    maxEventsPerPage: Infinity,\n    sentEventCount: 0,\n  })\n\n  onRawTelemetryEventCollected = (event: RawTelemetryEvent) => {\n    events.push(event)\n  }\n\n  return events\n}\n\nexport function resetTelemetry() {\n  onRawTelemetryEventCollected = undefined\n}\n\n/**\n * Avoid mixing telemetry events from different data centers\n * but keep replicating staging events for reliability\n */\nexport function isTelemetryReplicationAllowed(configuration: Configuration) {\n  return configuration.site === INTAKE_SITE_STAGING\n}\n\nexport function addTelemetryDebug(message: string, context?: Context) {\n  displayIfDebugEnabled(ConsoleApiName.debug, message, context)\n  addTelemetry(\n    assign(\n      {\n        type: TelemetryType.log,\n        message,\n        status: StatusType.debug,\n      },\n      context\n    )\n  )\n}\n\nexport function addTelemetryError(e: unknown) {\n  addTelemetry(\n    assign(\n      {\n        type: TelemetryType.log,\n        status: StatusType.error,\n      },\n      formatError(e)\n    )\n  )\n}\n\nexport function addTelemetryConfiguration(configuration: RawTelemetryConfiguration) {\n  if (telemetryConfiguration.telemetryConfigurationEnabled) {\n    addTelemetry({\n      type: TelemetryType.configuration,\n      configuration,\n    })\n  }\n}\n\nfunction addTelemetry(event: RawTelemetryEvent) {\n  if (onRawTelemetryEventCollected && telemetryConfiguration.sentEventCount < telemetryConfiguration.maxEventsPerPage) {\n    telemetryConfiguration.sentEventCount += 1\n    onRawTelemetryEventCollected(event)\n  }\n}\n\nexport function formatError(e: unknown) {\n  if (e instanceof Error) {\n    const stackTrace = computeStackTrace(e)\n    return {\n      error: {\n        kind: stackTrace.name,\n        stack: toStackTraceString(scrubCustomerFrames(stackTrace)),\n      },\n      message: stackTrace.message!,\n    }\n  }\n  return {\n    error: {\n      stack: 'Not an instance of error',\n    },\n    message: `Uncaught ${jsonStringify(e)!}`,\n  }\n}\n\nexport function scrubCustomerFrames(stackTrace: StackTrace) {\n  stackTrace.stack = stackTrace.stack.filter(\n    (frame) => !frame.url || ALLOWED_FRAME_URLS.some((allowedFrameUrl) => startsWith(frame.url!, allowedFrameUrl))\n  )\n  return stackTrace\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}