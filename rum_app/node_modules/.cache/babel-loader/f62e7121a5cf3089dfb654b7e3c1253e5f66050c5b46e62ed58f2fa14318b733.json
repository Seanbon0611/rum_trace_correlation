{"ast":null,"code":"import * as utils from '../../tools/utils';\nimport { ContextHistory } from '../../tools/contextHistory';\nimport { relativeNow, clocksOrigin } from '../../tools/timeUtils';\nimport { monitor } from '../../tools/monitor';\nimport { addEventListener, addEventListeners } from '../../browser/addEventListener';\nimport { tryOldCookiesMigration } from './oldCookiesMigration';\nimport { startSessionStore } from './sessionStore';\nimport { SESSION_TIME_OUT_DELAY } from './sessionConstants';\nexport var VISIBILITY_CHECK_DELAY = utils.ONE_MINUTE;\nvar SESSION_CONTEXT_TIMEOUT_DELAY = SESSION_TIME_OUT_DELAY;\nvar stopCallbacks = [];\nexport function startSessionManager(options, productKey, computeSessionState) {\n  tryOldCookiesMigration(options);\n  var sessionStore = startSessionStore(options, productKey, computeSessionState);\n  stopCallbacks.push(function () {\n    return sessionStore.stop();\n  });\n  var sessionContextHistory = new ContextHistory(SESSION_CONTEXT_TIMEOUT_DELAY);\n  stopCallbacks.push(function () {\n    return sessionContextHistory.stop();\n  });\n  sessionStore.renewObservable.subscribe(function () {\n    sessionContextHistory.add(buildSessionContext(), relativeNow());\n  });\n  sessionStore.expireObservable.subscribe(function () {\n    sessionContextHistory.closeActive(relativeNow());\n  });\n  sessionStore.expandOrRenewSession();\n  sessionContextHistory.add(buildSessionContext(), clocksOrigin().relative);\n  trackActivity(function () {\n    return sessionStore.expandOrRenewSession();\n  });\n  trackVisibility(function () {\n    return sessionStore.expandSession();\n  });\n  function buildSessionContext() {\n    return {\n      id: sessionStore.getSession().id,\n      trackingType: sessionStore.getSession()[productKey]\n    };\n  }\n  return {\n    findActiveSession: function (startTime) {\n      return sessionContextHistory.find(startTime);\n    },\n    renewObservable: sessionStore.renewObservable,\n    expireObservable: sessionStore.expireObservable\n  };\n}\nexport function stopSessionManager() {\n  stopCallbacks.forEach(function (e) {\n    return e();\n  });\n  stopCallbacks = [];\n}\nfunction trackActivity(expandOrRenewSession) {\n  var stop = addEventListeners(window, [\"click\" /* CLICK */, \"touchstart\" /* TOUCH_START */, \"keydown\" /* KEY_DOWN */, \"scroll\" /* SCROLL */], expandOrRenewSession, {\n    capture: true,\n    passive: true\n  }).stop;\n  stopCallbacks.push(stop);\n}\nfunction trackVisibility(expandSession) {\n  var expandSessionWhenVisible = monitor(function () {\n    if (document.visibilityState === 'visible') {\n      expandSession();\n    }\n  });\n  var stop = addEventListener(document, \"visibilitychange\" /* VISIBILITY_CHANGE */, expandSessionWhenVisible).stop;\n  stopCallbacks.push(stop);\n  var visibilityCheckInterval = setInterval(expandSessionWhenVisible, VISIBILITY_CHECK_DELAY);\n  stopCallbacks.push(function () {\n    clearInterval(visibilityCheckInterval);\n  });\n}","map":{"version":3,"names":["utils","ContextHistory","relativeNow","clocksOrigin","monitor","addEventListener","addEventListeners","tryOldCookiesMigration","startSessionStore","SESSION_TIME_OUT_DELAY","VISIBILITY_CHECK_DELAY","ONE_MINUTE","SESSION_CONTEXT_TIMEOUT_DELAY","stopCallbacks","startSessionManager","options","productKey","computeSessionState","sessionStore","push","stop","sessionContextHistory","renewObservable","subscribe","add","buildSessionContext","expireObservable","closeActive","expandOrRenewSession","relative","trackActivity","trackVisibility","expandSession","id","getSession","trackingType","findActiveSession","startTime","find","stopSessionManager","forEach","e","window","capture","passive","expandSessionWhenVisible","document","visibilityState","visibilityCheckInterval","setInterval","clearInterval"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/apm-enablement-sessions/rum_and_trace_correlation/react-app/node_modules/@datadog/browser-core/src/domain/session/sessionManager.ts"],"sourcesContent":["import type { CookieOptions } from '../../browser/cookie'\nimport type { Observable } from '../../tools/observable'\nimport * as utils from '../../tools/utils'\nimport type { Context } from '../../tools/context'\nimport { ContextHistory } from '../../tools/contextHistory'\nimport type { RelativeTime } from '../../tools/timeUtils'\nimport { relativeNow, clocksOrigin } from '../../tools/timeUtils'\nimport { monitor } from '../../tools/monitor'\nimport { DOM_EVENT, addEventListener, addEventListeners } from '../../browser/addEventListener'\nimport { tryOldCookiesMigration } from './oldCookiesMigration'\nimport { startSessionStore } from './sessionStore'\nimport { SESSION_TIME_OUT_DELAY } from './sessionConstants'\n\nexport interface SessionManager<TrackingType extends string> {\n  findActiveSession: (startTime?: RelativeTime) => SessionContext<TrackingType> | undefined\n  renewObservable: Observable<void>\n  expireObservable: Observable<void>\n}\n\nexport interface SessionContext<TrackingType extends string> extends Context {\n  id: string\n  trackingType: TrackingType\n}\n\nexport const VISIBILITY_CHECK_DELAY = utils.ONE_MINUTE\nconst SESSION_CONTEXT_TIMEOUT_DELAY = SESSION_TIME_OUT_DELAY\nlet stopCallbacks: Array<() => void> = []\n\nexport function startSessionManager<TrackingType extends string>(\n  options: CookieOptions,\n  productKey: string,\n  computeSessionState: (rawTrackingType?: string) => { trackingType: TrackingType; isTracked: boolean }\n): SessionManager<TrackingType> {\n  tryOldCookiesMigration(options)\n  const sessionStore = startSessionStore(options, productKey, computeSessionState)\n  stopCallbacks.push(() => sessionStore.stop())\n\n  const sessionContextHistory = new ContextHistory<SessionContext<TrackingType>>(SESSION_CONTEXT_TIMEOUT_DELAY)\n  stopCallbacks.push(() => sessionContextHistory.stop())\n\n  sessionStore.renewObservable.subscribe(() => {\n    sessionContextHistory.add(buildSessionContext(), relativeNow())\n  })\n  sessionStore.expireObservable.subscribe(() => {\n    sessionContextHistory.closeActive(relativeNow())\n  })\n\n  sessionStore.expandOrRenewSession()\n  sessionContextHistory.add(buildSessionContext(), clocksOrigin().relative)\n\n  trackActivity(() => sessionStore.expandOrRenewSession())\n  trackVisibility(() => sessionStore.expandSession())\n\n  function buildSessionContext() {\n    return {\n      id: sessionStore.getSession().id!,\n      trackingType: sessionStore.getSession()[productKey] as TrackingType,\n    }\n  }\n\n  return {\n    findActiveSession: (startTime) => sessionContextHistory.find(startTime),\n    renewObservable: sessionStore.renewObservable,\n    expireObservable: sessionStore.expireObservable,\n  }\n}\n\nexport function stopSessionManager() {\n  stopCallbacks.forEach((e) => e())\n  stopCallbacks = []\n}\n\nfunction trackActivity(expandOrRenewSession: () => void) {\n  const { stop } = addEventListeners(\n    window,\n    [DOM_EVENT.CLICK, DOM_EVENT.TOUCH_START, DOM_EVENT.KEY_DOWN, DOM_EVENT.SCROLL],\n    expandOrRenewSession,\n    { capture: true, passive: true }\n  )\n  stopCallbacks.push(stop)\n}\n\nfunction trackVisibility(expandSession: () => void) {\n  const expandSessionWhenVisible = monitor(() => {\n    if (document.visibilityState === 'visible') {\n      expandSession()\n    }\n  })\n\n  const { stop } = addEventListener(document, DOM_EVENT.VISIBILITY_CHANGE, expandSessionWhenVisible)\n  stopCallbacks.push(stop)\n\n  const visibilityCheckInterval = setInterval(expandSessionWhenVisible, VISIBILITY_CHECK_DELAY)\n  stopCallbacks.push(() => {\n    clearInterval(visibilityCheckInterval)\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}