{"ast":null,"code":"import { performDraw, startSessionManager } from '@datadog/browser-core';\nexport var RUM_SESSION_KEY = 'rum';\nexport function startRumSessionManager(configuration, lifeCycle) {\n  var sessionManager = startSessionManager(configuration.cookieOptions, RUM_SESSION_KEY, function (rawTrackingType) {\n    return computeSessionState(configuration, rawTrackingType);\n  });\n  sessionManager.expireObservable.subscribe(function () {\n    lifeCycle.notify(7 /* SESSION_EXPIRED */);\n  });\n\n  sessionManager.renewObservable.subscribe(function () {\n    lifeCycle.notify(8 /* SESSION_RENEWED */);\n  });\n\n  return {\n    findTrackedSession: function (startTime) {\n      var session = sessionManager.findActiveSession(startTime);\n      if (!session || !isTypeTracked(session.trackingType)) {\n        return;\n      }\n      var plan = session.trackingType === \"1\" /* TRACKED_WITH_SESSION_REPLAY */ ? 2 /* WITH_SESSION_REPLAY */ : 1 /* WITHOUT_SESSION_REPLAY */;\n      return {\n        id: session.id,\n        plan: plan,\n        sessionReplayAllowed: plan === 2 /* WITH_SESSION_REPLAY */,\n        longTaskAllowed: configuration.trackLongTasks !== undefined ? configuration.trackLongTasks : configuration.oldPlansBehavior && plan === 2 /* WITH_SESSION_REPLAY */,\n        resourceAllowed: configuration.trackResources !== undefined ? configuration.trackResources : configuration.oldPlansBehavior && plan === 2 /* WITH_SESSION_REPLAY */\n      };\n    }\n  };\n}\n/**\n * Start a tracked replay session stub\n */\nexport function startRumSessionManagerStub() {\n  var session = {\n    id: '00000000-aaaa-0000-aaaa-000000000000',\n    plan: 1 /* WITHOUT_SESSION_REPLAY */,\n    sessionReplayAllowed: false,\n    longTaskAllowed: true,\n    resourceAllowed: true\n  };\n  return {\n    findTrackedSession: function () {\n      return session;\n    }\n  };\n}\nfunction computeSessionState(configuration, rawTrackingType) {\n  var trackingType;\n  if (hasValidRumSession(rawTrackingType)) {\n    trackingType = rawTrackingType;\n  } else if (!performDraw(configuration.sessionSampleRate)) {\n    trackingType = \"0\" /* NOT_TRACKED */;\n  } else if (!performDraw(configuration.sessionReplaySampleRate)) {\n    trackingType = \"2\" /* TRACKED_WITHOUT_SESSION_REPLAY */;\n  } else {\n    trackingType = \"1\" /* TRACKED_WITH_SESSION_REPLAY */;\n  }\n\n  return {\n    trackingType: trackingType,\n    isTracked: isTypeTracked(trackingType)\n  };\n}\nfunction hasValidRumSession(trackingType) {\n  return trackingType === \"0\" /* NOT_TRACKED */ || trackingType === \"1\" /* TRACKED_WITH_SESSION_REPLAY */ || trackingType === \"2\" /* TRACKED_WITHOUT_SESSION_REPLAY */;\n}\n\nfunction isTypeTracked(rumSessionType) {\n  return rumSessionType === \"2\" /* TRACKED_WITHOUT_SESSION_REPLAY */ || rumSessionType === \"1\" /* TRACKED_WITH_SESSION_REPLAY */;\n}","map":{"version":3,"names":["performDraw","startSessionManager","RUM_SESSION_KEY","startRumSessionManager","configuration","lifeCycle","sessionManager","cookieOptions","rawTrackingType","computeSessionState","expireObservable","subscribe","notify","renewObservable","findTrackedSession","startTime","session","findActiveSession","isTypeTracked","trackingType","plan","id","sessionReplayAllowed","longTaskAllowed","trackLongTasks","undefined","oldPlansBehavior","resourceAllowed","trackResources","startRumSessionManagerStub","hasValidRumSession","sessionSampleRate","sessionReplaySampleRate","isTracked","rumSessionType"],"sources":["/Users/sean.dever/Desktop/PersonalRepos/react-app/node_modules/@datadog/browser-rum-core/src/domain/rumSessionManager.ts"],"sourcesContent":["import type { RelativeTime } from '@datadog/browser-core'\nimport { performDraw, startSessionManager } from '@datadog/browser-core'\nimport type { RumConfiguration } from './configuration'\nimport type { LifeCycle } from './lifeCycle'\nimport { LifeCycleEventType } from './lifeCycle'\n\nexport const RUM_SESSION_KEY = 'rum'\n\nexport interface RumSessionManager {\n  findTrackedSession: (startTime?: RelativeTime) => RumSession | undefined\n}\n\nexport type RumSession = {\n  id: string\n  plan: RumSessionPlan\n  sessionReplayAllowed: boolean\n  longTaskAllowed: boolean\n  resourceAllowed: boolean\n}\n\nexport const enum RumSessionPlan {\n  WITHOUT_SESSION_REPLAY = 1,\n  WITH_SESSION_REPLAY = 2,\n}\n\nexport const enum RumTrackingType {\n  NOT_TRACKED = '0',\n  // Note: the \"tracking type\" value (stored in the session cookie) does not match the \"session\n  // plan\" value (sent in RUM events). This is expected, and was done to keep retrocompatibility\n  // with active sessions when upgrading the SDK.\n  TRACKED_WITH_SESSION_REPLAY = '1',\n  TRACKED_WITHOUT_SESSION_REPLAY = '2',\n}\n\nexport function startRumSessionManager(configuration: RumConfiguration, lifeCycle: LifeCycle): RumSessionManager {\n  const sessionManager = startSessionManager(configuration.cookieOptions, RUM_SESSION_KEY, (rawTrackingType) =>\n    computeSessionState(configuration, rawTrackingType)\n  )\n\n  sessionManager.expireObservable.subscribe(() => {\n    lifeCycle.notify(LifeCycleEventType.SESSION_EXPIRED)\n  })\n\n  sessionManager.renewObservable.subscribe(() => {\n    lifeCycle.notify(LifeCycleEventType.SESSION_RENEWED)\n  })\n\n  return {\n    findTrackedSession: (startTime) => {\n      const session = sessionManager.findActiveSession(startTime)\n      if (!session || !isTypeTracked(session.trackingType)) {\n        return\n      }\n      const plan =\n        session.trackingType === RumTrackingType.TRACKED_WITH_SESSION_REPLAY\n          ? RumSessionPlan.WITH_SESSION_REPLAY\n          : RumSessionPlan.WITHOUT_SESSION_REPLAY\n      return {\n        id: session.id,\n        plan,\n        sessionReplayAllowed: plan === RumSessionPlan.WITH_SESSION_REPLAY,\n        longTaskAllowed:\n          configuration.trackLongTasks !== undefined\n            ? configuration.trackLongTasks\n            : configuration.oldPlansBehavior && plan === RumSessionPlan.WITH_SESSION_REPLAY,\n        resourceAllowed:\n          configuration.trackResources !== undefined\n            ? configuration.trackResources\n            : configuration.oldPlansBehavior && plan === RumSessionPlan.WITH_SESSION_REPLAY,\n      }\n    },\n  }\n}\n\n/**\n * Start a tracked replay session stub\n */\nexport function startRumSessionManagerStub(): RumSessionManager {\n  const session: RumSession = {\n    id: '00000000-aaaa-0000-aaaa-000000000000',\n    plan: RumSessionPlan.WITHOUT_SESSION_REPLAY, // plan value should not be taken into account for mobile\n    sessionReplayAllowed: false,\n    longTaskAllowed: true,\n    resourceAllowed: true,\n  }\n  return {\n    findTrackedSession: () => session,\n  }\n}\n\nfunction computeSessionState(configuration: RumConfiguration, rawTrackingType?: string) {\n  let trackingType: RumTrackingType\n  if (hasValidRumSession(rawTrackingType)) {\n    trackingType = rawTrackingType\n  } else if (!performDraw(configuration.sessionSampleRate)) {\n    trackingType = RumTrackingType.NOT_TRACKED\n  } else if (!performDraw(configuration.sessionReplaySampleRate)) {\n    trackingType = RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY\n  } else {\n    trackingType = RumTrackingType.TRACKED_WITH_SESSION_REPLAY\n  }\n  return {\n    trackingType,\n    isTracked: isTypeTracked(trackingType),\n  }\n}\n\nfunction hasValidRumSession(trackingType?: string): trackingType is RumTrackingType {\n  return (\n    trackingType === RumTrackingType.NOT_TRACKED ||\n    trackingType === RumTrackingType.TRACKED_WITH_SESSION_REPLAY ||\n    trackingType === RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY\n  )\n}\n\nfunction isTypeTracked(rumSessionType: RumTrackingType | undefined) {\n  return (\n    rumSessionType === RumTrackingType.TRACKED_WITHOUT_SESSION_REPLAY ||\n    rumSessionType === RumTrackingType.TRACKED_WITH_SESSION_REPLAY\n  )\n}\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,mBAAmB,QAAQ,uBAAuB;AAKxE,OAAO,IAAMC,eAAe,GAAG,KAAK;AA4BpC,OAAM,SAAUC,sBAAsBA,CAACC,aAA+B,EAAEC,SAAoB;EAC1F,IAAMC,cAAc,GAAGL,mBAAmB,CAACG,aAAa,CAACG,aAAa,EAAEL,eAAe,EAAE,UAACM,eAAe;IACvG,OAAAC,mBAAmB,CAACL,aAAa,EAAEI,eAAe,CAAC;EAAnD,CAAmD,CACpD;EAEDF,cAAc,CAACI,gBAAgB,CAACC,SAAS,CAAC;IACxCN,SAAS,CAACO,MAAM,yBAAoC;EACtD,CAAC,CAAC;;EAEFN,cAAc,CAACO,eAAe,CAACF,SAAS,CAAC;IACvCN,SAAS,CAACO,MAAM,yBAAoC;EACtD,CAAC,CAAC;;EAEF,OAAO;IACLE,kBAAkB,EAAE,SAAAA,CAACC,SAAS;MAC5B,IAAMC,OAAO,GAAGV,cAAc,CAACW,iBAAiB,CAACF,SAAS,CAAC;MAC3D,IAAI,CAACC,OAAO,IAAI,CAACE,aAAa,CAACF,OAAO,CAACG,YAAY,CAAC,EAAE;QACpD;;MAEF,IAAMC,IAAI,GACRJ,OAAO,CAACG,YAAY,6CACjB,8BACA;MACL,OAAO;QACLE,EAAE,EAAEL,OAAO,CAACK,EAAE;QACdD,IAAI,EAAAA,IAAA;QACJE,oBAAoB,EAAEF,IAAI;QAC1BG,eAAe,EACbnB,aAAa,CAACoB,cAAc,KAAKC,SAAS,GACtCrB,aAAa,CAACoB,cAAc,GAC5BpB,aAAa,CAACsB,gBAAgB,IAAIN,IAAI;QAC5CO,eAAe,EACbvB,aAAa,CAACwB,cAAc,KAAKH,SAAS,GACtCrB,aAAa,CAACwB,cAAc,GAC5BxB,aAAa,CAACsB,gBAAgB,IAAIN,IAAI;OAC7C;IACH;GACD;AACH;AAEA;;;AAGA,OAAM,SAAUS,0BAA0BA,CAAA;EACxC,IAAMb,OAAO,GAAe;IAC1BK,EAAE,EAAE,sCAAsC;IAC1CD,IAAI;IACJE,oBAAoB,EAAE,KAAK;IAC3BC,eAAe,EAAE,IAAI;IACrBI,eAAe,EAAE;GAClB;EACD,OAAO;IACLb,kBAAkB,EAAE,SAAAA,CAAA;MAAM,OAAAE,OAAO;IAAP;GAC3B;AACH;AAEA,SAASP,mBAAmBA,CAACL,aAA+B,EAAEI,eAAwB;EACpF,IAAIW,YAA6B;EACjC,IAAIW,kBAAkB,CAACtB,eAAe,CAAC,EAAE;IACvCW,YAAY,GAAGX,eAAe;GAC/B,MAAM,IAAI,CAACR,WAAW,CAACI,aAAa,CAAC2B,iBAAiB,CAAC,EAAE;IACxDZ,YAAY;GACb,MAAM,IAAI,CAACnB,WAAW,CAACI,aAAa,CAAC4B,uBAAuB,CAAC,EAAE;IAC9Db,YAAY;GACb,MAAM;IACLA,YAAY;;;EAEd,OAAO;IACLA,YAAY,EAAAA,YAAA;IACZc,SAAS,EAAEf,aAAa,CAACC,YAAY;GACtC;AACH;AAEA,SAASW,kBAAkBA,CAACX,YAAqB;EAC/C,OACEA,YAAY,8BACZA,YAAY,8CACZA,YAAY;AAEhB;;AAEA,SAASD,aAAaA,CAACgB,cAA2C;EAChE,OACEA,cAAc,iDACdA,cAAc;AAElB"},"metadata":{},"sourceType":"module","externalDependencies":[]}