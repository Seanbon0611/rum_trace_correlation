export { Configuration, InitConfiguration, buildCookieOptions, validateAndBuildConfiguration, DefaultPrivacyLevel, EndpointBuilder, isExperimentalFeatureEnabled, updateExperimentalFeatures, resetExperimentalFeatures, serializeConfiguration, } from '@datadog/browser-core/cjs/domain/configuration';
export { trackRuntimeError } from '@datadog/browser-core/cjs/domain/error/trackRuntimeError';
export { computeStackTrace, StackTrace } from '@datadog/browser-core/cjs/domain/tracekit';
export { defineGlobal, makePublicApi } from '@datadog/browser-core/cjs/boot/init';
export { initReportObservable, RawReport, RawReportType } from '@datadog/browser-core/cjs/domain/report/reportObservable';
export { startTelemetry, Telemetry, RawTelemetryEvent, RawTelemetryConfiguration, addTelemetryDebug, addTelemetryError, startFakeTelemetry, resetTelemetry, TelemetryEvent, TelemetryErrorEvent, TelemetryDebugEvent, TelemetryConfigurationEvent, TelemetryService, isTelemetryReplicationAllowed, addTelemetryConfiguration, } from '@datadog/browser-core/cjs/domain/telemetry';
export { monitored, monitor, callMonitored, setDebugMode } from '@datadog/browser-core/cjs/tools/monitor';
export { Observable, Subscription } from '@datadog/browser-core/cjs/tools/observable';
export { startSessionManager, SessionManager, stopSessionManager, } from '@datadog/browser-core/cjs/domain/session/sessionManager';
export { SESSION_TIME_OUT_DELAY, } from '@datadog/browser-core/cjs/domain/session/sessionConstants';
export { HttpRequest, Payload, createHttpRequest, Batch, BatchFlushEvent, canUseEventBridge, getEventBridge, startBatchWithReplica, } from '@datadog/browser-core/cjs/transport';
export * from '@datadog/browser-core/cjs/tools/display';
export * from '@datadog/browser-core/cjs/tools/urlPolyfill';
export * from '@datadog/browser-core/cjs/tools/timeUtils';
export * from '@datadog/browser-core/cjs/tools/utils';
export * from '@datadog/browser-core/cjs/tools/createEventRateLimiter';
export * from '@datadog/browser-core/cjs/tools/browserDetection';
export { sendToExtension } from '@datadog/browser-core/cjs/tools/sendToExtension';
export { runOnReadyState } from '@datadog/browser-core/cjs/tools/runOnReadyState';
export { getZoneJsOriginalValue } from '@datadog/browser-core/cjs/tools/getZoneJsOriginalValue';
export { instrumentMethod, instrumentMethodAndCallOriginal, instrumentSetter } from '@datadog/browser-core/cjs/tools/instrumentMethod';
export { ErrorSource, ErrorHandling, computeRawError, createHandlingStack, RawError, RawErrorCause, ErrorWithCause, toStackTraceString, getFileFromStackTraceString, } from '@datadog/browser-core/cjs/tools/error';
export { Context, ContextArray, ContextValue } from '@datadog/browser-core/cjs/tools/context';
export { areCookiesAuthorized, getCookie, setCookie, deleteCookie, COOKIE_ACCESS_DELAY } from '@datadog/browser-core/cjs/browser/cookie';
export { initXhrObservable, XhrCompleteContext, XhrStartContext } from '@datadog/browser-core/cjs/browser/xhrObservable';
export { initFetchObservable, FetchResolveContext, FetchStartContext, FetchContext } from '@datadog/browser-core/cjs/browser/fetchObservable';
export { createPageExitObservable, PageExitEvent, PageExitReason, isPageExitReason } from '@datadog/browser-core/cjs/browser/pageExitObservable';
export * from '@datadog/browser-core/cjs/browser/addEventListener';
export { initConsoleObservable, ConsoleLog } from '@datadog/browser-core/cjs/domain/console/consoleObservable';
export { BoundedBuffer } from '@datadog/browser-core/cjs/tools/boundedBuffer';
export { catchUserErrors } from '@datadog/browser-core/cjs/tools/catchUserErrors';
export { createContextManager, ContextManager } from '@datadog/browser-core/cjs/tools/contextManager';
export { limitModification } from '@datadog/browser-core/cjs/tools/limitModification';
export { ContextHistory, ContextHistoryEntry, CLEAR_OLD_CONTEXTS_INTERVAL } from '@datadog/browser-core/cjs/tools/contextHistory';
export { readBytesFromStream } from '@datadog/browser-core/cjs/tools/readBytesFromStream';
export { SESSION_COOKIE_NAME } from '@datadog/browser-core/cjs/domain/session/sessionCookieStore';
export { willSyntheticsInjectRum, getSyntheticsTestId, getSyntheticsResultId, } from '@datadog/browser-core/cjs/domain/synthetics/syntheticsWorkerValues';
export { User, checkUser, sanitizeUser } from '@datadog/browser-core/cjs/domain/user';
